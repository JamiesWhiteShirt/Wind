; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_R4GeometryShader@gfxu@@6B@			; gfxu::GeometryShader::`RTTI Complete Object Locator'
PUBLIC	??_7Shader@gfxu@@6B@				; gfxu::Shader::`vftable'
PUBLIC	??_R4Shader@gfxu@@6B@				; gfxu::Shader::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@VertexStream@gfxu@@8		; gfxu::VertexStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7FragmentShader@gfxu@@6B@			; gfxu::FragmentShader::`vftable'
PUBLIC	??_R3VertexStream@gfxu@@8			; gfxu::VertexStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2GeometryShader@gfxu@@8			; gfxu::GeometryShader::`RTTI Base Class Array'
PUBLIC	??_R3VertexShader@gfxu@@8			; gfxu::VertexShader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3FragmentShader@gfxu@@8			; gfxu::FragmentShader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7GeometryShader@gfxu@@6B@			; gfxu::GeometryShader::`vftable'
PUBLIC	??_R0?AVShader@gfxu@@@8				; gfxu::Shader `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@FragmentShader@gfxu@@8		; gfxu::FragmentShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVGeometryShader@gfxu@@@8			; gfxu::GeometryShader `RTTI Type Descriptor'
PUBLIC	?current@ShaderProgram@gfxu@@2PEAV12@EA		; gfxu::ShaderProgram::current
PUBLIC	?forceUpload@Uniforms@gfxu@@0_NA		; gfxu::Uniforms::forceUpload
PUBLIC	??_R2VertexShader@gfxu@@8			; gfxu::VertexShader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@VertexShader@gfxu@@8		; gfxu::VertexShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2Shader@gfxu@@8				; gfxu::Shader::`RTTI Base Class Array'
PUBLIC	??_R4VertexShader@gfxu@@6B@			; gfxu::VertexShader::`RTTI Complete Object Locator'
PUBLIC	??_R4VertexStream@gfxu@@6B@			; gfxu::VertexStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVFragmentShader@gfxu@@@8			; gfxu::FragmentShader `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@GeometryShader@gfxu@@8		; gfxu::GeometryShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7VertexStream@gfxu@@6B@			; gfxu::VertexStream::`vftable'
PUBLIC	??_R4FragmentShader@gfxu@@6B@			; gfxu::FragmentShader::`RTTI Complete Object Locator'
PUBLIC	??_R3Shader@gfxu@@8				; gfxu::Shader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2VertexStream@gfxu@@8			; gfxu::VertexStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Shader@gfxu@@8			; gfxu::Shader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVertexStream@gfxu@@@8			; gfxu::VertexStream `RTTI Type Descriptor'
PUBLIC	??_R0?AVVertexShader@gfxu@@@8			; gfxu::VertexShader `RTTI Type Descriptor'
PUBLIC	??_7VertexShader@gfxu@@6B@			; gfxu::VertexShader::`vftable'
PUBLIC	??_R3GeometryShader@gfxu@@8			; gfxu::GeometryShader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2FragmentShader@gfxu@@8			; gfxu::FragmentShader::`RTTI Base Class Array'
PUBLIC	?vs@@3HA					; vs
EXTRN	__imp_gluErrorString:PROC
EXTRN	__imp_glGenTextures:PROC
EXTRN	__imp_glTexParameteri:PROC
EXTRN	__imp_glDrawArrays:PROC
EXTRN	__imp_glGetError:PROC
EXTRN	__imp_glTexImage2D:PROC
EXTRN	__imp_glBindTexture:PROC
EXTRN	__imp_glDeleteTextures:PROC
?current@ShaderProgram@gfxu@@2PEAV12@EA DQ 01H DUP (?)	; gfxu::ShaderProgram::current
?forceUpload@Uniforms@gfxu@@0_NA DB 01H DUP (?)		; gfxu::Uniforms::forceUpload
	ALIGN	4

?vs@@3HA DD	01H DUP (?)				; vs
_BSS	ENDS
;	COMDAT ??_R2FragmentShader@gfxu@@8
rdata$r	SEGMENT
??_R2FragmentShader@gfxu@@8 DD imagerel ??_R1A@?0A@EA@FragmentShader@gfxu@@8 ; gfxu::FragmentShader::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Shader@gfxu@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3GeometryShader@gfxu@@8
rdata$r	SEGMENT
??_R3GeometryShader@gfxu@@8 DD 00H			; gfxu::GeometryShader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2GeometryShader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_7VertexShader@gfxu@@6B@
CONST	SEGMENT
??_7VertexShader@gfxu@@6B@ DQ FLAT:??_R4VertexShader@gfxu@@6B@ ; gfxu::VertexShader::`vftable'
	DQ	FLAT:?compile@VertexShader@gfxu@@UEAA_NXZ
CONST	ENDS
;	COMDAT ??_R0?AVVertexShader@gfxu@@@8
_DATA	SEGMENT
??_R0?AVVertexShader@gfxu@@@8 DQ FLAT:??_7type_info@@6B@ ; gfxu::VertexShader `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVVertexShader@gfxu@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVVertexStream@gfxu@@@8
_DATA	SEGMENT
??_R0?AVVertexStream@gfxu@@@8 DQ FLAT:??_7type_info@@6B@ ; gfxu::VertexStream `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVVertexStream@gfxu@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@Shader@gfxu@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Shader@gfxu@@8 DD imagerel ??_R0?AVShader@gfxu@@@8 ; gfxu::Shader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Shader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R2VertexStream@gfxu@@8
rdata$r	SEGMENT
??_R2VertexStream@gfxu@@8 DD imagerel ??_R1A@?0A@EA@VertexStream@gfxu@@8 ; gfxu::VertexStream::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3Shader@gfxu@@8
rdata$r	SEGMENT
??_R3Shader@gfxu@@8 DD 00H				; gfxu::Shader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2Shader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R4FragmentShader@gfxu@@6B@
rdata$r	SEGMENT
??_R4FragmentShader@gfxu@@6B@ DD 01H			; gfxu::FragmentShader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVFragmentShader@gfxu@@@8
	DD	imagerel ??_R3FragmentShader@gfxu@@8
	DD	imagerel ??_R4FragmentShader@gfxu@@6B@
rdata$r	ENDS
;	COMDAT ??_7VertexStream@gfxu@@6B@
CONST	SEGMENT
??_7VertexStream@gfxu@@6B@ DQ FLAT:??_R4VertexStream@gfxu@@6B@ ; gfxu::VertexStream::`vftable'
	DQ	FLAT:??_EVertexStream@gfxu@@UEAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@GeometryShader@gfxu@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@GeometryShader@gfxu@@8 DD imagerel ??_R0?AVGeometryShader@gfxu@@@8 ; gfxu::GeometryShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3GeometryShader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVFragmentShader@gfxu@@@8
_DATA	SEGMENT
??_R0?AVFragmentShader@gfxu@@@8 DQ FLAT:??_7type_info@@6B@ ; gfxu::FragmentShader `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVFragmentShader@gfxu@@', 00H
_DATA	ENDS
;	COMDAT ??_R4VertexStream@gfxu@@6B@
rdata$r	SEGMENT
??_R4VertexStream@gfxu@@6B@ DD 01H			; gfxu::VertexStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVVertexStream@gfxu@@@8
	DD	imagerel ??_R3VertexStream@gfxu@@8
	DD	imagerel ??_R4VertexStream@gfxu@@6B@
rdata$r	ENDS
;	COMDAT ??_R4VertexShader@gfxu@@6B@
rdata$r	SEGMENT
??_R4VertexShader@gfxu@@6B@ DD 01H			; gfxu::VertexShader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVVertexShader@gfxu@@@8
	DD	imagerel ??_R3VertexShader@gfxu@@8
	DD	imagerel ??_R4VertexShader@gfxu@@6B@
rdata$r	ENDS
;	COMDAT ??_R2Shader@gfxu@@8
rdata$r	SEGMENT
??_R2Shader@gfxu@@8 DD imagerel ??_R1A@?0A@EA@Shader@gfxu@@8 ; gfxu::Shader::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@VertexShader@gfxu@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VertexShader@gfxu@@8 DD imagerel ??_R0?AVVertexShader@gfxu@@@8 ; gfxu::VertexShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3VertexShader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R2VertexShader@gfxu@@8
rdata$r	SEGMENT
??_R2VertexShader@gfxu@@8 DD imagerel ??_R1A@?0A@EA@VertexShader@gfxu@@8 ; gfxu::VertexShader::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Shader@gfxu@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R0?AVGeometryShader@gfxu@@@8
_DATA	SEGMENT
??_R0?AVGeometryShader@gfxu@@@8 DQ FLAT:??_7type_info@@6B@ ; gfxu::GeometryShader `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVGeometryShader@gfxu@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@FragmentShader@gfxu@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@FragmentShader@gfxu@@8 DD imagerel ??_R0?AVFragmentShader@gfxu@@@8 ; gfxu::FragmentShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3FragmentShader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVShader@gfxu@@@8
_DATA	SEGMENT
??_R0?AVShader@gfxu@@@8 DQ FLAT:??_7type_info@@6B@	; gfxu::Shader `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVShader@gfxu@@', 00H
_DATA	ENDS
;	COMDAT ??_7GeometryShader@gfxu@@6B@
CONST	SEGMENT
??_7GeometryShader@gfxu@@6B@ DQ FLAT:??_R4GeometryShader@gfxu@@6B@ ; gfxu::GeometryShader::`vftable'
	DQ	FLAT:?compile@GeometryShader@gfxu@@UEAA_NXZ
CONST	ENDS
;	COMDAT ??_R3FragmentShader@gfxu@@8
rdata$r	SEGMENT
??_R3FragmentShader@gfxu@@8 DD 00H			; gfxu::FragmentShader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2FragmentShader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R3VertexShader@gfxu@@8
rdata$r	SEGMENT
??_R3VertexShader@gfxu@@8 DD 00H			; gfxu::VertexShader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2VertexShader@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R2GeometryShader@gfxu@@8
rdata$r	SEGMENT
??_R2GeometryShader@gfxu@@8 DD imagerel ??_R1A@?0A@EA@GeometryShader@gfxu@@8 ; gfxu::GeometryShader::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Shader@gfxu@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3VertexStream@gfxu@@8
rdata$r	SEGMENT
??_R3VertexStream@gfxu@@8 DD 00H			; gfxu::VertexStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2VertexStream@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_7FragmentShader@gfxu@@6B@
CONST	SEGMENT
??_7FragmentShader@gfxu@@6B@ DQ FLAT:??_R4FragmentShader@gfxu@@6B@ ; gfxu::FragmentShader::`vftable'
	DQ	FLAT:?compile@FragmentShader@gfxu@@UEAA_NXZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@VertexStream@gfxu@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VertexStream@gfxu@@8 DD imagerel ??_R0?AVVertexStream@gfxu@@@8 ; gfxu::VertexStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3VertexStream@gfxu@@8
rdata$r	ENDS
;	COMDAT ??_R4Shader@gfxu@@6B@
rdata$r	SEGMENT
??_R4Shader@gfxu@@6B@ DD 01H				; gfxu::Shader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVShader@gfxu@@@8
	DD	imagerel ??_R3Shader@gfxu@@8
	DD	imagerel ??_R4Shader@gfxu@@6B@
rdata$r	ENDS
;	COMDAT ??_7Shader@gfxu@@6B@
CONST	SEGMENT
??_7Shader@gfxu@@6B@ DQ FLAT:??_R4Shader@gfxu@@6B@	; gfxu::Shader::`vftable'
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT ??_R4GeometryShader@gfxu@@6B@
rdata$r	SEGMENT
??_R4GeometryShader@gfxu@@6B@ DD 01H			; gfxu::GeometryShader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVGeometryShader@gfxu@@@8
	DD	imagerel ??_R3GeometryShader@gfxu@@8
	DD	imagerel ??_R4GeometryShader@gfxu@@6B@
	ORG $+2
$SG4294928265 DB 'Vertex stream upload error', 00H
	ORG $+5
$SG4294928264 DB 'Vertex stream upload error', 00H
	ORG $+5
$SG4294928263 DB 'Shader compliation error', 00H
	ORG $+7
$SG4294928262 DB 'Shader compliation error', 00H
	ORG $+7
$SG4294928261 DB 'The shader had a compilation error, but returned no log'
	DB	'.', 00H
	ORG $+7
$SG4294928260 DB 'Unable to attach shaders.', 00H
	ORG $+6
$SG4294928259 DB 'Linking error', 00H
	ORG $+2
$SG4294928258 DB 'Linking error', 00H
	ORG $+2
$SG4294928257 DB 'The program has a linking error, but returned no log.', 00H
	ORG $+2
$SG4294928256 DB 'modelview', 00H
	ORG $+6
$SG4294928255 DB 'projection', 00H
	ORG $+5
$SG4294928254 DB 'const_color', 00H
	ORG $+4
$SG4294928253 DB 'cam_pos', 00H
$SG4294928252 DB 'fog_color', 00H
	ORG $+6
$SG4294928251 DB 'fog_dist', 00H
	ORG $+7
$SG4294928250 DB 'texture_1', 00H
	ORG $+6
$SG4294928249 DB 'OpenGL error', 00H
PUBLIC	??$_Move@AEAVMatrix@geom@@@std@@YA$$QEAVMatrix@geom@@AEAV12@@Z ; std::_Move<geom::Matrix & __ptr64>
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@$$QEAV23@@Z ; std::allocator<gfxu::VertexUVRGBA>::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
PUBLIC	??$swap@VMatrix@geom@@@std@@YAXAEAVMatrix@geom@@0@Z ; std::swap<geom::Matrix>
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@$$QEAV34@@Z ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
PUBLIC	??$forward@VVertexUVRGBA@gfxu@@@std@@YA$$QEAVVertexUVRGBA@gfxu@@AEAV12@@Z ; std::forward<gfxu::VertexUVRGBA>
PUBLIC	??$destroy@VVertexUVRGBA@gfxu@@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@@Z ; std::allocator<gfxu::VertexUVRGBA>::destroy<gfxu::VertexUVRGBA>
PUBLIC	??Y?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=
PUBLIC	??G?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV01@@Z ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
PUBLIC	??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEBVMatrix@geom@@XZ ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
PUBLIC	??Y?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=
PUBLIC	??G?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
PUBLIC	??H?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
PUBLIC	??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEAVMatrix@geom@@XZ ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
PUBLIC	??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
PUBLIC	??$_Advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_J@std@@YAXAEAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@_JUrandom_access_iterator_tag@0@@Z ; std::_Advance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,__int64>
PUBLIC	??$_Distance2@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_J@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0AEA_JUrandom_access_iterator_tag@0@@Z ; std::_Distance2<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,__int64>
PUBLIC	??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,__int64,geom::Matrix>
PUBLIC	??$_Val_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPEAVMatrix@geom@@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ; std::_Val_type<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$_Dist_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPEA_JV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ; std::_Dist_type<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$iter_swap@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@V12@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z ; std::iter_swap<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@V12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@$$QEAV23@@Z ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
PUBLIC	??$destroy@VVertexUVRGBA@gfxu@@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@@Z ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::destroy<gfxu::VertexUVRGBA>
PUBLIC	??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??8?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator==
PUBLIC	??F?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator--
PUBLIC	??E?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++
PUBLIC	??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??9?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator!=
PUBLIC	??F?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator--
PUBLIC	??E?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++
PUBLIC	?_Unchecked@?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Unchecked
PUBLIC	??$_Fill_n@PEAPEAVMatrix@geom@@_KPEAV12@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@_KAEBQEAV12@@Z ; std::_Fill_n<geom::Matrix * __ptr64 * __ptr64,unsigned __int64,geom::Matrix * __ptr64>
PUBLIC	??$destroy@PEAVMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QEAAXPEAPEAVMatrix@geom@@@Z ; std::allocator<geom::Matrix>::destroy<geom::Matrix * __ptr64>
PUBLIC	??$destroy@VMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@@Z ; std::allocator<geom::Matrix>::destroy<geom::Matrix>
PUBLIC	??$construct@VMatrix@geom@@V12@@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@$$QEAV23@@Z ; std::allocator<geom::Matrix>::construct<geom::Matrix,geom::Matrix>
PUBLIC	??$advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_J@std@@YAXAEAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@_J@Z ; std::advance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,__int64>
PUBLIC	??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z ; std::distance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00Urandom_access_iterator_tag@0@@Z ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$_Reverse@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0Ubidirectional_iterator_tag@0@@Z ; std::_Reverse<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$_Iter_cat@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@AEBV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ; std::_Iter_cat<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$_Unchecked@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@YA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ; std::_Unchecked<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??$_Uninit_move@PEAVVertexUVRGBA@gfxu@@PEAV12@V?$allocator@VVertexUVRGBA@gfxu@@@std@@V12@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@00AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<gfxu::VertexUVRGBA * __ptr64,gfxu::VertexUVRGBA * __ptr64,std::allocator<gfxu::VertexUVRGBA>,gfxu::VertexUVRGBA>
PUBLIC	??$_Val_type@PEAVVertexUVRGBA@gfxu@@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@@Z ; std::_Val_type<gfxu::VertexUVRGBA * __ptr64>
PUBLIC	??$destroy@VVertexUVRGBA@gfxu@@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@@Z ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::destroy<gfxu::VertexUVRGBA>
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@AEAV12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEAV23@@Z ; std::allocator<gfxu::VertexUVRGBA>::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA & __ptr64>
PUBLIC	?construct@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@AEBV34@@Z ; std::allocator<geom::Matrix>::construct
PUBLIC	?construct@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEBV34@@Z ; std::allocator<gfxu::VertexUVRGBA>::construct
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@0AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> > >
PUBLIC	??$_Uninit_def_fill_n@PEAVMatrix@geom@@_KPEAV12@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_def_fill_n<geom::Matrix * __ptr64,unsigned __int64,geom::Matrix * __ptr64>
PUBLIC	??$_Val_type@PEAPEAVMatrix@geom@@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@@Z ; std::_Val_type<geom::Matrix * __ptr64 * __ptr64>
PUBLIC	??$_Uninit_copy@PEAVMatrix@geom@@PEAV12@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@00AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<geom::Matrix * __ptr64,geom::Matrix * __ptr64>
PUBLIC	??$_Ptr_cat@PEAVMatrix@geom@@PEAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PEAPEAVMatrix@geom@@0@Z ; std::_Ptr_cat<geom::Matrix * __ptr64,geom::Matrix * __ptr64>
PUBLIC	??$destroy@PEAVMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAPEAVMatrix@geom@@@Z ; std::allocator_traits<std::allocator<geom::Matrix> >::destroy<geom::Matrix * __ptr64>
PUBLIC	??$?0VMatrix@geom@@@?$allocator@PEAVMatrix@geom@@@std@@QEAA@AEBV?$allocator@VMatrix@geom@@@1@@Z ; std::allocator<geom::Matrix * __ptr64>::allocator<geom::Matrix * __ptr64><geom::Matrix>
PUBLIC	??$destroy@VMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAVMatrix@geom@@@Z ; std::allocator_traits<std::allocator<geom::Matrix> >::destroy<geom::Matrix>
PUBLIC	??$construct@VMatrix@geom@@AEBV12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAVMatrix@geom@@AEBV34@@Z ; std::allocator_traits<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix const & __ptr64>
PUBLIC	??$forward@AEBVMatrix@geom@@@std@@YAAEBVMatrix@geom@@AEBV12@@Z ; std::forward<geom::Matrix const & __ptr64>
PUBLIC	??$construct@VMatrix@geom@@V12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAVMatrix@geom@@$$QEAV34@@Z ; std::allocator_traits<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix>
PUBLIC	??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z ; std::rotate<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z ; std::reverse<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$_Uninitialized_move@PEAVVertexUVRGBA@gfxu@@PEAV12@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@00AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z ; std::_Uninitialized_move<gfxu::VertexUVRGBA * __ptr64,gfxu::VertexUVRGBA * __ptr64,std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPEAVVertexUVRGBA@gfxu@@0AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >
PUBLIC	??$_Ptr_cat@VVertexUVRGBA@gfxu@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PEAVVertexUVRGBA@gfxu@@0@Z ; std::_Ptr_cat<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@AEBV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@AEBV34@@Z ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA const & __ptr64>
PUBLIC	??$forward@AEBVVertexUVRGBA@gfxu@@@std@@YAAEBVVertexUVRGBA@gfxu@@AEBV12@@Z ; std::forward<gfxu::VertexUVRGBA const & __ptr64>
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@AEAV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@AEAV34@@Z ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA & __ptr64>
PUBLIC	??$forward@AEAVVertexUVRGBA@gfxu@@@std@@YAAEAVVertexUVRGBA@gfxu@@AEAV12@@Z ; std::forward<gfxu::VertexUVRGBA & __ptr64>
PUBLIC	??$put@VTaskVBOVAOSet@Tasks@@@MiniHeap@MemUtil@@QEAAPEAVTaskVBOVAOSet@Tasks@@V23@@Z ; MemUtil::MiniHeap::put<Tasks::TaskVBOVAOSet>
PUBLIC	?_Compat@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAXAEBV12@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Compat
PUBLIC	??9?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator!=
PUBLIC	??8?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator==
PUBLIC	??G?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
PUBLIC	??E?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++
PUBLIC	??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
PUBLIC	?put@?$List@PEAVTask@Tasks@@$0BAA@@@QEAAXPEAVTask@Tasks@@@Z ; List<Tasks::Task * __ptr64,256>::put
PUBLIC	?pop_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::pop_front
PUBLIC	?push_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_front
PUBLIC	??0Task@Tasks@@QEAA@AEBV01@@Z			; Tasks::Task::Task
PUBLIC	??0TaskVBOVAOSet@Tasks@@QEAA@AEBV01@@Z		; Tasks::TaskVBOVAOSet::TaskVBOVAOSet
PUBLIC	??$_Allocate@PEAVMatrix@geom@@@std@@YAPEAPEAVMatrix@geom@@_KPEAPEAV12@@Z ; std::_Allocate<geom::Matrix * __ptr64>
PUBLIC	??$_Allocate@VMatrix@geom@@@std@@YAPEAVMatrix@geom@@_KPEAV12@@Z ; std::_Allocate<geom::Matrix>
PUBLIC	??$_Allocate@VVertexUVRGBA@gfxu@@@std@@YAPEAVVertexUVRGBA@gfxu@@_KPEAV12@@Z ; std::_Allocate<gfxu::VertexUVRGBA>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@0AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> > >
PUBLIC	??$_Uninitialized_default_fill_n@PEAPEAVMatrix@geom@@_KU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z ; std::_Uninitialized_default_fill_n<geom::Matrix * __ptr64 * __ptr64,unsigned __int64,std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> > >
PUBLIC	??$_Uninitialized_copy@PEAPEAVMatrix@geom@@PEAPEAV12@U?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@00AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z ; std::_Uninitialized_copy<geom::Matrix * __ptr64 * __ptr64,geom::Matrix * __ptr64 * __ptr64,std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> > >
PUBLIC	??$destroy@PEAVMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAPEAVMatrix@geom@@@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::destroy<geom::Matrix * __ptr64>
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@QEAA@AEBU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> >::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> ><std::_Wrap_alloc<std::allocator<geom::Matrix> > >
PUBLIC	??$destroy@VMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::destroy<geom::Matrix>
PUBLIC	??$construct@VMatrix@geom@@AEBV12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@AEBV23@@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix const & __ptr64>
PUBLIC	??$construct@VMatrix@geom@@V12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@$$QEAV23@@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix>
PUBLIC	??$forward@VMatrix@geom@@@std@@YA$$QEAVMatrix@geom@@AEAV12@@Z ; std::forward<geom::Matrix>
PUBLIC	??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
PUBLIC	??$_Umove@PEAVVertexUVRGBA@gfxu@@@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAPEAVVertexUVRGBA@gfxu@@PEAV23@00@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Umove<gfxu::VertexUVRGBA * __ptr64>
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPEAVVertexUVRGBA@gfxu@@0AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >
PUBLIC	??$move@AEAVMatrix@geom@@@std@@YA$$QEAVMatrix@geom@@AEAV12@@Z ; std::move<geom::Matrix & __ptr64>
PUBLIC	??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QEAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@AEBV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEBV23@@Z ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA const & __ptr64>
PUBLIC	??$construct@VVertexUVRGBA@gfxu@@AEAV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEAV23@@Z ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA & __ptr64>
PUBLIC	??$addressof@$$CBVVertexUVRGBA@gfxu@@@std@@YAPEBVVertexUVRGBA@gfxu@@AEBV12@@Z ; std::addressof<gfxu::VertexUVRGBA const >
PUBLIC	??$put@VTaskVBOVAOSet@Tasks@@@?$VirtualList@VTask@Tasks@@$0BAA@$0BAAC@@@QEAAPEAVTask@Tasks@@VTaskVBOVAOSet@2@@Z ; VirtualList<Tasks::Task,256,4098>::put<Tasks::TaskVBOVAOSet>
PUBLIC	?max_size@?$allocator@VMatrix@geom@@@std@@QEBA_KXZ ; std::allocator<geom::Matrix>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SA_KAEBV?$allocator@VMatrix@geom@@@2@@Z ; std::allocator_traits<std::allocator<geom::Matrix> >::max_size
PUBLIC	?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAXPEBV?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@2@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Setcont
PUBLIC	??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=
PUBLIC	?allocate@?$allocator@PEAVMatrix@geom@@@std@@QEAAPEAPEAVMatrix@geom@@_K@Z ; std::allocator<geom::Matrix * __ptr64>::allocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA_KXZ ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::max_size
PUBLIC	??0?$allocator@VMatrix@geom@@@std@@QEAA@AEBV01@@Z ; std::allocator<geom::Matrix>::allocator<geom::Matrix>
PUBLIC	?select_on_container_copy_construction@?$allocator@VMatrix@geom@@@std@@QEBA?AV12@XZ ; std::allocator<geom::Matrix>::select_on_container_copy_construction
PUBLIC	?max_size@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEBA_KXZ ; std::allocator<gfxu::VertexUVRGBA>::max_size
PUBLIC	??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEBVMatrix@geom@@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
PUBLIC	??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-=
PUBLIC	??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??0?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QEAA@XZ ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::_Deque_val<std::_Deque_simple_types<geom::Matrix> >
PUBLIC	?deallocate@?$allocator@PEAVMatrix@geom@@@std@@QEAAXPEAPEAVMatrix@geom@@_K@Z ; std::allocator<geom::Matrix * __ptr64>::deallocate
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@QEAAPEAPEAVMatrix@geom@@_K@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> >::allocate
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SA?AV?$allocator@VMatrix@geom@@@2@AEBV32@@Z ; std::allocator_traits<std::allocator<geom::Matrix> >::select_on_container_copy_construction
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV?$allocator@VMatrix@geom@@@1@@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::_Wrap_alloc<std::allocator<geom::Matrix> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::_Wrap_alloc<std::allocator<geom::Matrix> >
PUBLIC	?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Alloc_proxy
PUBLIC	?allocate@?$allocator@VMatrix@geom@@@std@@QEAAPEAVMatrix@geom@@_K@Z ; std::allocator<geom::Matrix>::allocate
PUBLIC	?deallocate@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@_K@Z ; std::allocator<geom::Matrix>::deallocate
PUBLIC	?_Xlen@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEBAXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Xlen
PUBLIC	?max_size@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA_KXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SA_KAEBV?$allocator@VVertexUVRGBA@gfxu@@@2@@Z ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::max_size
PUBLIC	?allocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAPEAVVertexUVRGBA@gfxu@@_K@Z ; std::allocator<gfxu::VertexUVRGBA>::allocate
PUBLIC	?deallocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@_K@Z ; std::allocator<gfxu::VertexUVRGBA>::deallocate
PUBLIC	??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
PUBLIC	??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEAVMatrix@geom@@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
PUBLIC	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QEBA_K_K@Z ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::_Getblock
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@QEAAXPEAPEAVMatrix@geom@@_K@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> >::deallocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@_K@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::deallocate
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAPEAVMatrix@geom@@_K@Z ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::allocate
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA?AU12@XZ ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::select_on_container_copy_construction
PUBLIC	?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEBA?AU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@2@XZ ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Getal
PUBLIC	?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Free_proxy
PUBLIC	??0?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV?$allocator@VMatrix@geom@@@1@@Z ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >
PUBLIC	??0?$allocator@VMatrix@geom@@@std@@QEAA@XZ	; std::allocator<geom::Matrix>::allocator<geom::Matrix>
PUBLIC	?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Growmap
PUBLIC	?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
PUBLIC	?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
PUBLIC	?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
PUBLIC	?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
PUBLIC	??0?$_Vector_val@U?$_Simple_types@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<gfxu::VertexUVRGBA> >::_Vector_val<std::_Simple_types<gfxu::VertexUVRGBA> >
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::max_size
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@_K@Z ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::deallocate
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAPEAVVertexUVRGBA@gfxu@@_K@Z ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::allocate
PUBLIC	??0?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >
PUBLIC	?_Grow_to@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBA_K_K@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Grow_to
PUBLIC	?_Unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Unused_capacity
PUBLIC	??1?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QEAA@XZ ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::~_Deque_val<std::_Deque_simple_types<geom::Matrix> >
PUBLIC	??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
PUBLIC	??1?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::~_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >
PUBLIC	?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy
PUBLIC	?pop_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::pop_back
PUBLIC	?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
PUBLIC	?back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAAEAVMatrix@geom@@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::back
PUBLIC	?empty@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA_NXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::empty
PUBLIC	?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAX$$QEAVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
PUBLIC	??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >
PUBLIC	??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >
PUBLIC	?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX$$QEAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QEBA?AU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >::_Getal
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QEAA@AEBV?$allocator@VVertexUVRGBA@gfxu@@@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >
PUBLIC	??0?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAA@XZ ; std::allocator<gfxu::VertexUVRGBA>::allocator<gfxu::VertexUVRGBA>
PUBLIC	?_Orphan_range@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBAXPEAVVertexUVRGBA@gfxu@@0@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Orphan_range
PUBLIC	?_Xlen@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBAXXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Xlen
PUBLIC	?_Tidy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAXXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Tidy
PUBLIC	?_Reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reserve
PUBLIC	?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
PUBLIC	?_Inside@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBA_NPEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Inside
PUBLIC	?_Destroy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAXPEAVVertexUVRGBA@gfxu@@0@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Destroy
PUBLIC	?empty@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_NXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::empty
PUBLIC	?max_size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::max_size
PUBLIC	?_Has_unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Has_unused_capacity
PUBLIC	?capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::capacity
PUBLIC	?get@?$Uniform@M@gfxu@@QEAAMXZ			; gfxu::Uniform<float>::get
PUBLIC	??0?$Uniform@M@gfxu@@QEAA@XZ			; gfxu::Uniform<float>::Uniform<float>
PUBLIC	?get@?$Uniform@VVector@geom@@@gfxu@@QEAA?AVVector@geom@@XZ ; gfxu::Uniform<geom::Vector>::get
PUBLIC	??0?$Uniform@VVector@geom@@@gfxu@@QEAA@XZ	; gfxu::Uniform<geom::Vector>::Uniform<geom::Vector>
PUBLIC	??1?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::~deque<geom::Matrix,std::allocator<geom::Matrix> >
PUBLIC	?pop@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::pop
PUBLIC	?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::push
PUBLIC	?top@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAVMatrix@geom@@XZ ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::top
PUBLIC	?empty@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEBA_NXZ ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::empty
PUBLIC	?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAX$$QEAVMatrix@geom@@@Z ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::push
PUBLIC	??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >
PUBLIC	??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back
PUBLIC	??A?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAAEAVVertexUVRGBA@gfxu@@_K@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::operator[]
PUBLIC	?size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::size
PUBLIC	?shrink_to_fit@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXXZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::shrink_to_fit
PUBLIC	?reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAX_K@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::reserve
PUBLIC	??1?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::~vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >
PUBLIC	??0?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >
PUBLIC	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
PUBLIC	?upload@Texture2D@gfxu@@QEAA_NXZ		; gfxu::Texture2D::upload
PUBLIC	?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; gfxu::Texture2D::init
PUBLIC	??1MatrixStack@gfxu@@QEAA@XZ			; gfxu::MatrixStack::~MatrixStack
PUBLIC	?setForceUpload@Uniforms@gfxu@@SAXXZ		; gfxu::Uniforms::setForceUpload
PUBLIC	?uploadChanges@Uniforms@gfxu@@SAXXZ		; gfxu::Uniforms::uploadChanges
PUBLIC	?clear@MatrixStack@gfxu@@QEAAXXZ		; gfxu::MatrixStack::clear
PUBLIC	?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ ; gfxu::MatrixStack::unstack
PUBLIC	??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::~stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >
PUBLIC	??0MatrixStack@gfxu@@QEAA@XZ			; gfxu::MatrixStack::MatrixStack
PUBLIC	?create@ShaderProgram@gfxu@@AEAA_NXZ		; gfxu::ShaderProgram::create
PUBLIC	?compile@FragmentShader@gfxu@@UEAA_NXZ		; gfxu::FragmentShader::compile
PUBLIC	?compile@GeometryShader@gfxu@@UEAA_NXZ		; gfxu::GeometryShader::compile
PUBLIC	?compile@VertexShader@gfxu@@UEAA_NXZ		; gfxu::VertexShader::compile
PUBLIC	??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; gfxu::Shader::Shader
PUBLIC	?_compile@Shader@gfxu@@IEAA_NI@Z		; gfxu::Shader::_compile
PUBLIC	?isUploaded@VertexStream@gfxu@@QEAA_NXZ		; gfxu::VertexStream::isUploaded
PUBLIC	?upload@VertexStream@gfxu@@QEAA_NXZ		; gfxu::VertexStream::upload
PUBLIC	?unlock@VertexStream@gfxu@@QEAAXXZ		; gfxu::VertexStream::unlock
PUBLIC	?lock@VertexStream@gfxu@@QEAAXXZ		; gfxu::VertexStream::lock
PUBLIC	?setUV@VertexStream@gfxu@@QEAAXMM@Z		; gfxu::VertexStream::setUV
PUBLIC	?put@VertexStream@gfxu@@QEAAXMMM@Z		; gfxu::VertexStream::put
PUBLIC	??1VertexStream@gfxu@@UEAA@XZ			; gfxu::VertexStream::~VertexStream
PUBLIC	??_GVertexStream@gfxu@@UEAAPEAXI@Z		; gfxu::VertexStream::`scalar deleting destructor'
PUBLIC	??0VertexUVRGBA@gfxu@@QEAA@AEBV01@@Z		; gfxu::VertexUVRGBA::VertexUVRGBA
PUBLIC	??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z	; std::_Iterator_base12::operator=
PUBLIC	??0_Iterator_base12@std@@QEAA@AEBU01@@Z		; std::_Iterator_base12::_Iterator_base12
PUBLIC	?bind@Texture2D@gfxu@@QEAAXXZ			; gfxu::Texture2D::bind
PUBLIC	??1Texture2D@gfxu@@QEAA@XZ			; gfxu::Texture2D::~Texture2D
PUBLIC	??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z ; gfxu::Texture2D::Texture2D
PUBLIC	??1Shader@gfxu@@QEAA@XZ				; gfxu::Shader::~Shader
PUBLIC	?bind@ShaderProgram@gfxu@@QEAAXXZ		; gfxu::ShaderProgram::bind
PUBLIC	??1ShaderProgram@gfxu@@QEAA@XZ			; gfxu::ShaderProgram::~ShaderProgram
PUBLIC	??0ShaderProgram@gfxu@@QEAA@PEAVVertexShader@1@PEAVGeometryShader@1@PEAVFragmentShader@1@@Z ; gfxu::ShaderProgram::ShaderProgram
PUBLIC	??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; gfxu::FragmentShader::FragmentShader
PUBLIC	??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; gfxu::VertexShader::VertexShader
PUBLIC	?getTopmost@MatrixStack@gfxu@@QEAA?BVMatrix@geom@@XZ ; gfxu::MatrixStack::getTopmost
PUBLIC	?pop@MatrixStack@gfxu@@QEAAXXZ			; gfxu::MatrixStack::pop
PUBLIC	?mult@MatrixStack@gfxu@@QEAAXVMatrix@geom@@@Z	; gfxu::MatrixStack::mult
PUBLIC	?push@MatrixStack@gfxu@@QEAAXVMatrix@geom@@@Z	; gfxu::MatrixStack::push
PUBLIC	??0Vertex@gfxu@@QEAA@MMM@Z			; gfxu::Vertex::Vertex
PUBLIC	?draw@VertexStream@gfxu@@QEAAXI@Z		; gfxu::VertexStream::draw
PUBLIC	?put@VertexStream@gfxu@@QEAAXAEBVVertex@2@@Z	; gfxu::VertexStream::put
PUBLIC	??0VertexStream@gfxu@@QEAA@XZ			; gfxu::VertexStream::VertexStream
PUBLIC	?getError@gfxu@@YA_NPEBD@Z			; gfxu::getError
PUBLIC	?reset@Uniforms@gfxu@@SAXXZ			; gfxu::Uniforms::reset
PUBLIC	?setFogColor@Uniforms@gfxu@@SAXMMMM@Z		; gfxu::Uniforms::setFogColor
PUBLIC	?setColor@Uniforms@gfxu@@SAXMMMM@Z		; gfxu::Uniforms::setColor
PUBLIC	??0VertexUV@gfxu@@QEAA@MMMMM@Z			; gfxu::VertexUV::VertexUV
PUBLIC	??0VertexUVRGBA@gfxu@@QEAA@MMMMMMMMM@Z		; gfxu::VertexUVRGBA::VertexUVRGBA
PUBLIC	?put@VertexStream@gfxu@@QEAAXAEBVVertexUV@2@@Z	; gfxu::VertexStream::put
PUBLIC	?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ; gfxu::VertexStream::put
PUBLIC	?compress@VertexStream@gfxu@@QEAAXXZ		; gfxu::VertexStream::compress
PUBLIC	?setTranslation@VertexStream@gfxu@@QEAAXMMM@Z	; gfxu::VertexStream::setTranslation
PUBLIC	?setColor@VertexStream@gfxu@@QEAAXEEEE@Z	; gfxu::VertexStream::setColor
PUBLIC	??0VertexStream@gfxu@@QEAA@H@Z			; gfxu::VertexStream::VertexStream
PUBLIC	?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A ; gfxu::Uniforms::color
PUBLIC	?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A ; gfxu::Uniforms::fogColor
PUBLIC	?fogDist@Uniforms@gfxu@@2V?$Uniform@M@2@A	; gfxu::Uniforms::fogDist
PUBLIC	?MMS@Uniforms@gfxu@@2VMatrixStack@2@A		; gfxu::Uniforms::MMS
PUBLIC	?PMS@Uniforms@gfxu@@2VMatrixStack@2@A		; gfxu::Uniforms::PMS
PUBLIC	?camPos@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A ; gfxu::Uniforms::camPos
EXTRN	??_EVertexStream@gfxu@@UEAAPEAXI@Z:PROC		; gfxu::VertexStream::`vector deleting destructor'
	ALIGN	4

_Tuple_alloc DB	01H DUP (?)
	ALIGN	4

ignore	DB	01H DUP (?)
	ALIGN	4

allocator_arg DB 01H DUP (?)
	ALIGN	4

piecewise_construct DB 01H DUP (?)
	ALIGN	4

?MMS@Uniforms@gfxu@@2VMatrixStack@2@A DB 070H DUP (?)	; gfxu::Uniforms::MMS
?PMS@Uniforms@gfxu@@2VMatrixStack@2@A DB 070H DUP (?)	; gfxu::Uniforms::PMS
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$swap@VMatrix@geom@@@std@@YAXAEAVMatrix@geom@@0@Z DD imagerel $LN27
	DD	imagerel $LN27+289
	DD	imagerel $unwind$??$swap@VMatrix@geom@@@std@@YAXAEAVMatrix@geom@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z DD imagerel $LN108
	DD	imagerel $LN108+102
	DD	imagerel $unwind$??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z DD imagerel $LN108+102
	DD	imagerel $LN108+446
	DD	imagerel $chain$2$??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z DD imagerel $LN108+446
	DD	imagerel $LN108+471
	DD	imagerel $chain$3$??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD imagerel $LN63
	DD	imagerel $LN63+163
	DD	imagerel $unwind$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00Urandom_access_iterator_tag@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+54
	DD	imagerel $unwind$??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00Urandom_access_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reverse@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0Ubidirectional_iterator_tag@0@@Z DD imagerel $LN41
	DD	imagerel $LN41+168
	DD	imagerel $unwind$??$_Reverse@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0Ubidirectional_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninit_def_fill_n@PEAVMatrix@geom@@_KPEAV12@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z DD imagerel $LN12
	DD	imagerel $LN12+9
	DD	imagerel $unwind$??$_Uninit_def_fill_n@PEAVMatrix@geom@@_KPEAV12@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$??$_Uninit_def_fill_n@PEAVMatrix@geom@@_KPEAV12@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z DD imagerel $LN12+9
	DD	imagerel $LN12+28
	DD	imagerel $chain$0$??$_Uninit_def_fill_n@PEAVMatrix@geom@@_KPEAV12@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??$_Uninit_def_fill_n@PEAVMatrix@geom@@_KPEAV12@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z DD imagerel $LN12+28
	DD	imagerel $LN12+33
	DD	imagerel $chain$1$??$_Uninit_def_fill_n@PEAVMatrix@geom@@_KPEAV12@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninit_copy@PEAVMatrix@geom@@PEAV12@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@00AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$??$_Uninit_copy@PEAVMatrix@geom@@PEAV12@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@00AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z DD imagerel $LN142
	DD	imagerel $LN142+474
	DD	imagerel $unwind$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD imagerel $LN118
	DD	imagerel $LN118+13
	DD	imagerel $unwind$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD imagerel $LN118+13
	DD	imagerel $LN118+164
	DD	imagerel $chain$0$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD imagerel $LN118+164
	DD	imagerel $LN118+208
	DD	imagerel $chain$1$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD imagerel $LN118+208
	DD	imagerel $LN118+286
	DD	imagerel $chain$2$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD imagerel $LN118+286
	DD	imagerel $LN118+294
	DD	imagerel $chain$3$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAVVertexUVRGBA@gfxu@@PEAV12@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@00AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+14
	DD	imagerel $unwind$??$_Uninitialized_move@PEAVVertexUVRGBA@gfxu@@PEAV12@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@00AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z DD imagerel $LN53
	DD	imagerel $LN53+171
	DD	imagerel $unwind$??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z DD imagerel $LN45
	DD	imagerel $LN45+260
	DD	imagerel $unwind$?push_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@PEAVMatrix@geom@@@std@@YAPEAPEAVMatrix@geom@@_KPEAPEAV12@@Z DD imagerel $LN14
	DD	imagerel $LN14+48
	DD	imagerel $unwind$??$_Allocate@PEAVMatrix@geom@@@std@@YAPEAPEAVMatrix@geom@@_KPEAPEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@VMatrix@geom@@@std@@YAPEAVMatrix@geom@@_KPEAV12@@Z DD imagerel $LN14
	DD	imagerel $LN14+44
	DD	imagerel $unwind$??$_Allocate@VMatrix@geom@@@std@@YAPEAVMatrix@geom@@_KPEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@VVertexUVRGBA@gfxu@@@std@@YAPEAVVertexUVRGBA@gfxu@@_KPEAV12@@Z DD imagerel $LN14
	DD	imagerel $LN14+48
	DD	imagerel $unwind$??$_Allocate@VVertexUVRGBA@gfxu@@@std@@YAPEAVVertexUVRGBA@gfxu@@_KPEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_default_fill_n@PEAPEAVMatrix@geom@@_KU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z DD imagerel $LN18
	DD	imagerel $LN18+9
	DD	imagerel $unwind$??$_Uninitialized_default_fill_n@PEAPEAVMatrix@geom@@_KU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$??$_Uninitialized_default_fill_n@PEAPEAVMatrix@geom@@_KU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z DD imagerel $LN18+9
	DD	imagerel $LN18+28
	DD	imagerel $chain$0$??$_Uninitialized_default_fill_n@PEAPEAVMatrix@geom@@_KU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$??$_Uninitialized_default_fill_n@PEAPEAVMatrix@geom@@_KU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z DD imagerel $LN18+28
	DD	imagerel $LN18+33
	DD	imagerel $chain$1$??$_Uninitialized_default_fill_n@PEAPEAVMatrix@geom@@_KU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_copy@PEAPEAVMatrix@geom@@PEAPEAV12@U?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@00AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+47
	DD	imagerel $unwind$??$_Uninitialized_copy@PEAPEAVMatrix@geom@@PEAPEAV12@U?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@00AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z DD imagerel $LN92
	DD	imagerel $LN92+594
	DD	imagerel $unwind$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA DD imagerel ?catch$0@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA
	DD	imagerel ?catch$0@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA+75
	DD	imagerel $unwind$?catch$0@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA DD imagerel ?catch$1@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA
	DD	imagerel ?catch$1@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA+74
	DD	imagerel $unwind$?catch$1@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Umove@PEAVVertexUVRGBA@gfxu@@@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAPEAVVertexUVRGBA@gfxu@@PEAV23@00@Z DD imagerel $LN10
	DD	imagerel $LN10+26
	DD	imagerel $unwind$??$_Umove@PEAVVertexUVRGBA@gfxu@@@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAPEAVVertexUVRGBA@gfxu@@PEAV23@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAXPEBV?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@2@@Z DD imagerel $LN11
	DD	imagerel $LN11+50
	DD	imagerel $unwind$?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAXPEBV?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@PEAVMatrix@geom@@@std@@QEAAPEAPEAVMatrix@geom@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+55
	DD	imagerel $unwind$?allocate@?$allocator@PEAVMatrix@geom@@@std@@QEAAPEAPEAVMatrix@geom@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z DD imagerel $LN16
	DD	imagerel $LN16+95
	DD	imagerel $unwind$??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z DD imagerel $LN18
	DD	imagerel $LN18+95
	DD	imagerel $unwind$??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@QEAAPEAPEAVMatrix@geom@@_K@Z DD imagerel $LN16
	DD	imagerel $LN16+55
	DD	imagerel $unwind$?allocate@?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@QEAAPEAPEAVMatrix@geom@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ DD imagerel $LN37
	DD	imagerel $LN37+54
	DD	imagerel $unwind$?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@VMatrix@geom@@@std@@QEAAPEAVMatrix@geom@@_K@Z DD imagerel $LN14
	DD	imagerel $LN14+30
	DD	imagerel $unwind$?allocate@?$allocator@VMatrix@geom@@@std@@QEAAPEAVMatrix@geom@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEBAXXZ DD imagerel $LN4
	DD	imagerel $LN4+17
	DD	imagerel $unwind$?_Xlen@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAPEAVVertexUVRGBA@gfxu@@_K@Z DD imagerel $LN13
	DD	imagerel $LN13+55
	DD	imagerel $unwind$?allocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAPEAVVertexUVRGBA@gfxu@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z DD imagerel $LN25
	DD	imagerel $LN25+94
	DD	imagerel $unwind$??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z DD imagerel $LN55
	DD	imagerel $LN55+161
	DD	imagerel $unwind$??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAPEAVMatrix@geom@@_K@Z DD imagerel $LN17
	DD	imagerel $LN17+30
	DD	imagerel $unwind$?allocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAPEAVMatrix@geom@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ DD imagerel $LN10
	DD	imagerel $LN10+30
	DD	imagerel $unwind$?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV?$allocator@VMatrix@geom@@@1@@Z DD imagerel $LN44
	DD	imagerel $LN44+83
	DD	imagerel $unwind$??0?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV?$allocator@VMatrix@geom@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD imagerel $LN134
	DD	imagerel $LN134+77
	DD	imagerel $unwind$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD imagerel $LN134+77
	DD	imagerel $LN134+150
	DD	imagerel $chain$1$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD imagerel $LN134+150
	DD	imagerel $LN134+229
	DD	imagerel $chain$3$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD imagerel $LN134+229
	DD	imagerel $LN134+279
	DD	imagerel $chain$4$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD imagerel $LN134+279
	DD	imagerel $LN134+379
	DD	imagerel $chain$5$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD imagerel $LN134+379
	DD	imagerel $LN134+409
	DD	imagerel $chain$6$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD imagerel $LN134+409
	DD	imagerel $LN134+415
	DD	imagerel $chain$8$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD imagerel $LN134+415
	DD	imagerel $LN134+428
	DD	imagerel $chain$9$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAPEAVVertexUVRGBA@gfxu@@_K@Z DD imagerel $LN16
	DD	imagerel $LN16+55
	DD	imagerel $unwind$?allocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAPEAVVertexUVRGBA@gfxu@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z DD imagerel $LN23
	DD	imagerel $LN23+94
	DD	imagerel $unwind$??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ DD imagerel $LN12
	DD	imagerel $LN12+30
	DD	imagerel $unwind$??1?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAXXZ DD imagerel $LN44
	DD	imagerel $LN44+128
	DD	imagerel $unwind$?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z DD imagerel $LN43
	DD	imagerel $LN43+243
	DD	imagerel $unwind$?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAAEAVMatrix@geom@@XZ DD imagerel $LN14
	DD	imagerel $LN14+65
	DD	imagerel $unwind$?back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAAEAVMatrix@geom@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAX$$QEAVMatrix@geom@@@Z DD imagerel $LN47
	DD	imagerel $LN47+243
	DD	imagerel $unwind$?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAX$$QEAVMatrix@geom@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z DD imagerel $LN81
	DD	imagerel $LN81+288
	DD	imagerel $unwind$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA DD imagerel ?catch$0@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?catch$0@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA+35
	DD	imagerel $unwind$?catch$0@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ DD imagerel $LN50
	DD	imagerel $LN50+83
	DD	imagerel $unwind$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX$$QEAV12@@Z DD imagerel $LN62
	DD	imagerel $LN62+110
	DD	imagerel $unwind$?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX$$QEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBAXXZ DD imagerel $LN4
	DD	imagerel $LN4+17
	DD	imagerel $unwind$?_Xlen@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAXXZ DD imagerel $LN13
	DD	imagerel $LN13+41
	DD	imagerel $unwind$?_Tidy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z DD imagerel $LN44
	DD	imagerel $LN44+207
	DD	imagerel $unwind$?_Reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z DD imagerel $LN51
	DD	imagerel $LN51+78
	DD	imagerel $unwind$?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z DD imagerel $LN51+78
	DD	imagerel $LN51+186
	DD	imagerel $chain$0$?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z DD imagerel $LN51+186
	DD	imagerel $LN51+192
	DD	imagerel $chain$1$?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ DD imagerel $LN14
	DD	imagerel $LN14+35
	DD	imagerel $unwind$??1?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?top@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAVMatrix@geom@@XZ DD imagerel $LN16
	DD	imagerel $LN16+65
	DD	imagerel $unwind$?top@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAVMatrix@geom@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+23
	DD	imagerel $unwind$??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ DD imagerel $LN54
	DD	imagerel $LN54+83
	DD	imagerel $unwind$??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z DD imagerel $LN104
	DD	imagerel $LN104+123
	DD	imagerel $unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z DD imagerel $LN60
	DD	imagerel $LN60+293
	DD	imagerel $unwind$?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?shrink_to_fit@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXXZ DD imagerel $LN24
	DD	imagerel $LN24+108
	DD	imagerel $unwind$?shrink_to_fit@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ DD imagerel $LN15
	DD	imagerel $LN15+41
	DD	imagerel $unwind$??1?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?upload@Texture2D@gfxu@@QEAA_NXZ DD imagerel $LN6
	DD	imagerel $LN6+207
	DD	imagerel $unwind$?upload@Texture2D@gfxu@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD imagerel $LN83
	DD	imagerel $LN83+167
	DD	imagerel $unwind$?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__F?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ DD imagerel ??__F?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
	DD	imagerel ??__F?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ+63
	DD	imagerel $unwind$??__F?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ DD imagerel ??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
	DD	imagerel ??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ+155
	DD	imagerel $unwind$??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1MatrixStack@gfxu@@QEAA@XZ DD imagerel $LN18
	DD	imagerel $LN18+35
	DD	imagerel $unwind$??1MatrixStack@gfxu@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__F?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ DD imagerel ??__F?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
	DD	imagerel ??__F?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ+63
	DD	imagerel $unwind$??__F?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ DD imagerel ??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
	DD	imagerel ??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ+155
	DD	imagerel $unwind$??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?uploadChanges@Uniforms@gfxu@@SAXXZ DD imagerel $LN28
	DD	imagerel $LN28+625
	DD	imagerel $unwind$?uploadChanges@Uniforms@gfxu@@SAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@MatrixStack@gfxu@@QEAAXXZ DD imagerel $LN75
	DD	imagerel $LN75+265
	DD	imagerel $unwind$?clear@MatrixStack@gfxu@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ DD imagerel $LN84
	DD	imagerel $LN84+420
	DD	imagerel $unwind$?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ DD imagerel $LN16
	DD	imagerel $LN16+35
	DD	imagerel $unwind$??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0MatrixStack@gfxu@@QEAA@XZ DD imagerel $LN64
	DD	imagerel $LN64+138
	DD	imagerel $unwind$??0MatrixStack@gfxu@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?create@ShaderProgram@gfxu@@AEAA_NXZ DD imagerel $LN22
	DD	imagerel $LN22+279
	DD	imagerel $unwind$?create@ShaderProgram@gfxu@@AEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?create@ShaderProgram@gfxu@@AEAA_NXZ DD imagerel $LN22+279
	DD	imagerel $LN22+356
	DD	imagerel $chain$0$?create@ShaderProgram@gfxu@@AEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?create@ShaderProgram@gfxu@@AEAA_NXZ DD imagerel $LN22+356
	DD	imagerel $LN22+557
	DD	imagerel $chain$1$?create@ShaderProgram@gfxu@@AEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD imagerel $LN83
	DD	imagerel $LN83+160
	DD	imagerel $unwind$??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_compile@Shader@gfxu@@IEAA_NI@Z DD imagerel $LN220
	DD	imagerel $LN220+684
	DD	imagerel $unwind$?_compile@Shader@gfxu@@IEAA_NI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?upload@VertexStream@gfxu@@QEAA_NXZ DD imagerel $LN50
	DD	imagerel $LN50+466
	DD	imagerel $unwind$?upload@VertexStream@gfxu@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unlock@VertexStream@gfxu@@QEAAXXZ DD imagerel $LN11
	DD	imagerel $LN11+33
	DD	imagerel $unwind$?unlock@VertexStream@gfxu@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?lock@VertexStream@gfxu@@QEAAXXZ DD imagerel $LN11
	DD	imagerel $LN11+33
	DD	imagerel $unwind$?lock@VertexStream@gfxu@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?put@VertexStream@gfxu@@QEAAXMMM@Z DD imagerel $LN4
	DD	imagerel $LN4+57
	DD	imagerel $unwind$?put@VertexStream@gfxu@@QEAAXMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1VertexStream@gfxu@@UEAA@XZ DD imagerel $LN49
	DD	imagerel $LN49+191
	DD	imagerel $unwind$??1VertexStream@gfxu@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GVertexStream@gfxu@@UEAAPEAXI@Z DD imagerel $LN6
	DD	imagerel $LN6+47
	DD	imagerel $unwind$??_GVertexStream@gfxu@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z DD imagerel $LN19
	DD	imagerel $LN19+79
	DD	imagerel $unwind$??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Iterator_base12@std@@QEAA@AEBU01@@Z DD imagerel $LN22
	DD	imagerel $LN22+81
	DD	imagerel $unwind$??0_Iterator_base12@std@@QEAA@AEBU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Texture2D@gfxu@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+55
	DD	imagerel $unwind$??1Texture2D@gfxu@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z DD imagerel $LN83
	DD	imagerel $LN83+189
	DD	imagerel $unwind$??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Shader@gfxu@@QEAA@XZ DD imagerel $LN39
	DD	imagerel $LN39+88
	DD	imagerel $unwind$??1Shader@gfxu@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?bind@ShaderProgram@gfxu@@QEAAXXZ DD imagerel $LN10
	DD	imagerel $LN10+78
	DD	imagerel $unwind$?bind@ShaderProgram@gfxu@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ShaderProgram@gfxu@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+32
	DD	imagerel $unwind$??1ShaderProgram@gfxu@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ShaderProgram@gfxu@@QEAA@PEAVVertexShader@1@PEAVGeometryShader@1@PEAVFragmentShader@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+42
	DD	imagerel $unwind$??0ShaderProgram@gfxu@@QEAA@PEAVVertexShader@1@PEAVGeometryShader@1@PEAVFragmentShader@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD imagerel $LN84
	DD	imagerel $LN84+171
	DD	imagerel $unwind$??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD imagerel $LN84
	DD	imagerel $LN84+171
	DD	imagerel $unwind$??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pop@MatrixStack@gfxu@@QEAAXXZ DD imagerel $LN25
	DD	imagerel $LN25+185
	DD	imagerel $unwind$?pop@MatrixStack@gfxu@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?mult@MatrixStack@gfxu@@QEAAXVMatrix@geom@@@Z DD imagerel $LN50
	DD	imagerel $LN50+416
	DD	imagerel $unwind$?mult@MatrixStack@gfxu@@QEAAXVMatrix@geom@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push@MatrixStack@gfxu@@QEAAXVMatrix@geom@@@Z DD imagerel $LN15
	DD	imagerel $LN15+170
	DD	imagerel $unwind$?push@MatrixStack@gfxu@@QEAAXVMatrix@geom@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?draw@VertexStream@gfxu@@QEAAXI@Z DD imagerel $LN9
	DD	imagerel $LN9+137
	DD	imagerel $unwind$?draw@VertexStream@gfxu@@QEAAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?put@VertexStream@gfxu@@QEAAXAEBVVertex@2@@Z DD imagerel $LN6
	DD	imagerel $LN6+74
	DD	imagerel $unwind$?put@VertexStream@gfxu@@QEAAXAEBVVertex@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0VertexStream@gfxu@@QEAA@XZ DD imagerel $LN26
	DD	imagerel $LN26+96
	DD	imagerel $unwind$??0VertexStream@gfxu@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getError@gfxu@@YA_NPEBD@Z DD imagerel $LN9
	DD	imagerel $LN9+36
	DD	imagerel $unwind$?getError@gfxu@@YA_NPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reset@Uniforms@gfxu@@SAXXZ DD imagerel $LN4
	DD	imagerel $LN4+32
	DD	imagerel $unwind$?reset@Uniforms@gfxu@@SAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setFogColor@Uniforms@gfxu@@SAXMMMM@Z DD imagerel $LN8
	DD	imagerel $LN8+62
	DD	imagerel $unwind$?setFogColor@Uniforms@gfxu@@SAXMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setColor@Uniforms@gfxu@@SAXMMMM@Z DD imagerel $LN8
	DD	imagerel $LN8+62
	DD	imagerel $unwind$?setColor@Uniforms@gfxu@@SAXMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?put@VertexStream@gfxu@@QEAAXAEBVVertexUV@2@@Z DD imagerel $LN8
	DD	imagerel $LN8+90
	DD	imagerel $unwind$?put@VertexStream@gfxu@@QEAAXAEBVVertexUV@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z DD imagerel $LN10
	DD	imagerel $LN10+125
	DD	imagerel $unwind$?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?compress@VertexStream@gfxu@@QEAAXXZ DD imagerel $LN26
	DD	imagerel $LN26+109
	DD	imagerel $unwind$?compress@VertexStream@gfxu@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0VertexStream@gfxu@@QEAA@H@Z DD imagerel $LN47
	DD	imagerel $LN47+178
	DD	imagerel $unwind$??0VertexStream@gfxu@@QEAA@H@Z
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0VertexStream@gfxu@@QEAA@H@Z DD imagerel ??0VertexStream@gfxu@@QEAA@H@Z
	DD	0ffffffffH
	DD	imagerel ??0VertexStream@gfxu@@QEAA@H@Z+51
	DD	00H
	DD	imagerel ??0VertexStream@gfxu@@QEAA@H@Z+105
	DD	01H
	DD	imagerel ??0VertexStream@gfxu@@QEAA@H@Z+164
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0VertexStream@gfxu@@QEAA@H@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0VertexStream@gfxu@@QEAA@H@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0VertexStream@gfxu@@QEAA@H@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0VertexStream@gfxu@@QEAA@H@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0VertexStream@gfxu@@QEAA@H@Z
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0VertexStream@gfxu@@QEAA@H@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0VertexStream@gfxu@@QEAA@H@Z DD 041811H
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0VertexStream@gfxu@@QEAA@H@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?compress@VertexStream@gfxu@@QEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?put@VertexStream@gfxu@@QEAAXAEBVVertexUV@2@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setColor@Uniforms@gfxu@@SAXMMMM@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setFogColor@Uniforms@gfxu@@SAXMMMM@Z DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reset@Uniforms@gfxu@@SAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getError@gfxu@@YA_NPEBD@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0VertexStream@gfxu@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?put@VertexStream@gfxu@@QEAAXAEBVVertex@2@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?draw@VertexStream@gfxu@@QEAAXI@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push@MatrixStack@gfxu@@QEAAXVMatrix@geom@@@Z DD 021519H
	DD	03002d206H
	DD	imagerel __GSHandlerCheck
	DD	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?mult@MatrixStack@gfxu@@QEAAXVMatrix@geom@@@Z DD 072119H
	DD	020340fH
	DD	01a010fH
	DD	060077008H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pop@MatrixStack@gfxu@@QEAAXXZ DD 011319H
	DD	0e204H
	DD	imagerel __GSHandlerCheck
	DD	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD imagerel ??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	0ffffffffH
	DD	imagerel ??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+49
	DD	00H
	DD	imagerel ??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+107
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	040H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 062719H
	DD	0116418H
	DD	0103414H
	DD	07004b208H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	052H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD imagerel ??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	0ffffffffH
	DD	imagerel ??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+49
	DD	00H
	DD	imagerel ??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+107
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	040H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 062719H
	DD	0116418H
	DD	0103414H
	DD	07004b208H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	052H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ShaderProgram@gfxu@@QEAA@PEAVVertexShader@1@PEAVGeometryShader@1@PEAVFragmentShader@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ShaderProgram@gfxu@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?bind@ShaderProgram@gfxu@@QEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1Shader@gfxu@@QEAA@XZ DD imagerel ??1Shader@gfxu@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??1Shader@gfxu@@QEAA@XZ+32
	DD	00H
	DD	imagerel ??1Shader@gfxu@@QEAA@XZ+48
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1Shader@gfxu@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1Shader@gfxu@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1Shader@gfxu@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1Shader@gfxu@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??1Shader@gfxu@@QEAA@XZ
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Shader@gfxu@@QEAA@XZ DD 021311H
	DD	03006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1Shader@gfxu@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z DD imagerel ??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z
	DD	0ffffffffH
	DD	imagerel ??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z+49
	DD	00H
	DD	imagerel ??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z+125
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z
	DD	040H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z DD 062719H
	DD	0116418H
	DD	0103414H
	DD	07004b208H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z
	DD	052H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Texture2D@gfxu@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Iterator_base12@std@@QEAA@AEBU01@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GVertexStream@gfxu@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1VertexStream@gfxu@@UEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?put@VertexStream@gfxu@@QEAAXMMM@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?lock@VertexStream@gfxu@@QEAAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unlock@VertexStream@gfxu@@QEAAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?upload@VertexStream@gfxu@@QEAA_NXZ DD 040a01H
	DD	08340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_compile@Shader@gfxu@@IEAA_NI@Z DD imagerel ?_compile@Shader@gfxu@@IEAA_NI@Z
	DD	0ffffffffH
	DD	imagerel ?_compile@Shader@gfxu@@IEAA_NI@Z+85
	DD	00H
	DD	imagerel ?_compile@Shader@gfxu@@IEAA_NI@Z+266
	DD	01H
	DD	imagerel ?_compile@Shader@gfxu@@IEAA_NI@Z+565
	DD	00H
	DD	imagerel ?_compile@Shader@gfxu@@IEAA_NI@Z+616
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_compile@Shader@gfxu@@IEAA_NI@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??_compile@Shader@gfxu@@IEAA_NI@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??_compile@Shader@gfxu@@IEAA_NI@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_compile@Shader@gfxu@@IEAA_NI@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?_compile@Shader@gfxu@@IEAA_NI@Z
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$?_compile@Shader@gfxu@@IEAA_NI@Z
	DD	068H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_compile@Shader@gfxu@@IEAA_NI@Z DD 073419H
	DD	03b7423H
	DD	03a341fH
	DD	0360112H
	DD	05004H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?_compile@Shader@gfxu@@IEAA_NI@Z
	DD	01a2H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD imagerel ??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	0ffffffffH
	DD	imagerel ??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+51
	DD	00H
	DD	imagerel ??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+98
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 062819H
	DD	0d6419H
	DD	0c3414H
	DD	070027206H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	032H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?create@ShaderProgram@gfxu@@AEAA_NXZ DD 021H
	DD	imagerel $LN22
	DD	imagerel $LN22+279
	DD	imagerel $unwind$?create@ShaderProgram@gfxu@@AEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?create@ShaderProgram@gfxu@@AEAA_NXZ DD 020521H
	DD	083405H
	DD	imagerel $LN22
	DD	imagerel $LN22+279
	DD	imagerel $unwind$?create@ShaderProgram@gfxu@@AEAA_NXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?create@ShaderProgram@gfxu@@AEAA_NXZ DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0MatrixStack@gfxu@@QEAA@XZ DD imagerel ??0MatrixStack@gfxu@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0MatrixStack@gfxu@@QEAA@XZ+83
	DD	00H
	DD	imagerel ??0MatrixStack@gfxu@@QEAA@XZ+124
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0MatrixStack@gfxu@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0MatrixStack@gfxu@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0MatrixStack@gfxu@@QEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0MatrixStack@gfxu@@QEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0MatrixStack@gfxu@@QEAA@XZ
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0MatrixStack@gfxu@@QEAA@XZ DD 041811H
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0MatrixStack@gfxu@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ DD imagerel ?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ
	DD	0ffffffffH
	DD	imagerel ?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ+67
	DD	00H
	DD	imagerel ?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ+360
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ
	DD	048H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ DD 072e19H
	DD	01e641cH
	DD	01c3418H
	DD	01a010bH
	DD	07004H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ
	DD	0c2H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@MatrixStack@gfxu@@QEAAXXZ DD 062019H
	DD	0127412H
	DD	0113412H
	DD	0500bd212H
	DD	imagerel __GSHandlerCheck
	DD	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?uploadChanges@Uniforms@gfxu@@SAXXZ DD 031b19H
	DD	0180109H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ DD imagerel ??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
	DD	0ffffffffH
	DD	imagerel ??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ+77
	DD	00H
	DD	imagerel ??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ+139
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ DD 010d11H
	DD	06204H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__F?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1MatrixStack@gfxu@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ DD imagerel ??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
	DD	0ffffffffH
	DD	imagerel ??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ+77
	DD	00H
	DD	imagerel ??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ+139
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ DD 010d11H
	DD	06204H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__F?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD imagerel ?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	0ffffffffH
	DD	imagerel ?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+49
	DD	00H
	DD	imagerel ?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z+106
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	040H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z DD 062719H
	DD	0116418H
	DD	0103414H
	DD	07004b208H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
	DD	052H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?upload@Texture2D@gfxu@@QEAA_NXZ DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?shrink_to_fit@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?top@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAVMatrix@geom@@XZ DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z DD 021H
	DD	imagerel $LN51
	DD	imagerel $LN51+78
	DD	imagerel $unwind$?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z DD 020521H
	DD	08e405H
	DD	imagerel $LN51
	DD	imagerel $LN51+78
	DD	imagerel $unwind$?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z DD 060f01H
	DD	0a640fH
	DD	09340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX$$QEAV12@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA DD 020a19H
	DD	05006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z DD imagerel ??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z
	DD	0ffffffffH
	DD	imagerel ??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z+92
	DD	01H
	DD	imagerel ??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z+131
	DD	02H
	DD	imagerel ??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z+147
	DD	03H
	DD	imagerel ??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z+240
	DD	01H
	DD	imagerel ??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z+270
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA+13
	DD	04H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z DD 01H
	DD	03H
	DD	04H
	DD	01H
	DD	imagerel $handlerMap$0$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel ?dtor$1@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA
	DD	02H
	DD	imagerel ?dtor$2@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA
	DD	00H
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z DD 019930522H
	DD	05H
	DD	imagerel $stateUnwindMap$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z
	DD	01H
	DD	imagerel $tryMap$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z
	DD	08H
	DD	imagerel $ip2state$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z
	DD	050H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z DD 071c19H
	DD	0180113H
	DD	0e00af00cH
	DD	060077008H
	DD	03006H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAX$$QEAVMatrix@geom@@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAAEAVMatrix@geom@@XZ DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAXXZ DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAPEAVVertexUVRGBA@gfxu@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD 021H
	DD	imagerel $LN134
	DD	imagerel $LN134+77
	DD	imagerel $unwind$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD 040021H
	DD	04f400H
	DD	085400H
	DD	imagerel $LN134
	DD	imagerel $LN134+77
	DD	imagerel $unwind$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD 021H
	DD	imagerel $LN134+77
	DD	imagerel $LN134+150
	DD	imagerel $chain$1$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD 021H
	DD	imagerel $LN134+150
	DD	imagerel $LN134+229
	DD	imagerel $chain$3$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD 020521H
	DD	0ac405H
	DD	imagerel $LN134+150
	DD	imagerel $LN134+229
	DD	imagerel $chain$3$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD 041221H
	DD	0be412H
	DD	097405H
	DD	imagerel $LN134+77
	DD	imagerel $LN134+150
	DD	imagerel $chain$1$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD 041021H
	DD	04f410H
	DD	085405H
	DD	imagerel $LN134
	DD	imagerel $LN134+77
	DD	imagerel $unwind$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z DD 030701H
	DD	060034207H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV?$allocator@VMatrix@geom@@@1@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAPEAVMatrix@geom@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z DD 061401H
	DD	076414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAPEAVVertexUVRGBA@gfxu@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEBAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@VMatrix@geom@@@std@@QEAAPEAVMatrix@geom@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@QEAAPEAPEAVMatrix@geom@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@PEAVMatrix@geom@@@std@@QEAAPEAPEAVMatrix@geom@@_K@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAXPEBV?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@2@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Umove@PEAVVertexUVRGBA@gfxu@@@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAPEAVVertexUVRGBA@gfxu@@PEAV23@00@Z DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z DD imagerel ??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
	DD	0ffffffffH
	DD	imagerel ??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z+128
	DD	00H
	DD	imagerel ??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z+163
	DD	0ffffffffH
	DD	imagerel ??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z+287
	DD	02H
	DD	imagerel ??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z+342
	DD	0ffffffffH
	DD	imagerel ??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z+368
	DD	03H
	DD	imagerel ??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z+403
	DD	0ffffffffH
	DD	imagerel ??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z+445
	DD	05H
	DD	imagerel ??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z+477
	DD	06H
	DD	imagerel ??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z+513
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA+13
	DD	01H
	DD	imagerel ?catch$1@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA
	DD	00H
	DD	imagerel ?catch$1@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA+13
	DD	04H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$1$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$1@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	imagerel $handlerMap$1$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	imagerel ?dtor$2@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	imagerel ?dtor$5@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA
	DD	05H
	DD	imagerel ?dtor$6@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z DD 019930522H
	DD	07H
	DD	imagerel $stateUnwindMap$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
	DD	02H
	DD	imagerel $tryMap$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
	DD	0eH
	DD	imagerel $ip2state$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
	DD	068H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z DD 0b2819H
	DD	0236428H
	DD	0213424H
	DD	01a0117H
	DD	0e00ef010H
	DD	0c00ad00cH
	DD	07008H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_copy@PEAPEAVMatrix@geom@@PEAPEAV12@U?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@00AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??$_Uninitialized_default_fill_n@PEAPEAVMatrix@geom@@_KU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z DD 021H
	DD	imagerel $LN18
	DD	imagerel $LN18+9
	DD	imagerel $unwind$??$_Uninitialized_default_fill_n@PEAPEAVMatrix@geom@@_KU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$??$_Uninitialized_default_fill_n@PEAPEAVMatrix@geom@@_KU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z DD 020421H
	DD	07404H
	DD	imagerel $LN18
	DD	imagerel $LN18+9
	DD	imagerel $unwind$??$_Uninitialized_default_fill_n@PEAPEAVMatrix@geom@@_KU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_default_fill_n@PEAPEAVMatrix@geom@@_KU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z DD 010401H
	DD	0204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@VVertexUVRGBA@gfxu@@@std@@YAPEAVVertexUVRGBA@gfxu@@_KPEAV12@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@VMatrix@geom@@@std@@YAPEAVMatrix@geom@@_KPEAV12@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@PEAVMatrix@geom@@@std@@YAPEAPEAVMatrix@geom@@_KPEAPEAV12@@Z DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z DD 081501H
	DD	097415H
	DD	086415H
	DD	073415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAVVertexUVRGBA@gfxu@@PEAV12@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@00AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD 021H
	DD	imagerel $LN118+164
	DD	imagerel $LN118+208
	DD	imagerel $chain$1$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD 020521H
	DD	0d5405H
	DD	imagerel $LN118+164
	DD	imagerel $LN118+208
	DD	imagerel $chain$1$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD 021H
	DD	imagerel $LN118
	DD	imagerel $LN118+13
	DD	imagerel $unwind$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD 020521H
	DD	0ee405H
	DD	imagerel $LN118
	DD	imagerel $LN118+13
	DD	imagerel $unwind$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD 040801H
	DD	070047208H
	DD	030026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z DD imagerel ??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z
	DD	0ffffffffH
	DD	imagerel ??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z+309
	DD	00H
	DD	imagerel ??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z+371
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z DD 0ffffffffH
	DD	imagerel ?dtor$3@?0???$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z
	DD	080H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z DD 092411H
	DD	0233424H
	DD	01a0114H
	DD	0e006f008H
	DD	060037004H
	DD	05002H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninit_copy@PEAVMatrix@geom@@PEAV12@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@00AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$??$_Uninit_def_fill_n@PEAVMatrix@geom@@_KPEAV12@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z DD 021H
	DD	imagerel $LN12
	DD	imagerel $LN12+9
	DD	imagerel $unwind$??$_Uninit_def_fill_n@PEAVMatrix@geom@@_KPEAV12@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$??$_Uninit_def_fill_n@PEAVMatrix@geom@@_KPEAV12@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z DD 020421H
	DD	07404H
	DD	imagerel $LN12
	DD	imagerel $LN12+9
	DD	imagerel $unwind$??$_Uninit_def_fill_n@PEAVMatrix@geom@@_KPEAV12@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninit_def_fill_n@PEAVMatrix@geom@@_KPEAV12@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z DD 010401H
	DD	0204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reverse@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0Ubidirectional_iterator_tag@0@@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00Urandom_access_iterator_tag@0@@Z DD 010401H
	DD	0c204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD imagerel ??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
	DD	0ffffffffH
	DD	imagerel ??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z+101
	DD	00H
	DD	imagerel ??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z+149
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z DD 041411H
	DD	0d3414H
	DD	070047208H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z DD 021H
	DD	imagerel $LN108
	DD	imagerel $LN108+102
	DD	imagerel $unwind$??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z DD 061821H
	DD	0c6818H
	DD	01f6410H
	DD	01e3408H
	DD	imagerel $LN108
	DD	imagerel $LN108+102
	DD	imagerel $unwind$??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z DD 091b01H
	DD	021d41bH
	DD	020741bH
	DD	01a011bH
	DD	0e00df00fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$swap@VMatrix@geom@@@std@@YAXAEAVMatrix@geom@@0@Z DD 011319H
	DD	0a204H
	DD	imagerel __GSHandlerCheck
	DD	040H
	ORG $+2084
?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A DD 000000000r ; 0 ; gfxu::Uniforms::color
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DB	01H
	ORG $+7
?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A DD 000000000r ; 0 ; gfxu::Uniforms::fogColor
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DB	01H
	ORG $+7
?fogDist@Uniforms@gfxu@@2V?$Uniform@M@2@A DB 04H DUP (?)
	DB	01H					; gfxu::Uniforms::fogDist
	ORG $+3
?camPos@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A DD 000000000r ; 0 ; gfxu::Uniforms::camPos
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DB	01H
?MMS$initializer$@Uniforms@gfxu@@2P6AXXZEA DQ FLAT:??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ; gfxu::Uniforms::MMS$initializer$
?PMS$initializer$@Uniforms@gfxu@@2P6AXXZEA DQ FLAT:??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ; gfxu::Uniforms::PMS$initializer$
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0VertexStream@gfxu@@QEAA@H@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
size$dead$ = 72
??0VertexStream@gfxu@@QEAA@H@Z PROC			; gfxu::VertexStream::VertexStream, COMDAT

; 96   : {

$LN47:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00013	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  00018	48 8b d9	 mov	 rbx, rcx
  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7VertexStream@gfxu@@6B@
  00022	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 486  : 		_Myfirst = pointer();

  00025	33 c0		 xor	 eax, eax
  00027	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 487  : 		_Mylast = pointer();

  0002b	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 488  : 		_Myend = pointer();

  0002f	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 19   : {}

  00033	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  00037	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 20   : Vertex::Vertex(const Vertex& v)
; 21   : 	: x(v.x), y(v.y), z(v.z)
; 22   : {}
; 23   : Vertex::Vertex(const VertexUV& v)
; 24   : 	: x(v.x), y(v.y), z(v.z)
; 25   : {}
; 26   : Vertex::Vertex(const VertexRGBA& v)
; 27   : 	: x(v.x), y(v.y), z(v.z)
; 28   : {}
; 29   : Vertex::Vertex(const VertexUVRGBA& v)
; 30   : 	: x(v.x), y(v.y), z(v.z)
; 31   : {}
; 32   : 
; 33   : VertexUV::VertexUV(float x, float y, float z, float u, float v)
; 34   : 	: x(x), y(y), z(z), u(u), v(v)
; 35   : {}
; 36   : VertexUV::VertexUV(const Vertex& v)
; 37   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f)
; 38   : {}
; 39   : VertexUV::VertexUV(const VertexUV& v)
; 40   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v)
; 41   : {}
; 42   : VertexUV::VertexUV(const VertexRGBA& v)
; 43   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f)
; 44   : {}
; 45   : VertexUV::VertexUV(const VertexUVRGBA& v)
; 46   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v)
; 47   : {}
; 48   : 
; 49   : VertexRGBA::VertexRGBA(float x, float y, float z, float r, float g, float b, float a)
; 50   : 	: x(x), y(y), z(z), r(r * 255.0f), g(g * 255.0f), b(b * 255.0f), a(a * 255.0f)
; 51   : {}
; 52   : VertexRGBA::VertexRGBA(float x, float y, float z, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 53   : 	: x(x), y(y), z(z), r(r), g(g), b(b), a(a)
; 54   : {}
; 55   : VertexRGBA::VertexRGBA(const Vertex& v)
; 56   : 	: x(v.x), y(v.y), z(v.z), r(255), g(255), b(255), a(255)
; 57   : {}
; 58   : VertexRGBA::VertexRGBA(const VertexUV& v)
; 59   : 	: x(v.x), y(v.y), z(v.z), r(255), g(255), b(255), a(255)
; 60   : {}
; 61   : VertexRGBA::VertexRGBA(const VertexRGBA& v)
; 62   : 	: x(v.x), y(v.y), z(v.z), r(v.r), g(v.g), b(v.b), a(v.a)
; 63   : {}
; 64   : VertexRGBA::VertexRGBA(const VertexUVRGBA& v)
; 65   : 	: x(v.x), y(v.y), z(v.z), r(v.r), g(v.g), b(v.b), a(v.a)
; 66   : {}
; 67   : 
; 68   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, float r, float g, float b, float a)
; 69   : 	: x(x), y(y), z(z), u(u), v(v), r(r * 255.0f), g(g * 255.0f), b(b * 255.0f), a(a * 255.0f)
; 70   : {}

  0003b	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax
  0003f	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax
  00043	c7 41 40 ff ff
	ff ff		 mov	 DWORD PTR [rcx+64], -1	; ffffffffH

; 96   : {

  0004a	66 89 41 4c	 mov	 WORD PTR [rcx+76], ax
  0004e	88 41 4e	 mov	 BYTE PTR [rcx+78], al
  00051	48 83 c1 50	 add	 rcx, 80			; 00000050H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 63   : 	return (_Check_C_return(_Mtx_init(_Mtx, _Type)));

  00055	8d 50 02	 lea	 edx, QWORD PTR [rax+2]
  00058	e8 00 00 00 00	 call	 _Mtx_init

; 32   : 	if (_Res != _Thrd_success)

  0005d	85 c0		 test	 eax, eax
  0005f	74 08		 je	 SHORT $LN23@VertexStre

; 33   : 		_Throw_C_error(_Res);

  00061	8b c8		 mov	 ecx, eax
  00063	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
  00068	90		 npad	 1
$LN23@VertexStre:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 967  : 		return (this->_Myend - this->_Myfirst);

  00069	48 8b 53 18	 mov	 rdx, QWORD PTR [rbx+24]
  0006d	48 2b 53 08	 sub	 rdx, QWORD PTR [rbx+8]
  00071	48 b8 ab aa aa
	aa aa aa aa 2a	 mov	 rax, 3074457345618258603 ; 2aaaaaaaaaaaaaabH
  0007b	48 f7 ea	 imul	 rdx
  0007e	48 c1 fa 02	 sar	 rdx, 2
  00082	48 8b c2	 mov	 rax, rdx
  00085	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  00089	48 03 d0	 add	 rdx, rax

; 489  : 		}
; 490  : 
; 491  : 	pointer _Myfirst;	// pointer to beginning of array
; 492  : 	pointer _Mylast;	// pointer to current end of sequence
; 493  : 	pointer _Myend;	// pointer to end of array
; 494  : 	};
; 495  : 
; 496  : 		// TEMPLATE CLASS _Vector_alloc
; 497  : template<bool _Al_has_storage,
; 498  : 	class _Alloc_types>
; 499  : 	class _Vector_alloc
; 500  : 		: public _Vector_val<typename _Alloc_types::_Val_types>
; 501  : 	{	// base class for vector to hold allocator with storage
; 502  : public:
; 503  : 	typedef _Vector_alloc<_Al_has_storage, _Alloc_types> _Myt;
; 504  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 505  : 
; 506  : 	typedef typename _Alloc_types::_Alty _Alty;
; 507  : 
; 508  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 509  : 	_Vector_alloc(const _Alloc& _Al = _Alloc())
; 510  : 		: _Alval(_Al)
; 511  : 		{	// construct allocator from _Al
; 512  : 		}
; 513  : 
; 514  : 	void _Change_alloc(const _Alty& _Al)
; 515  : 		{	// replace old allocator
; 516  : 		_Alval = _Al;
; 517  : 		}
; 518  : 
; 519  : 	void _Swap_alloc(_Myt& _Right)
; 520  : 		{	// swap allocators
; 521  : 		_Swap_adl(this->_Alval, _Right._Alval);
; 522  : 		}
; 523  : 
; 524  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 525  : 	_Vector_alloc(const _Alty& _Al = _Alty())
; 526  : 		: _Alval(_Al)
; 527  : 		{	// construct allocator from _Al
; 528  : 		_Alloc_proxy();
; 529  : 		}
; 530  : 
; 531  : 	~_Vector_alloc() _NOEXCEPT
; 532  : 		{	// destroy proxy
; 533  : 		_Free_proxy();
; 534  : 		}
; 535  : 
; 536  : 	void _Change_alloc(const _Alty& _Al)
; 537  : 		{	// replace old allocator
; 538  : 		_Free_proxy();
; 539  : 		_Alval = _Al;
; 540  : 		_Alloc_proxy();
; 541  : 		}
; 542  : 
; 543  : 	void _Swap_alloc(_Myt& _Right)
; 544  : 		{	// swap allocators
; 545  : 		_Swap_adl(_Alval, _Right._Alval);
; 546  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 547  : 		}
; 548  : 
; 549  : 	void _Alloc_proxy()
; 550  : 		{	// construct proxy from _Alval
; 551  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 552  : 			_Alproxy(_Alval);
; 553  : 		this->_Myproxy = _Alproxy.allocate(1);
; 554  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 555  : 		this->_Myproxy->_Mycont = this;
; 556  : 		}
; 557  : 
; 558  : 	void _Free_proxy()
; 559  : 		{	// destroy proxy
; 560  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 561  : 			_Alproxy(_Alval);
; 562  : 		this->_Orphan_all();
; 563  : 		_Alproxy.destroy(this->_Myproxy);
; 564  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 565  : 		this->_Myproxy = 0;
; 566  : 		}
; 567  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 568  : 
; 569  : 	_Alty& _Getal()
; 570  : 		{	// get reference to allocator
; 571  : 		return (_Alval);
; 572  : 		}
; 573  : 
; 574  : 	const _Alty& _Getal() const
; 575  : 		{	// get reference to allocator
; 576  : 		return (_Alval);
; 577  : 		}
; 578  : 
; 579  : 	_Alty _Alval;	// allocator object for values
; 580  : 	};
; 581  : 
; 582  : template<class _Alloc_types>
; 583  : 	class _Vector_alloc<false, _Alloc_types>
; 584  : 		: public _Vector_val<typename _Alloc_types::_Val_types>
; 585  : 	{	// base class for vector to hold allocator with no storage
; 586  : public:
; 587  : 	typedef _Vector_alloc<false, _Alloc_types> _Myt;
; 588  : 	typedef typename _Alloc_types::_Alloc _Alloc;
; 589  : 
; 590  : 	typedef typename _Alloc_types::_Alty _Alty;
; 591  : 
; 592  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 593  : 	_Vector_alloc(const _Alloc& = _Alloc())
; 594  : 		{	// construct allocator from _Al
; 595  : 		}
; 596  : 
; 597  : 	void _Change_alloc(const _Alty&)
; 598  : 		{	// replace old allocator
; 599  : 		}
; 600  : 
; 601  : 	void _Swap_alloc(_Myt&)
; 602  : 		{	// swap allocators
; 603  : 		}
; 604  : 
; 605  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 606  : 	_Vector_alloc(const _Alloc& = _Alloc())
; 607  : 		{	// construct allocator from _Al
; 608  : 		_Alloc_proxy();
; 609  : 		}
; 610  : 
; 611  : 	~_Vector_alloc() _NOEXCEPT
; 612  : 		{	// destroy proxy
; 613  : 		_Free_proxy();
; 614  : 		}
; 615  : 
; 616  : 	void _Change_alloc(const _Alty&)
; 617  : 		{	// replace old allocator
; 618  : 		}
; 619  : 
; 620  : 	void _Swap_alloc(_Myt& _Right)
; 621  : 		{	// swap allocators
; 622  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 623  : 		}
; 624  : 
; 625  : 	void _Alloc_proxy()
; 626  : 		{	// construct proxy from _Alval
; 627  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 628  : 			_Alproxy;
; 629  : 		this->_Myproxy = _Alproxy.allocate(1);
; 630  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 631  : 		this->_Myproxy->_Mycont = this;
; 632  : 		}
; 633  : 
; 634  : 	void _Free_proxy()
; 635  : 		{	// destroy proxy
; 636  : 		typename _Alloc::template rebind<_Container_proxy>::other
; 637  : 			_Alproxy;
; 638  : 		this->_Orphan_all();
; 639  : 		_Alproxy.destroy(this->_Myproxy);
; 640  : 		_Alproxy.deallocate(this->_Myproxy, 1);
; 641  : 		this->_Myproxy = 0;
; 642  : 		}
; 643  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 644  : 
; 645  : 	_Alty _Getal() const
; 646  : 		{	// get reference to allocator
; 647  : 		return (_Alty());
; 648  : 		}
; 649  : 	};
; 650  : 
; 651  : 		// TEMPLATE CLASS vector
; 652  : template<class _Ty,
; 653  : 	class _Alloc = allocator<_Ty> >
; 654  : 	class vector
; 655  : 		: public _Vector_alloc<!is_empty<_Alloc>::value,
; 656  : 			_Vec_base_types<_Ty, _Alloc> >
; 657  : 	{	// varying size array of values
; 658  : public:
; 659  : 	typedef vector<_Ty, _Alloc> _Myt;
; 660  : 	typedef _Vector_alloc<!is_empty<_Alloc>::value,
; 661  : 		_Vec_base_types<_Ty, _Alloc> > _Mybase;
; 662  : 	typedef _Alloc allocator_type;
; 663  : 
; 664  : 	typedef typename _Mybase::_Alty _Alty;
; 665  : 
; 666  : 	typedef typename _Mybase::value_type value_type;
; 667  : 	typedef typename _Mybase::size_type size_type;
; 668  : 	typedef typename _Mybase::difference_type difference_type;
; 669  : 	typedef typename _Mybase::pointer pointer;
; 670  : 	typedef typename _Mybase::const_pointer const_pointer;
; 671  : 	typedef typename _Mybase::reference reference;
; 672  : 	typedef typename _Mybase::const_reference const_reference;
; 673  : 
; 674  :  #define _VICONT(it)	it._Getcont()
; 675  :  #define _VIPTR(it)	(it)._Ptr
; 676  : 
; 677  : 	typedef typename _Mybase::iterator iterator;
; 678  : 	typedef typename _Mybase::const_iterator const_iterator;
; 679  : 
; 680  : 	typedef _STD reverse_iterator<iterator> reverse_iterator;
; 681  : 	typedef _STD reverse_iterator<const_iterator> const_reverse_iterator;
; 682  : 
; 683  : 	vector()
; 684  : 		: _Mybase()
; 685  : 		{	// construct empty vector
; 686  : 		}
; 687  : 
; 688  : 	explicit vector(const _Alloc& _Al)
; 689  : 		: _Mybase(_Al)
; 690  : 		{	// construct empty vector, allocator
; 691  : 		}
; 692  : 
; 693  : 	explicit vector(size_type _Count)
; 694  : 		: _Mybase()
; 695  : 		{	// construct from _Count * value_type()
; 696  : 		resize(_Count);
; 697  : 		}
; 698  : 
; 699  : 	vector(size_type _Count, const value_type& _Val)
; 700  : 		: _Mybase()
; 701  : 		{	// construct from _Count * _Val
; 702  : 		_Construct_n(_Count, _STD addressof(_Val));
; 703  : 		}
; 704  : 
; 705  : 	vector(size_type _Count, const value_type& _Val, const _Alloc& _Al)
; 706  : 		: _Mybase(_Al)
; 707  : 		{	// construct from _Count * _Val, allocator
; 708  : 		_Construct_n(_Count, _STD addressof(_Val));
; 709  : 		}
; 710  : 
; 711  : 	vector(const _Myt& _Right)
; 712  : 
; 713  :  #if _HAS_CPP0X
; 714  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())
; 715  : 
; 716  :  #else /* _HAS_CPP0X */
; 717  : 		: _Mybase(_Right._Getal())
; 718  :  #endif /* _HAS_CPP0X */
; 719  : 
; 720  : 		{	// construct by copying _Right
; 721  : 		if (_Buy(_Right.size()))
; 722  : 			_TRY_BEGIN
; 723  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 724  : 				this->_Myfirst);
; 725  : 			_CATCH_ALL
; 726  : 			_Tidy();
; 727  : 			_RERAISE;
; 728  : 			_CATCH_END
; 729  : 		}
; 730  : 
; 731  : 	vector(const _Myt& _Right, const _Alloc& _Al)
; 732  : 		: _Mybase(_Al)
; 733  : 		{	// construct by copying _Right, allocator
; 734  : 		if (_Buy(_Right.size()))
; 735  : 			_TRY_BEGIN
; 736  : 			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
; 737  : 				this->_Myfirst);
; 738  : 			_CATCH_ALL
; 739  : 			_Tidy();
; 740  : 			_RERAISE;
; 741  : 			_CATCH_END
; 742  : 		}
; 743  : 
; 744  : 	template<class _Iter>
; 745  : 		vector(_Iter _First, _Iter _Last,
; 746  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 747  : 				void>:: type ** = 0)
; 748  : 		: _Mybase()
; 749  : 		{	// construct from [_First, _Last)
; 750  : 		_Construct(_First, _Last);
; 751  : 		}
; 752  : 
; 753  : 	template<class _Iter>
; 754  : 		vector(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 755  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 756  : 				void>:: type ** = 0)
; 757  : 		: _Mybase(_Al)
; 758  : 		{	// construct from [_First, _Last) with allocator
; 759  : 		_Construct(_First, _Last);
; 760  : 		}
; 761  : 
; 762  : 	template<class _Iter>
; 763  : 		void _Construct(_Iter _First, _Iter _Last)
; 764  : 		{	// initialize with [_First, _Last), input iterators
; 765  : 		_TRY_BEGIN
; 766  : 		insert(begin(), _First, _Last);
; 767  : 		_CATCH_ALL
; 768  : 		_Tidy();
; 769  : 		_RERAISE;
; 770  : 		_CATCH_END
; 771  : 		}
; 772  : 
; 773  : 	void _Construct_n(size_type _Count, const value_type *_Pval)
; 774  : 		{	// construct from _Count * *_Pval
; 775  : 		if (_Buy(_Count))
; 776  : 			{	// nonzero, fill it
; 777  : 			_TRY_BEGIN
; 778  : 			this->_Mylast = _Ufill(this->_Myfirst, _Count, _Pval);
; 779  : 			_CATCH_ALL
; 780  : 			_Tidy();
; 781  : 			_RERAISE;
; 782  : 			_CATCH_END
; 783  : 			}
; 784  : 		}
; 785  : 
; 786  : 	vector(_Myt&& _Right)
; 787  : 		: _Mybase(_Right._Getal())
; 788  : 		{	// construct by moving _Right
; 789  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 790  : 		}
; 791  : 
; 792  : 	vector(_Myt&& _Right, const _Alloc& _Al)
; 793  : 		: _Mybase(_Al)
; 794  : 		{	// construct by moving _Right, allocator
; 795  : 		if (this->_Getal() != _Right._Getal())
; 796  : 			assign(_STD make_move_iterator(_Right.begin()),
; 797  : 				_STD make_move_iterator(_Right.end()));
; 798  : 		else
; 799  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 800  : 		}
; 801  : 
; 802  : 	_Myt& operator=(_Myt&& _Right)
; 803  : 		{	// assign by moving _Right
; 804  : 		if (this != &_Right)
; 805  : 			{	// different, assign it
; 806  : 			_Tidy();
; 807  : 
; 808  :  #if _HAS_CPP0X
; 809  : 			if (this->_Getal() != _Right._Getal()
; 810  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 811  : 				this->_Change_alloc(_Right._Getal());
; 812  :  #endif /* _HAS_CPP0X */
; 813  : 
; 814  : 			if (this->_Getal() != _Right._Getal())
; 815  : 				assign(_STD make_move_iterator(_Right.begin()),
; 816  : 					_STD make_move_iterator(_Right.end()));
; 817  : 			else
; 818  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 819  : 			}
; 820  : 		return (*this);
; 821  : 		}
; 822  : 
; 823  : 	void _Assign_rv(_Myt&& _Right)
; 824  : 		{	// assign by moving _Right
; 825  : 		this->_Swap_all((_Myt&)_Right);
; 826  : 		this->_Myfirst = _Right._Myfirst;
; 827  : 		this->_Mylast = _Right._Mylast;
; 828  : 		this->_Myend = _Right._Myend;
; 829  : 
; 830  : 		_Right._Myfirst = pointer();
; 831  : 		_Right._Mylast = pointer();
; 832  : 		_Right._Myend = pointer();
; 833  : 		}
; 834  : 
; 835  : 	void push_back(value_type&& _Val)
; 836  : 		{	// insert by moving into element at end
; 837  : 		if (_Inside(_STD addressof(_Val)))
; 838  : 			{	// push back an element
; 839  : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 840  : 			if (this->_Mylast == this->_Myend)
; 841  : 				_Reserve(1);
; 842  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 843  : 			this->_Getal().construct(this->_Mylast,
; 844  : 				_STD forward<value_type>(this->_Myfirst[_Idx]));
; 845  : 			++this->_Mylast;
; 846  : 			}
; 847  : 		else
; 848  : 			{	// push back a non-element
; 849  : 			if (this->_Mylast == this->_Myend)
; 850  : 				_Reserve(1);
; 851  : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 852  : 			this->_Getal().construct(this->_Mylast,
; 853  : 				_STD forward<value_type>(_Val));
; 854  : 			++this->_Mylast;
; 855  : 			}
; 856  : 		}
; 857  : 
; 858  : 	iterator insert(const_iterator _Where, _Ty&& _Val)
; 859  : 		{	// insert by moving _Val at _Where
; 860  : 		return (emplace(_Where, _STD move(_Val)));
; 861  : 		}
; 862  : 
; 863  : #define _VECTOR_EMPLACE( \
; 864  : 	TEMPLATE_LIST, PADDING_LIST, LIST, COMMA, X1, X2, X3, X4) \
; 865  : 	TEMPLATE_LIST(_CLASS_TYPE) \
; 866  : 		void emplace_back(LIST(_TYPE_REFREF_ARG)) \
; 867  : 		{	/* insert by moving into element at end */ \
; 868  : 		if (this->_Mylast == this->_Myend) \
; 869  : 			_Reserve(1); \
; 870  : 		_Orphan_range(this->_Mylast, this->_Mylast); \
; 871  : 		this->_Getal().construct(this->_Mylast COMMA LIST(_FORWARD_ARG)); \
; 872  : 		++this->_Mylast; \
; 873  : 		} \
; 874  : 	TEMPLATE_LIST(_CLASS_TYPE) \
; 875  : 		iterator emplace(const_iterator _Where \
; 876  : 			COMMA LIST(_TYPE_REFREF_ARG)) \
; 877  : 		{	/* insert by moving _Val at _Where */ \
; 878  : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst; \
; 879  : 		_VECTOR_EMPLACE_CHECK \
; 880  : 		emplace_back(LIST(_FORWARD_ARG)); \
; 881  : 		_STD rotate(begin() + _Off, end() - 1, end()); \
; 882  : 		return (begin() + _Off); \
; 883  : 		}
; 884  : 
; 885  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 886  : #define _VECTOR_EMPLACE_CHECK \
; 887  : 		if (size() < _Off) \
; 888  : 			_DEBUG_ERROR("vector emplace iterator outside range");
; 889  : 
; 890  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 891  : #define _VECTOR_EMPLACE_CHECK
; 892  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 893  : 
; 894  : _VARIADIC_EXPAND_0X(_VECTOR_EMPLACE, , , , )
; 895  : #undef _VECTOR_EMPLACE_CHECK
; 896  : #undef _VECTOR_EMPLACE
; 897  : 
; 898  : 	~vector() _NOEXCEPT
; 899  : 		{	// destroy the object
; 900  : 		_Tidy();
; 901  : 		}
; 902  : 
; 903  : 	_Myt& operator=(const _Myt& _Right)
; 904  : 		{	// assign _Right
; 905  : 		if (this != &_Right)
; 906  : 			{	// different, assign it
; 907  :  #if _HAS_CPP0X
; 908  : 			if (this->_Getal() != _Right._Getal()
; 909  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 910  : 				{	// change allocator before copying
; 911  : 				_Tidy();
; 912  : 				this->_Change_alloc(_Right._Getal());
; 913  : 				}
; 914  :  #endif /* _HAS_CPP0X */
; 915  : 
; 916  : 			this->_Orphan_all();
; 917  : 
; 918  : 			if (_Right.empty())
; 919  : 				clear();	// new sequence empty, erase existing sequence
; 920  : 			else if (_Right.size() <= size())
; 921  : 				{	// enough elements, copy new and destroy old
; 922  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 923  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 924  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 925  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 926  : 				}
; 927  : 			else if (_Right.size() <= capacity())
; 928  : 				{	// enough room, copy and construct new
; 929  : 				pointer _Ptr = _Right._Myfirst + size();
; 930  : 				_Copy_impl(_Right._Myfirst,
; 931  : 					_Ptr, this->_Myfirst);
; 932  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 933  : 				}
; 934  : 			else
; 935  : 				{	// not enough room, allocate new array and construct new
; 936  : 				if (this->_Myfirst != pointer())
; 937  : 					{	// discard old array
; 938  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 939  : 					this->_Getal().deallocate(this->_Myfirst,
; 940  : 						this->_Myend - this->_Myfirst);
; 941  : 					}
; 942  : 				if (_Buy(_Right.size()))
; 943  : 					_TRY_BEGIN
; 944  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 945  : 						this->_Myfirst);
; 946  : 					_CATCH_ALL
; 947  : 					_Tidy();
; 948  : 					_RERAISE;
; 949  : 					_CATCH_END
; 950  : 				}
; 951  : 			}
; 952  : 		return (*this);
; 953  : 		}
; 954  : 
; 955  : 	void reserve(size_type _Count)
; 956  : 		{	// determine new minimum length of allocated storage
; 957  : 		if (capacity() < _Count)

  0008c	48 81 fa 00 20
	00 00		 cmp	 rdx, 8192		; 00002000H
  00093	73 0f		 jae	 SHORT $LN46@VertexStre

; 958  : 			{	// something to do, check and reallocate
; 959  : 			if (max_size() < _Count)
; 960  : 				_Xlen();
; 961  : 			_Reallocate(_Count);

  00095	ba 00 20 00 00	 mov	 edx, 8192		; 00002000H
  0009a	48 8d 4b 08	 lea	 rcx, QWORD PTR [rbx+8]
  0009e	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
  000a3	90		 npad	 1
$LN46@VertexStre:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 98   : }

  000a4	48 8b c3	 mov	 rax, rbx
  000a7	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000ac	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b0	5f		 pop	 rdi
  000b1	c3		 ret	 0
??0VertexStream@gfxu@@QEAA@H@Z ENDP			; gfxu::VertexStream::VertexStream
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
size$dead$ = 72
?dtor$0@?0???0VertexStream@gfxu@@QEAA@H@Z@4HA PROC	; `gfxu::VertexStream::VertexStream'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	48 83 c1 08	 add	 rcx, 8
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::~vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >
?dtor$0@?0???0VertexStream@gfxu@@QEAA@H@Z@4HA ENDP	; `gfxu::VertexStream::VertexStream'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
size$dead$ = 72
?dtor$1@?0???0VertexStream@gfxu@@QEAA@H@Z@4HA PROC	; `gfxu::VertexStream::VertexStream'::`1'::dtor$1
  00010	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00017	48 83 c1 50	 add	 rcx, 80			; 00000050H
  0001b	e9 00 00 00 00	 jmp	 ??1mutex@std@@QEAA@XZ
?dtor$1@?0???0VertexStream@gfxu@@QEAA@H@Z@4HA ENDP	; `gfxu::VertexStream::VertexStream'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?setColor@VertexStream@gfxu@@QEAAXEEEE@Z
_TEXT	SEGMENT
this$ = 8
r$ = 16
g$ = 24
b$ = 32
a$ = 40
?setColor@VertexStream@gfxu@@QEAAXEEEE@Z PROC		; gfxu::VertexStream::setColor, COMDAT

; 156  : 	vertex.r = r;
; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;

  00000	0f b6 44 24 28	 movzx	 eax, BYTE PTR a$[rsp]
  00005	88 51 40	 mov	 BYTE PTR [rcx+64], dl
  00008	44 88 41 41	 mov	 BYTE PTR [rcx+65], r8b
  0000c	88 41 43	 mov	 BYTE PTR [rcx+67], al
  0000f	44 88 49 42	 mov	 BYTE PTR [rcx+66], r9b

; 160  : }

  00013	c3		 ret	 0
?setColor@VertexStream@gfxu@@QEAAXEEEE@Z ENDP		; gfxu::VertexStream::setColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?setTranslation@VertexStream@gfxu@@QEAAXMMM@Z
_TEXT	SEGMENT
this$ = 8
x$ = 16
y$ = 24
z$ = 32
?setTranslation@VertexStream@gfxu@@QEAAXMMM@Z PROC	; gfxu::VertexStream::setTranslation, COMDAT

; 169  : 	translation = Vertex(x, y, z);

  00000	f3 0f 11 49 20	 movss	 DWORD PTR [rcx+32], xmm1
  00005	f3 0f 11 51 24	 movss	 DWORD PTR [rcx+36], xmm2
  0000a	f3 0f 11 59 28	 movss	 DWORD PTR [rcx+40], xmm3

; 170  : }

  0000f	c3		 ret	 0
?setTranslation@VertexStream@gfxu@@QEAAXMMM@Z ENDP	; gfxu::VertexStream::setTranslation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?compress@VertexStream@gfxu@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?compress@VertexStream@gfxu@@QEAAXXZ PROC		; gfxu::VertexStream::compress, COMDAT

; 256  : {

$LN26:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 257  : 	vertices.shrink_to_fit();

  00006	48 8d 59 08	 lea	 rbx, QWORD PTR [rcx+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 977  : 		return (this->_Myend != this->_Mylast);

  0000a	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0000e	48 39 4b 10	 cmp	 QWORD PTR [rbx+16], rcx

; 978  : 		}
; 979  : 
; 980  : 	iterator begin() _NOEXCEPT
; 981  : 		{	// return iterator for beginning of mutable sequence
; 982  : 		return (iterator(this->_Myfirst, this));
; 983  : 		}
; 984  : 
; 985  : 	const_iterator begin() const _NOEXCEPT
; 986  : 		{	// return iterator for beginning of nonmutable sequence
; 987  : 		return (const_iterator(this->_Myfirst, this));
; 988  : 		}
; 989  : 
; 990  : 	iterator end() _NOEXCEPT
; 991  : 		{	// return iterator for end of mutable sequence
; 992  : 		return (iterator(this->_Mylast, this));
; 993  : 		}
; 994  : 
; 995  : 	const_iterator end() const _NOEXCEPT
; 996  : 		{	// return iterator for end of nonmutable sequence
; 997  : 		return (const_iterator(this->_Mylast, this));
; 998  : 		}
; 999  : 
; 1000 : 	iterator _Make_iter(const_iterator _Where) const
; 1001 : 		{	// make iterator from const_iterator
; 1002 : 		return (iterator(_Where._Ptr, this));
; 1003 : 		}
; 1004 : 
; 1005 : 	reverse_iterator rbegin() _NOEXCEPT
; 1006 : 		{	// return iterator for beginning of reversed mutable sequence
; 1007 : 		return (reverse_iterator(end()));
; 1008 : 		}
; 1009 : 
; 1010 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1011 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1012 : 		return (const_reverse_iterator(end()));
; 1013 : 		}
; 1014 : 
; 1015 : 	reverse_iterator rend() _NOEXCEPT
; 1016 : 		{	// return iterator for end of reversed mutable sequence
; 1017 : 		return (reverse_iterator(begin()));
; 1018 : 		}
; 1019 : 
; 1020 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1021 : 		{	// return iterator for end of reversed nonmutable sequence
; 1022 : 		return (const_reverse_iterator(begin()));
; 1023 : 		}
; 1024 : 
; 1025 :  #if _HAS_CPP0X
; 1026 : 	const_iterator cbegin() const _NOEXCEPT
; 1027 : 		{	// return iterator for beginning of nonmutable sequence
; 1028 : 		return (((const _Myt *)this)->begin());
; 1029 : 		}
; 1030 : 
; 1031 : 	const_iterator cend() const _NOEXCEPT
; 1032 : 		{	// return iterator for end of nonmutable sequence
; 1033 : 		return (((const _Myt *)this)->end());
; 1034 : 		}
; 1035 : 
; 1036 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1037 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1038 : 		return (((const _Myt *)this)->rbegin());
; 1039 : 		}
; 1040 : 
; 1041 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1042 : 		{	// return iterator for end of reversed nonmutable sequence
; 1043 : 		return (((const _Myt *)this)->rend());
; 1044 : 		}
; 1045 : 
; 1046 : 	void shrink_to_fit()
; 1047 : 		{	// reduce capacity
; 1048 : 		if (_Has_unused_capacity())

  00012	74 53		 je	 SHORT $LN3@compress

; 1088 : 		}
; 1089 : 
; 1090 : 	size_type max_size() const _NOEXCEPT
; 1091 : 		{	// return maximum possible length of sequence
; 1092 : 		return (this->_Getal().max_size());
; 1093 : 		}
; 1094 : 
; 1095 : 	bool empty() const _NOEXCEPT
; 1096 : 		{	// test if sequence is empty
; 1097 : 		return (this->_Myfirst == this->_Mylast);

  00014	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00017	48 3b c1	 cmp	 rax, rcx

; 1049 : 			{	// worth shrinking, do it
; 1050 : 			if (empty())

  0001a	75 20		 jne	 SHORT $LN4@compress

; 1098 : 		}
; 1099 : 
; 1100 : 	_Alloc get_allocator() const _NOEXCEPT
; 1101 : 		{	// return allocator object for values
; 1102 : 		return (this->_Getal());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_reference at(size_type _Pos) const
; 1106 : 		{	// subscript nonmutable sequence with checking
; 1107 : 		if (size() <= _Pos)
; 1108 : 			_Xran();
; 1109 : 		return (*(this->_Myfirst + _Pos));
; 1110 : 		}
; 1111 : 
; 1112 : 	reference at(size_type _Pos)
; 1113 : 		{	// subscript mutable sequence with checking
; 1114 : 		if (size() <= _Pos)
; 1115 : 			_Xran();
; 1116 : 		return (*(this->_Myfirst + _Pos));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_reference operator[](size_type _Pos) const
; 1120 : 		{	// subscript nonmutable sequence
; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));
; 1133 : 		}
; 1134 : 
; 1135 : 	reference operator[](size_type _Pos)
; 1136 : 		{	// subscript mutable sequence
; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));
; 1149 : 		}
; 1150 : 
; 1151 :  #if _HAS_CPP0X
; 1152 : 	pointer data() _NOEXCEPT
; 1153 : 		{	// return address of first element
; 1154 : 		return (this->_Myfirst);
; 1155 : 		}
; 1156 : 
; 1157 : 	const_pointer data() const _NOEXCEPT
; 1158 : 		{	// return address of first element
; 1159 : 		return (this->_Myfirst);
; 1160 : 		}
; 1161 :  #endif /* _HAS_CPP0X */
; 1162 : 
; 1163 : 	reference front()
; 1164 : 		{	// return first element of mutable sequence
; 1165 : 		return (*begin());
; 1166 : 		}
; 1167 : 
; 1168 : 	const_reference front() const
; 1169 : 		{	// return first element of nonmutable sequence
; 1170 : 		return (*begin());
; 1171 : 		}
; 1172 : 
; 1173 : 	reference back()
; 1174 : 		{	// return last element of mutable sequence
; 1175 : 		return (*(end() - 1));
; 1176 : 		}
; 1177 : 
; 1178 : 	const_reference back() const
; 1179 : 		{	// return last element of nonmutable sequence
; 1180 : 		return (*(end() - 1));
; 1181 : 		}
; 1182 : 
; 1183 : 	void push_back(const value_type& _Val)
; 1184 : 		{	// insert element at end
; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1188 : 			if (this->_Mylast == this->_Myend)
; 1189 : 				_Reserve(1);
; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);
; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)
; 1198 : 				_Reserve(1);
; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);
; 1202 : 			++this->_Mylast;
; 1203 : 			}
; 1204 : 		}
; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1489 : 		if (_Capacity < _Count)
; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);
; 1492 : 		}
; 1493 : 
; 1494 : 	bool _Inside(const value_type *_Ptr) const
; 1495 : 		{	// test if _Ptr points inside vector
; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1497 : 		}
; 1498 : 
; 1499 : 	void _Reallocate(size_type _Count)
; 1500 : 		{	// move to array of exactly _Count elements
; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1502 : 
; 1503 : 		_TRY_BEGIN
; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1507 : 		_RERAISE;
; 1508 : 		_CATCH_END
; 1509 : 
; 1510 : 		size_type _Size = size();
; 1511 : 		if (this->_Myfirst != pointer())
; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);
; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();
; 1519 : 		this->_Myend = _Ptr + _Count;
; 1520 : 		this->_Mylast = _Ptr + _Size;
; 1521 : 		this->_Myfirst = _Ptr;
; 1522 : 		}
; 1523 : 
; 1524 : 	void _Reserve(size_type _Count)
; 1525 : 		{	// ensure room for _Count new elements, grow exponentially
; 1526 : 		if (_Unused_capacity() < _Count)
; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)
; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));
; 1531 : 			}
; 1532 : 		}
; 1533 : 
; 1534 : 	void _Tidy()
; 1535 : 		{	// free all storage
; 1536 : 		if (this->_Myfirst != pointer())

  0001c	48 85 c0	 test	 rax, rax
  0001f	74 46		 je	 SHORT $LN3@compress
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00021	48 8b c8	 mov	 rcx, rax
  00024	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1542 : 			this->_Myfirst = pointer();

  00029	33 c0		 xor	 eax, eax
  0002b	48 89 03	 mov	 QWORD PTR [rbx], rax

; 1543 : 			this->_Mylast = pointer();

  0002e	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 1544 : 			this->_Myend = pointer();

  00032	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 258  : }

  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5b		 pop	 rbx
  0003b	c3		 ret	 0
$LN4@compress:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  0003c	48 2b c8	 sub	 rcx, rax
  0003f	48 b8 ab aa aa
	aa aa aa aa 2a	 mov	 rax, 3074457345618258603 ; 2aaaaaaaaaaaaaabH
  00049	48 f7 e9	 imul	 rcx

; 1053 : 				_Reallocate(size());

  0004c	48 8b cb	 mov	 rcx, rbx

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  0004f	48 c1 fa 02	 sar	 rdx, 2
  00053	48 8b c2	 mov	 rax, rdx
  00056	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  0005a	48 03 d0	 add	 rdx, rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 258  : }

  0005d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00061	5b		 pop	 rbx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1053 : 				_Reallocate(size());

  00062	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
$LN3@compress:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 258  : }

  00067	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006b	5b		 pop	 rbx
  0006c	c3		 ret	 0
?compress@VertexStream@gfxu@@QEAAXXZ ENDP		; gfxu::VertexStream::compress
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z
_TEXT	SEGMENT
this$ = 48
v$ = 56
?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z PROC	; gfxu::VertexStream::put, COMDAT

; 136  : {

$LN10:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00004	8b 42 0c	 mov	 eax, DWORD PTR [rdx+12]

; 137  : 	setUV(v.u, v.v);

  00007	f3 0f 10 42 10	 movss	 xmm0, DWORD PTR [rdx+16]
  0000c	4c 8b da	 mov	 r11, rdx

; 164  : 	vertex.v = v;

  0000f	f3 0f 11 41 3c	 movss	 DWORD PTR [rcx+60], xmm0

; 108  : 	vertex.x = x + translation.x;

  00014	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [rcx+32]

; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00019	89 41 38	 mov	 DWORD PTR [rcx+56], eax

; 138  : 	setColor(v.r, v.g, v.b, v.a);

  0001c	44 0f b6 52 17	 movzx	 r10d, BYTE PTR [rdx+23]
  00021	44 0f b6 4a 16	 movzx	 r9d, BYTE PTR [rdx+22]
  00026	44 0f b6 42 15	 movzx	 r8d, BYTE PTR [rdx+21]

; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;

  0002b	0f b6 42 14	 movzx	 eax, BYTE PTR [rdx+20]

; 157  : 	vertex.g = g;

  0002f	44 88 41 41	 mov	 BYTE PTR [rcx+65], r8b

; 158  : 	vertex.b = b;

  00033	44 88 49 42	 mov	 BYTE PTR [rcx+66], r9b
  00037	88 41 40	 mov	 BYTE PTR [rcx+64], al

; 159  : 	vertex.a = a;

  0003a	44 88 51 43	 mov	 BYTE PTR [rcx+67], r10b

; 139  : 	put(v.x, v.y, v.z);

  0003e	f3 0f 10 52 08	 movss	 xmm2, DWORD PTR [rdx+8]
  00043	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [rdx+4]

; 108  : 	vertex.x = x + translation.x;

  00048	f3 41 0f 58 03	 addss	 xmm0, DWORD PTR [r11]
  0004d	48 8d 51 2c	 lea	 rdx, QWORD PTR [rcx+44]

; 109  : 	vertex.y = y + translation.y;
; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00051	48 83 c1 08	 add	 rcx, 8
  00055	f3 0f 58 49 1c	 addss	 xmm1, DWORD PTR [rcx+28]
  0005a	f3 0f 58 51 20	 addss	 xmm2, DWORD PTR [rcx+32]
  0005f	f3 0f 11 02	 movss	 DWORD PTR [rdx], xmm0
  00063	f3 0f 11 49 28	 movss	 DWORD PTR [rcx+40], xmm1
  00068	f3 0f 11 51 2c	 movss	 DWORD PTR [rcx+44], xmm2
  0006d	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  00072	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 140  : }

  00078	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007c	c3		 ret	 0
?put@VertexStream@gfxu@@QEAAXAEBVVertexUVRGBA@2@@Z ENDP	; gfxu::VertexStream::put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?put@VertexStream@gfxu@@QEAAXAEBVVertexUV@2@@Z
_TEXT	SEGMENT
this$ = 48
v$ = 56
?put@VertexStream@gfxu@@QEAAXAEBVVertexUV@2@@Z PROC	; gfxu::VertexStream::put, COMDAT

; 126  : {

$LN8:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 130  : void VertexStream::put(const VertexRGBA& v)
; 131  : {
; 132  : 	setColor(v.r, v.g, v.b, v.a);
; 133  : 	put(v.x, v.y, v.z);
; 134  : }
; 135  : void VertexStream::put(const VertexUVRGBA& v)
; 136  : {
; 137  : 	setUV(v.u, v.v);
; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;
; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  00004	8b 42 0c	 mov	 eax, DWORD PTR [rdx+12]

; 127  : 	setUV(v.u, v.v);

  00007	f3 0f 10 42 10	 movss	 xmm0, DWORD PTR [rdx+16]

; 130  : void VertexStream::put(const VertexRGBA& v)
; 131  : {
; 132  : 	setColor(v.r, v.g, v.b, v.a);
; 133  : 	put(v.x, v.y, v.z);
; 134  : }
; 135  : void VertexStream::put(const VertexUVRGBA& v)
; 136  : {
; 137  : 	setUV(v.u, v.v);
; 138  : 	setColor(v.r, v.g, v.b, v.a);
; 139  : 	put(v.x, v.y, v.z);
; 140  : }
; 141  : template <typename T>
; 142  : void VertexStream::put(const T* vp, int length)
; 143  : {
; 144  : 	for(int i = 0; i < length; i++)
; 145  : 	{
; 146  : 		put(vp[i]);
; 147  : 	}
; 148  : }
; 149  : void VertexStream::release()
; 150  : {
; 151  : 	released = true;
; 152  : 	vertices.clear();
; 153  : }
; 154  : void VertexStream::setColor(unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 155  : {
; 156  : 	vertex.r = r;
; 157  : 	vertex.g = g;
; 158  : 	vertex.b = b;
; 159  : 	vertex.a = a;
; 160  : }
; 161  : void VertexStream::setUV(float u, float v)
; 162  : {
; 163  : 	vertex.u = u;

  0000c	89 41 38	 mov	 DWORD PTR [rcx+56], eax

; 164  : 	vertex.v = v;

  0000f	f3 0f 11 41 3c	 movss	 DWORD PTR [rcx+60], xmm0

; 108  : 	vertex.x = x + translation.x;

  00014	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [rcx+32]
  00019	48 8d 41 2c	 lea	 rax, QWORD PTR [rcx+44]

; 109  : 	vertex.y = y + translation.y;
; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  0001d	48 83 c1 08	 add	 rcx, 8

; 128  : 	put(v.x, v.y, v.z);

  00021	f3 0f 10 52 08	 movss	 xmm2, DWORD PTR [rdx+8]
  00026	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [rdx+4]

; 108  : 	vertex.x = x + translation.x;

  0002b	f3 0f 58 02	 addss	 xmm0, DWORD PTR [rdx]

; 109  : 	vertex.y = y + translation.y;
; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  0002f	48 8b d0	 mov	 rdx, rax
  00032	f3 0f 58 49 1c	 addss	 xmm1, DWORD PTR [rcx+28]
  00037	f3 0f 58 51 20	 addss	 xmm2, DWORD PTR [rcx+32]
  0003c	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  00040	f3 0f 11 49 28	 movss	 DWORD PTR [rcx+40], xmm1
  00045	f3 0f 11 51 2c	 movss	 DWORD PTR [rcx+44], xmm2
  0004a	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0004f	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 129  : }

  00055	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00059	c3		 ret	 0
?put@VertexStream@gfxu@@QEAAXAEBVVertexUV@2@@Z ENDP	; gfxu::VertexStream::put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0VertexUVRGBA@gfxu@@QEAA@MMMMMMMMM@Z
_TEXT	SEGMENT
this$ = 8
x$ = 16
y$ = 24
z$ = 32
u$ = 40
v$ = 48
r$ = 56
g$ = 64
b$ = 72
a$ = 80
??0VertexUVRGBA@gfxu@@QEAA@MMMMMMMMM@Z PROC		; gfxu::VertexUVRGBA::VertexUVRGBA, COMDAT

; 70   : {}

  00000	f3 0f 10 44 24
	28		 movss	 xmm0, DWORD PTR u$[rsp]
  00006	f3 0f 11 09	 movss	 DWORD PTR [rcx], xmm1
  0000a	f3 0f 10 4c 24
	30		 movss	 xmm1, DWORD PTR v$[rsp]
  00010	f3 0f 11 41 0c	 movss	 DWORD PTR [rcx+12], xmm0
  00015	f3 0f 10 44 24
	38		 movss	 xmm0, DWORD PTR r$[rsp]
  0001b	f3 0f 11 49 10	 movss	 DWORD PTR [rcx+16], xmm1
  00020	f3 0f 10 4c 24
	48		 movss	 xmm1, DWORD PTR b$[rsp]
  00026	f3 0f 11 51 04	 movss	 DWORD PTR [rcx+4], xmm2
  0002b	f3 0f 10 15 00
	00 00 00	 movss	 xmm2, DWORD PTR __real@437f0000
  00033	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00037	f3 0f 59 ca	 mulss	 xmm1, xmm2
  0003b	f3 48 0f 2c c0	 cvttss2si rax, xmm0
  00040	f3 0f 10 44 24
	40		 movss	 xmm0, DWORD PTR g$[rsp]
  00046	f3 0f 11 59 08	 movss	 DWORD PTR [rcx+8], xmm3
  0004b	f3 0f 59 c2	 mulss	 xmm0, xmm2
  0004f	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00052	f3 48 0f 2c c0	 cvttss2si rax, xmm0
  00057	f3 0f 10 44 24
	50		 movss	 xmm0, DWORD PTR a$[rsp]
  0005d	f3 0f 59 c2	 mulss	 xmm0, xmm2
  00061	88 41 15	 mov	 BYTE PTR [rcx+21], al
  00064	f3 48 0f 2c c1	 cvttss2si rax, xmm1
  00069	88 41 16	 mov	 BYTE PTR [rcx+22], al
  0006c	f3 48 0f 2c c0	 cvttss2si rax, xmm0
  00071	88 41 17	 mov	 BYTE PTR [rcx+23], al
  00074	48 8b c1	 mov	 rax, rcx
  00077	c3		 ret	 0
??0VertexUVRGBA@gfxu@@QEAA@MMMMMMMMM@Z ENDP		; gfxu::VertexUVRGBA::VertexUVRGBA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0VertexUV@gfxu@@QEAA@MMMMM@Z
_TEXT	SEGMENT
this$ = 8
x$ = 16
y$ = 24
z$ = 32
u$ = 40
v$ = 48
??0VertexUV@gfxu@@QEAA@MMMMM@Z PROC			; gfxu::VertexUV::VertexUV, COMDAT

; 35   : {}

  00000	f3 0f 10 44 24
	28		 movss	 xmm0, DWORD PTR u$[rsp]
  00006	f3 0f 11 09	 movss	 DWORD PTR [rcx], xmm1
  0000a	f3 0f 10 4c 24
	30		 movss	 xmm1, DWORD PTR v$[rsp]
  00010	48 8b c1	 mov	 rax, rcx
  00013	f3 0f 11 49 10	 movss	 DWORD PTR [rcx+16], xmm1
  00018	f3 0f 11 51 04	 movss	 DWORD PTR [rcx+4], xmm2
  0001d	f3 0f 11 59 08	 movss	 DWORD PTR [rcx+8], xmm3
  00022	f3 0f 11 41 0c	 movss	 DWORD PTR [rcx+12], xmm0
  00027	c3		 ret	 0
??0VertexUV@gfxu@@QEAA@MMMMM@Z ENDP			; gfxu::VertexUV::VertexUV
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?setColor@Uniforms@gfxu@@SAXMMMM@Z
_TEXT	SEGMENT
$T1 = 0
r$ = 32
g$ = 40
b$ = 48
a$ = 56
?setColor@Uniforms@gfxu@@SAXMMMM@Z PROC			; gfxu::Uniforms::setColor, COMDAT

; 550  : {

$LN8:
  00000	48 83 ec 18	 sub	 rsp, 24
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 16   : {

  00004	f3 0f 11 04 24	 movss	 DWORD PTR $T1[rsp], xmm0
  00009	f3 0f 11 4c 24
	04		 movss	 DWORD PTR $T1[rsp+4], xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h

; 246  : 			val = value;

  0000f	48 8b 04 24	 mov	 rax, QWORD PTR $T1[rsp]
  00013	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A, rax

; 247  : 			changed = true;

  0001a	c6 05 10 00 00
	00 01		 mov	 BYTE PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+16, 1
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 16   : {

  00021	f3 0f 11 54 24
	08		 movss	 DWORD PTR $T1[rsp+8], xmm2
  00027	f3 0f 11 5c 24
	0c		 movss	 DWORD PTR $T1[rsp+12], xmm3
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h

; 246  : 			val = value;

  0002d	48 8b 44 24 08	 mov	 rax, QWORD PTR $T1[rsp+8]
  00032	48 89 05 08 00
	00 00		 mov	 QWORD PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+8, rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 552  : }

  00039	48 83 c4 18	 add	 rsp, 24
  0003d	c3		 ret	 0
?setColor@Uniforms@gfxu@@SAXMMMM@Z ENDP			; gfxu::Uniforms::setColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?setFogColor@Uniforms@gfxu@@SAXMMMM@Z
_TEXT	SEGMENT
$T1 = 0
r$ = 32
g$ = 40
b$ = 48
a$ = 56
?setFogColor@Uniforms@gfxu@@SAXMMMM@Z PROC		; gfxu::Uniforms::setFogColor, COMDAT

; 555  : {

$LN8:
  00000	48 83 ec 18	 sub	 rsp, 24
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 16   : {

  00004	f3 0f 11 04 24	 movss	 DWORD PTR $T1[rsp], xmm0
  00009	f3 0f 11 4c 24
	04		 movss	 DWORD PTR $T1[rsp+4], xmm1
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h

; 246  : 			val = value;

  0000f	48 8b 04 24	 mov	 rax, QWORD PTR $T1[rsp]
  00013	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A, rax

; 247  : 			changed = true;

  0001a	c6 05 10 00 00
	00 01		 mov	 BYTE PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+16, 1
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 16   : {

  00021	f3 0f 11 54 24
	08		 movss	 DWORD PTR $T1[rsp+8], xmm2
  00027	f3 0f 11 5c 24
	0c		 movss	 DWORD PTR $T1[rsp+12], xmm3
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h

; 246  : 			val = value;

  0002d	48 8b 44 24 08	 mov	 rax, QWORD PTR $T1[rsp+8]
  00032	48 89 05 08 00
	00 00		 mov	 QWORD PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+8, rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 557  : }

  00039	48 83 c4 18	 add	 rsp, 24
  0003d	c3		 ret	 0
?setFogColor@Uniforms@gfxu@@SAXMMMM@Z ENDP		; gfxu::Uniforms::setFogColor
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?reset@Uniforms@gfxu@@SAXXZ
_TEXT	SEGMENT
?reset@Uniforms@gfxu@@SAXXZ PROC			; gfxu::Uniforms::reset, COMDAT

; 598  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 599  : 	MMS.clear();

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?MMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::MMS
  0000b	e8 00 00 00 00	 call	 ?clear@MatrixStack@gfxu@@QEAAXXZ ; gfxu::MatrixStack::clear

; 600  : 	PMS.clear();

  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?PMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::PMS

; 601  : }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 600  : 	PMS.clear();

  0001b	e9 00 00 00 00	 jmp	 ?clear@MatrixStack@gfxu@@QEAAXXZ ; gfxu::MatrixStack::clear
?reset@Uniforms@gfxu@@SAXXZ ENDP			; gfxu::Uniforms::reset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?getError@gfxu@@YA_NPEBD@Z
_TEXT	SEGMENT
caption$ = 48
error$ = 56
?getError@gfxu@@YA_NPEBD@Z PROC				; gfxu::getError, COMDAT

; 751  : {

$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 752  : 	int error = glGetError();
; 753  : 	if(error != GL_NO_ERROR)
; 754  : 	{
; 755  : 		const char* errorString = (const char*)gluErrorString(error);

  00009	8b ca		 mov	 ecx, edx
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_gluErrorString

; 756  : 		GLWindow::instance->postError(errorString, caption);

  00011	4c 8b c3	 mov	 r8, rbx
  00014	48 8b d0	 mov	 rdx, rax
  00017	e8 00 00 00 00	 call	 ?postError@GLWindow@@QEAAXPEBD0@Z ; GLWindow::postError

; 757  : 		
; 758  : 		return true;

  0001c	b0 01		 mov	 al, 1

; 759  : 	} else
; 760  : 	{
; 761  : 		return false;
; 762  : 	}
; 763  : }

  0001e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00022	5b		 pop	 rbx
  00023	c3		 ret	 0
?getError@gfxu@@YA_NPEBD@Z ENDP				; gfxu::getError
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0VertexStream@gfxu@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0VertexStream@gfxu@@QEAA@XZ PROC			; gfxu::VertexStream::VertexStream, COMDAT

; 91   : {

$LN26:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7VertexStream@gfxu@@6B@
  0000d	48 8b d9	 mov	 rbx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex

; 28   : 		_Mtx_initX(&_Mtx, _Flags | _Mtx_try);

  00010	48 83 c1 50	 add	 rcx, 80			; 00000050H
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 91   : {

  00014	48 89 41 b0	 mov	 QWORD PTR [rcx-80], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 486  : 		_Myfirst = pointer();

  00018	33 c0		 xor	 eax, eax
  0001a	48 89 41 b8	 mov	 QWORD PTR [rcx-72], rax

; 487  : 		_Mylast = pointer();

  0001e	48 89 41 c0	 mov	 QWORD PTR [rcx-64], rax

; 488  : 		_Myend = pointer();

  00022	48 89 41 c8	 mov	 QWORD PTR [rcx-56], rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 19   : {}

  00026	48 89 41 d0	 mov	 QWORD PTR [rcx-48], rax
  0002a	48 89 41 d8	 mov	 QWORD PTR [rcx-40], rax

; 20   : Vertex::Vertex(const Vertex& v)
; 21   : 	: x(v.x), y(v.y), z(v.z)
; 22   : {}
; 23   : Vertex::Vertex(const VertexUV& v)
; 24   : 	: x(v.x), y(v.y), z(v.z)
; 25   : {}
; 26   : Vertex::Vertex(const VertexRGBA& v)
; 27   : 	: x(v.x), y(v.y), z(v.z)
; 28   : {}
; 29   : Vertex::Vertex(const VertexUVRGBA& v)
; 30   : 	: x(v.x), y(v.y), z(v.z)
; 31   : {}
; 32   : 
; 33   : VertexUV::VertexUV(float x, float y, float z, float u, float v)
; 34   : 	: x(x), y(y), z(z), u(u), v(v)
; 35   : {}
; 36   : VertexUV::VertexUV(const Vertex& v)
; 37   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f)
; 38   : {}
; 39   : VertexUV::VertexUV(const VertexUV& v)
; 40   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v)
; 41   : {}
; 42   : VertexUV::VertexUV(const VertexRGBA& v)
; 43   : 	: x(v.x), y(v.y), z(v.z), u(0.0f), v(0.0f)
; 44   : {}
; 45   : VertexUV::VertexUV(const VertexUVRGBA& v)
; 46   : 	: x(v.x), y(v.y), z(v.z), u(v.u), v(v.v)
; 47   : {}
; 48   : 
; 49   : VertexRGBA::VertexRGBA(float x, float y, float z, float r, float g, float b, float a)
; 50   : 	: x(x), y(y), z(z), r(r * 255.0f), g(g * 255.0f), b(b * 255.0f), a(a * 255.0f)
; 51   : {}
; 52   : VertexRGBA::VertexRGBA(float x, float y, float z, unsigned char r, unsigned char g, unsigned char b, unsigned char a)
; 53   : 	: x(x), y(y), z(z), r(r), g(g), b(b), a(a)
; 54   : {}
; 55   : VertexRGBA::VertexRGBA(const Vertex& v)
; 56   : 	: x(v.x), y(v.y), z(v.z), r(255), g(255), b(255), a(255)
; 57   : {}
; 58   : VertexRGBA::VertexRGBA(const VertexUV& v)
; 59   : 	: x(v.x), y(v.y), z(v.z), r(255), g(255), b(255), a(255)
; 60   : {}
; 61   : VertexRGBA::VertexRGBA(const VertexRGBA& v)
; 62   : 	: x(v.x), y(v.y), z(v.z), r(v.r), g(v.g), b(v.b), a(v.a)
; 63   : {}
; 64   : VertexRGBA::VertexRGBA(const VertexUVRGBA& v)
; 65   : 	: x(v.x), y(v.y), z(v.z), r(v.r), g(v.g), b(v.b), a(v.a)
; 66   : {}
; 67   : 
; 68   : VertexUVRGBA::VertexUVRGBA(float x, float y, float z, float u, float v, float r, float g, float b, float a)
; 69   : 	: x(x), y(y), z(z), u(u), v(v), r(r * 255.0f), g(g * 255.0f), b(b * 255.0f), a(a * 255.0f)
; 70   : {}

  0002e	48 89 41 e0	 mov	 QWORD PTR [rcx-32], rax
  00032	48 89 41 e8	 mov	 QWORD PTR [rcx-24], rax
  00036	c7 41 f0 ff ff
	ff ff		 mov	 DWORD PTR [rcx-16], -1	; ffffffffH

; 91   : {

  0003d	66 89 41 fc	 mov	 WORD PTR [rcx-4], ax
  00041	88 41 fe	 mov	 BYTE PTR [rcx-2], al
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 63   : 	return (_Check_C_return(_Mtx_init(_Mtx, _Type)));

  00044	8d 50 02	 lea	 edx, QWORD PTR [rax+2]
  00047	e8 00 00 00 00	 call	 _Mtx_init

; 32   : 	if (_Res != _Thrd_success)

  0004c	85 c0		 test	 eax, eax
  0004e	74 07		 je	 SHORT $LN24@VertexStre

; 33   : 		_Throw_C_error(_Res);

  00050	8b c8		 mov	 ecx, eax
  00052	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN24@VertexStre:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 93   : }

  00057	48 8b c3	 mov	 rax, rbx
  0005a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005e	5b		 pop	 rbx
  0005f	c3		 ret	 0
??0VertexStream@gfxu@@QEAA@XZ ENDP			; gfxu::VertexStream::VertexStream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?put@VertexStream@gfxu@@QEAAXAEBVVertex@2@@Z
_TEXT	SEGMENT
this$ = 48
v$ = 56
?put@VertexStream@gfxu@@QEAAXAEBVVertex@2@@Z PROC	; gfxu::VertexStream::put, COMDAT

; 122  : {

$LN6:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 123  : 	put(v.x, v.y, v.z);

  00004	f3 0f 10 52 08	 movss	 xmm2, DWORD PTR [rdx+8]
  00009	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [rdx+4]

; 108  : 	vertex.x = x + translation.x;

  0000e	f3 0f 10 41 20	 movss	 xmm0, DWORD PTR [rcx+32]
  00013	48 8d 41 2c	 lea	 rax, QWORD PTR [rcx+44]

; 109  : 	vertex.y = y + translation.y;
; 110  : 	vertex.z = z + translation.z;
; 111  : 
; 112  : 	vertices.push_back(vertex);

  00017	48 83 c1 08	 add	 rcx, 8
  0001b	f3 0f 58 02	 addss	 xmm0, DWORD PTR [rdx]
  0001f	f3 0f 58 49 1c	 addss	 xmm1, DWORD PTR [rcx+28]
  00024	f3 0f 58 51 20	 addss	 xmm2, DWORD PTR [rcx+32]
  00029	48 8b d0	 mov	 rdx, rax
  0002c	f3 0f 11 49 28	 movss	 DWORD PTR [rcx+40], xmm1
  00031	f3 0f 11 51 2c	 movss	 DWORD PTR [rcx+44], xmm2
  00036	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0
  0003a	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0003f	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 124  : }

  00045	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00049	c3		 ret	 0
?put@VertexStream@gfxu@@QEAAXAEBVVertex@2@@Z ENDP	; gfxu::VertexStream::put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?draw@VertexStream@gfxu@@QEAAXI@Z
_TEXT	SEGMENT
this$ = 48
mode$ = 56
?draw@VertexStream@gfxu@@QEAAXI@Z PROC			; gfxu::VertexStream::draw, COMDAT

; 246  : {

$LN9:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  0000f	4c 8b 41 10	 mov	 r8, QWORD PTR [rcx+16]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 246  : {

  00013	8b fa		 mov	 edi, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00015	48 be ab aa aa
	aa aa aa aa 2a	 mov	 rsi, 3074457345618258603 ; 2aaaaaaaaaaaaaabH
  0001f	4c 2b 41 08	 sub	 r8, QWORD PTR [rcx+8]
  00023	48 8b c6	 mov	 rax, rsi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 246  : {

  00026	48 8b d9	 mov	 rbx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00029	49 f7 e8	 imul	 r8
  0002c	48 c1 fa 02	 sar	 rdx, 2
  00030	48 8b c2	 mov	 rax, rdx
  00033	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  00037	48 03 d0	 add	 rdx, rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 247  : 	if(vertices.size() > 0 && upload())

  0003a	74 3d		 je	 SHORT $LN1@draw
  0003c	e8 00 00 00 00	 call	 ?upload@VertexStream@gfxu@@QEAA_NXZ ; gfxu::VertexStream::upload
  00041	84 c0		 test	 al, al
  00043	74 34		 je	 SHORT $LN1@draw

; 248  : 	{
; 249  : 		Uniforms::uploadChanges();

  00045	e8 00 00 00 00	 call	 ?uploadChanges@Uniforms@gfxu@@SAXXZ ; gfxu::Uniforms::uploadChanges

; 250  : 		glBindVertexArray(vao);

  0004a	8b 4b 44	 mov	 ecx, DWORD PTR [rbx+68]
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __glewBindVertexArray
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00053	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00057	48 8b c6	 mov	 rax, rsi
  0005a	48 2b 4b 08	 sub	 rcx, QWORD PTR [rbx+8]
  0005e	48 f7 e9	 imul	 rcx
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 251  : 		glDrawArrays(mode, 0, vertices.size());

  00061	8b cf		 mov	 ecx, edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00063	48 c1 fa 02	 sar	 rdx, 2
  00067	4c 8b c2	 mov	 r8, rdx
  0006a	49 c1 e8 3f	 shr	 r8, 63			; 0000003fH
  0006e	4c 03 c2	 add	 r8, rdx
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 251  : 		glDrawArrays(mode, 0, vertices.size());

  00071	33 d2		 xor	 edx, edx
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glDrawArrays
$LN1@draw:

; 252  : 	}
; 253  : }

  00079	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0007e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00083	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00087	5f		 pop	 rdi
  00088	c3		 ret	 0
?draw@VertexStream@gfxu@@QEAAXI@Z ENDP			; gfxu::VertexStream::draw
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0Vertex@gfxu@@QEAA@MMM@Z
_TEXT	SEGMENT
this$ = 8
x$ = 16
y$ = 24
z$ = 32
??0Vertex@gfxu@@QEAA@MMM@Z PROC				; gfxu::Vertex::Vertex, COMDAT

; 19   : {}

  00000	f3 0f 11 09	 movss	 DWORD PTR [rcx], xmm1
  00004	f3 0f 11 51 04	 movss	 DWORD PTR [rcx+4], xmm2
  00009	f3 0f 11 59 08	 movss	 DWORD PTR [rcx+8], xmm3
  0000e	48 8b c1	 mov	 rax, rcx
  00011	c3		 ret	 0
??0Vertex@gfxu@@QEAA@MMM@Z ENDP				; gfxu::Vertex::Vertex
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?push@MatrixStack@gfxu@@QEAAXVMatrix@geom@@@Z
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 96
this$dead$ = 128
mat$ = 136
?push@MatrixStack@gfxu@@QEAAXVMatrix@geom@@@Z PROC	; gfxu::MatrixStack::push, COMDAT

; 504  : {

$LN15:
  00000	40 53		 push	 rbx
  00002	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00006	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000d	48 33 c4	 xor	 rax, rsp
  00010	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 143  : 		c.push_back(_Val);

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?MMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::MMS
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 504  : {

  0001c	48 8b da	 mov	 rbx, rdx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 143  : 		c.push_back(_Val);

  0001f	e8 00 00 00 00	 call	 ?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 506  : 	topmost = topmost * mat;

  00024	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00029	48 8d 0d 28 00
	00 00		 lea	 rcx, OFFSET FLAT:?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+40
  00030	4c 8b c3	 mov	 r8, rbx
  00033	e8 00 00 00 00	 call	 ??DMatrix@geom@@QEBA?AV01@AEBV01@@Z ; geom::Matrix::operator*
  00038	48 8d 0d 2c 00
	00 00		 lea	 rcx, OFFSET FLAT:?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+44
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 212  : 	for(int i = 0; i < 16; i++)

  0003f	4c 8d 05 6c 00
	00 00		 lea	 r8, OFFSET FLAT:?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+108
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 506  : 	topmost = topmost * mat;

  00046	48 8b d0	 mov	 rdx, rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 212  : 	for(int i = 0; i < 16; i++)

  00049	48 2b d1	 sub	 rdx, rcx
  0004c	0f 1f 40 00	 npad	 4
$LL7@push:

; 213  : 	{
; 214  : 		data[i] = mat.data[i];

  00050	8b 04 0a	 mov	 eax, DWORD PTR [rdx+rcx]
  00053	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00057	89 41 dc	 mov	 DWORD PTR [rcx-36], eax
  0005a	8b 44 0a e4	 mov	 eax, DWORD PTR [rdx+rcx-28]
  0005e	89 41 e0	 mov	 DWORD PTR [rcx-32], eax
  00061	8b 44 0a e8	 mov	 eax, DWORD PTR [rdx+rcx-24]
  00065	89 41 e4	 mov	 DWORD PTR [rcx-28], eax
  00068	8b 44 0a ec	 mov	 eax, DWORD PTR [rdx+rcx-20]
  0006c	89 41 e8	 mov	 DWORD PTR [rcx-24], eax
  0006f	8b 44 0a f0	 mov	 eax, DWORD PTR [rdx+rcx-16]
  00073	89 41 ec	 mov	 DWORD PTR [rcx-20], eax
  00076	8b 44 0a f4	 mov	 eax, DWORD PTR [rdx+rcx-12]
  0007a	89 41 f0	 mov	 DWORD PTR [rcx-16], eax
  0007d	8b 44 0a f8	 mov	 eax, DWORD PTR [rdx+rcx-8]
  00081	89 41 f4	 mov	 DWORD PTR [rcx-12], eax
  00084	8b 44 0a fc	 mov	 eax, DWORD PTR [rdx+rcx-4]
  00088	89 41 f8	 mov	 DWORD PTR [rcx-8], eax
  0008b	49 3b c8	 cmp	 rcx, r8
  0008e	7c c0		 jl	 SHORT $LL7@push
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 507  : 	changed = true;

  00090	c6 05 68 00 00
	00 01		 mov	 BYTE PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+104, 1

; 508  : }

  00097	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0009c	48 33 cc	 xor	 rcx, rsp
  0009f	e8 00 00 00 00	 call	 __security_check_cookie
  000a4	48 83 c4 70	 add	 rsp, 112		; 00000070H
  000a8	5b		 pop	 rbx
  000a9	c3		 ret	 0
?push@MatrixStack@gfxu@@QEAAXVMatrix@geom@@@Z ENDP	; gfxu::MatrixStack::push
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?mult@MatrixStack@gfxu@@QEAAXVMatrix@geom@@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 56
$T3 = 80
$T4 = 104
$T5 = 128
$T6 = 128
__$ArrayPad$ = 192
this$ = 240
mat$ = 248
?mult@MatrixStack@gfxu@@QEAAXVMatrix@geom@@@Z PROC	; gfxu::MatrixStack::mult, COMDAT

; 511  : {

$LN50:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  0000f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00016	48 33 c4	 xor	 rax, rsp
  00019	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00021	48 8b ea	 mov	 rbp, rdx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1436 : 		return (*(end() - 1));

  00024	48 8d 54 24 38	 lea	 rdx, QWORD PTR $T2[rsp]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 511  : {

  00029	48 8b f9	 mov	 rdi, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1436 : 		return (*(end() - 1));

  0002c	e8 00 00 00 00	 call	 ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
  00031	48 8d 54 24 68	 lea	 rdx, QWORD PTR $T4[rsp]
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0003e	33 db		 xor	 ebx, ebx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1436 : 		return (*(end() - 1));

  00040	48 8b d0	 mov	 rdx, rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00043	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00046	48 85 c0	 test	 rax, rax
  00049	75 04		 jne	 SHORT $LN13@mult
  0004b	8b c3		 mov	 eax, ebx
  0004d	eb 03		 jmp	 SHORT $LN14@mult
$LN13@mult:
  0004f	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN14@mult:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00052	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]

; 1436 : 		return (*(end() - 1));

  00056	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0005a	48 ff c9	 dec	 rcx
  0005d	48 23 4a 10	 and	 rcx, QWORD PTR [rdx+16]

; 1436 : 		return (*(end() - 1));

  00061	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00066	48 8b 34 c8	 mov	 rsi, QWORD PTR [rax+rcx*8]
  0006a	48 8b cf	 mov	 rcx, rdi
  0006d	e8 00 00 00 00	 call	 ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
  00072	48 8d 54 24 50	 lea	 rdx, QWORD PTR $T3[rsp]
  00077	48 8b c8	 mov	 rcx, rax
  0007a	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0007f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00082	48 85 c9	 test	 rcx, rcx
  00085	74 03		 je	 SHORT $LN28@mult
  00087	48 8b 19	 mov	 rbx, QWORD PTR [rcx]
$LN28@mult:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0008a	48 8b 53 10	 mov	 rdx, QWORD PTR [rbx+16]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 512  : 	stack.top() = stack.top() * mat;

  0008e	4c 8b c5	 mov	 r8, rbp
  00091	48 8b ce	 mov	 rcx, rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00094	48 ff ca	 dec	 rdx
  00097	48 23 50 10	 and	 rdx, QWORD PTR [rax+16]

; 1436 : 		return (*(end() - 1));

  0009b	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0009f	4c 8b 14 d0	 mov	 r10, QWORD PTR [rax+rdx*8]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 512  : 	stack.top() = stack.top() * mat;

  000a3	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR $T6[rsp]
  000ab	e8 00 00 00 00	 call	 ??DMatrix@geom@@QEBA?AV01@AEBV01@@Z ; geom::Matrix::operator*
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  000b0	bb 02 00 00 00	 mov	 ebx, 2
  000b5	49 8d 4a 04	 lea	 rcx, QWORD PTR [r10+4]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 512  : 	stack.top() = stack.top() * mat;

  000b9	48 8b d0	 mov	 rdx, rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  000bc	44 8b cb	 mov	 r9d, ebx
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 212  : 	for(int i = 0; i < 16; i++)

  000bf	49 2b d2	 sub	 rdx, r10
  000c2	66 66 66 66 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL33@mult:

; 213  : 	{
; 214  : 		data[i] = mat.data[i];

  000d0	8b 44 11 fc	 mov	 eax, DWORD PTR [rcx+rdx-4]
  000d4	48 8d 49 20	 lea	 rcx, QWORD PTR [rcx+32]
  000d8	89 41 dc	 mov	 DWORD PTR [rcx-36], eax
  000db	8b 44 0a e0	 mov	 eax, DWORD PTR [rdx+rcx-32]
  000df	89 41 e0	 mov	 DWORD PTR [rcx-32], eax
  000e2	8b 44 0a e4	 mov	 eax, DWORD PTR [rdx+rcx-28]
  000e6	89 41 e4	 mov	 DWORD PTR [rcx-28], eax
  000e9	8b 44 11 e8	 mov	 eax, DWORD PTR [rcx+rdx-24]
  000ed	89 41 e8	 mov	 DWORD PTR [rcx-24], eax
  000f0	8b 44 11 ec	 mov	 eax, DWORD PTR [rcx+rdx-20]
  000f4	89 41 ec	 mov	 DWORD PTR [rcx-20], eax
  000f7	8b 44 11 f0	 mov	 eax, DWORD PTR [rcx+rdx-16]
  000fb	89 41 f0	 mov	 DWORD PTR [rcx-16], eax
  000fe	8b 44 11 f4	 mov	 eax, DWORD PTR [rcx+rdx-12]
  00102	89 41 f4	 mov	 DWORD PTR [rcx-12], eax
  00105	8b 44 11 f8	 mov	 eax, DWORD PTR [rcx+rdx-8]
  00109	89 41 f8	 mov	 DWORD PTR [rcx-8], eax
  0010c	49 ff c9	 dec	 r9
  0010f	75 bf		 jne	 SHORT $LL33@mult
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 513  : 	topmost = topmost * mat;

  00111	48 8d 4f 28	 lea	 rcx, QWORD PTR [rdi+40]
  00115	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR $T5[rsp]
  0011d	4c 8b c5	 mov	 r8, rbp
  00120	e8 00 00 00 00	 call	 ??DMatrix@geom@@QEBA?AV01@AEBV01@@Z ; geom::Matrix::operator*
  00125	48 8d 51 04	 lea	 rdx, QWORD PTR [rcx+4]
  00129	4c 8b d0	 mov	 r10, rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 212  : 	for(int i = 0; i < 16; i++)

  0012c	4c 2b d1	 sub	 r10, rcx
  0012f	90		 npad	 1
$LL38@mult:

; 213  : 	{
; 214  : 		data[i] = mat.data[i];

  00130	41 8b 44 12 fc	 mov	 eax, DWORD PTR [r10+rdx-4]
  00135	48 8d 52 20	 lea	 rdx, QWORD PTR [rdx+32]
  00139	89 42 dc	 mov	 DWORD PTR [rdx-36], eax
  0013c	41 8b 44 12 e0	 mov	 eax, DWORD PTR [r10+rdx-32]
  00141	89 42 e0	 mov	 DWORD PTR [rdx-32], eax
  00144	41 8b 44 12 e4	 mov	 eax, DWORD PTR [r10+rdx-28]
  00149	89 42 e4	 mov	 DWORD PTR [rdx-28], eax
  0014c	41 8b 44 12 e8	 mov	 eax, DWORD PTR [r10+rdx-24]
  00151	89 42 e8	 mov	 DWORD PTR [rdx-24], eax
  00154	41 8b 44 12 ec	 mov	 eax, DWORD PTR [r10+rdx-20]
  00159	89 42 ec	 mov	 DWORD PTR [rdx-20], eax
  0015c	41 8b 44 12 f0	 mov	 eax, DWORD PTR [r10+rdx-16]
  00161	89 42 f0	 mov	 DWORD PTR [rdx-16], eax
  00164	41 8b 44 12 f4	 mov	 eax, DWORD PTR [r10+rdx-12]
  00169	89 42 f4	 mov	 DWORD PTR [rdx-12], eax
  0016c	41 8b 44 12 f8	 mov	 eax, DWORD PTR [r10+rdx-8]
  00171	89 42 f8	 mov	 DWORD PTR [rdx-8], eax
  00174	48 ff cb	 dec	 rbx
  00177	75 b7		 jne	 SHORT $LL38@mult
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 514  : 	changed = true;

  00179	c6 47 68 01	 mov	 BYTE PTR [rdi+104], 1

; 515  : }

  0017d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00185	48 33 cc	 xor	 rcx, rsp
  00188	e8 00 00 00 00	 call	 __security_check_cookie
  0018d	48 8b 9c 24 00
	01 00 00	 mov	 rbx, QWORD PTR [rsp+256]
  00195	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  0019c	5f		 pop	 rdi
  0019d	5e		 pop	 rsi
  0019e	5d		 pop	 rbp
  0019f	c3		 ret	 0
?mult@MatrixStack@gfxu@@QEAAXVMatrix@geom@@@Z ENDP	; gfxu::MatrixStack::mult
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?pop@MatrixStack@gfxu@@QEAAXXZ
_TEXT	SEGMENT
$T1 = 32
__$ArrayPad$ = 96
this$dead$ = 128
?pop@MatrixStack@gfxu@@QEAAXXZ PROC			; gfxu::MatrixStack::pop, COMDAT

; 525  : {

$LN25:
  00000	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000b	48 33 c4	 xor	 rax, rsp
  0000e	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  00013	48 8b 05 20 00
	00 00		 mov	 rax, QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+32
  0001a	48 85 c0	 test	 rax, rax

; 1383 : 		}
; 1384 : 
; 1385 : 	allocator_type get_allocator() const _NOEXCEPT
; 1386 : 		{	// return allocator object for values
; 1387 : 		return (this->_Getal());
; 1388 : 		}
; 1389 : 
; 1390 : 	const_reference at(size_type _Pos) const
; 1391 : 		{	// subscript nonmutable sequence with checking
; 1392 : 		if (this->_Mysize <= _Pos)
; 1393 : 			_Xran();
; 1394 : 		return (*(begin() + _Pos));
; 1395 : 		}
; 1396 : 
; 1397 : 	reference at(size_type _Pos)
; 1398 : 		{	// subscript mutable sequence with checking
; 1399 : 		if (this->_Mysize <= _Pos)
; 1400 : 			_Xran();
; 1401 : 		return (*(begin() + _Pos));
; 1402 : 		}
; 1403 : 
; 1404 : 	const_reference operator[](size_type _Pos) const
; 1405 : 		{	// subscript nonmutable sequence
; 1406 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1407 : 		if (this->_Mysize <= _Pos)
; 1408 : 			_DEBUG_ERROR("deque subscript out of range");
; 1409 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1410 : 
; 1411 : 		return (*(begin() + _Pos));
; 1412 : 		}
; 1413 : 
; 1414 : 	reference operator[](size_type _Pos)
; 1415 : 		{	// subscript mutable sequence
; 1416 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1417 : 		if (this->_Mysize <= _Pos)
; 1418 : 			_DEBUG_ERROR("deque subscript out of range");
; 1419 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1420 : 
; 1421 : 		return (*(begin() + _Pos));
; 1422 : 		}
; 1423 : 
; 1424 : 	reference front()
; 1425 : 		{	// return first element of mutable sequence
; 1426 : 		return (*begin());
; 1427 : 		}
; 1428 : 
; 1429 : 	const_reference front() const
; 1430 : 		{	// return first element of nonmutable sequence
; 1431 : 		return (*begin());
; 1432 : 		}
; 1433 : 
; 1434 : 	reference back()
; 1435 : 		{	// return last element of mutable sequence
; 1436 : 		return (*(end() - 1));
; 1437 : 		}
; 1438 : 
; 1439 : 	const_reference back() const
; 1440 : 		{	// return last element of nonmutable sequence
; 1441 : 		return (*(end() - 1));
; 1442 : 		}
; 1443 : 
; 1444 : 	void push_front(const value_type& _Val)
; 1445 : 		{	// insert element at beginning
; 1446 : 		this->_Orphan_all();
; 1447 : 		_PUSH_FRONT_BEGIN;
; 1448 : 		this->_Getal().construct(
; 1449 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1450 : 		_PUSH_FRONT_END;
; 1451 : 		}
; 1452 : 
; 1453 : 	void pop_front()
; 1454 : 		{	// erase element at beginning
; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (empty())
; 1457 : 			_DEBUG_ERROR("deque empty before pop");
; 1458 : 		else
; 1459 : 			{	// something to erase, do it
; 1460 : 			_Orphan_off(this->_Myoff);
; 1461 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1462 : 			this->_Getal().destroy(
; 1463 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1464 : 			if (--this->_Mysize == 0)
; 1465 : 				this->_Myoff = 0;
; 1466 : 			else
; 1467 : 				++this->_Myoff;
; 1468 : 			}
; 1469 : 
; 1470 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 		if (!empty())
; 1472 : 			{	// something to erase, do it
; 1473 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1474 : 			this->_Getal().destroy(
; 1475 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1476 : 			if (--this->_Mysize == 0)
; 1477 : 				this->_Myoff = 0;
; 1478 : 			else
; 1479 : 				++this->_Myoff;
; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}
; 1483 : 
; 1484 : 	void push_back(const value_type& _Val)
; 1485 : 		{	// insert element at end
; 1486 : 		this->_Orphan_all();
; 1487 : 		_PUSH_BACK_BEGIN;
; 1488 : 		this->_Getal().construct(
; 1489 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1490 : 		_PUSH_BACK_END;
; 1491 : 		}
; 1492 : 
; 1493 : 	void pop_back()
; 1494 : 		{	// erase element at end
; 1495 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1496 : 		if (empty())
; 1497 : 			_DEBUG_ERROR("deque empty before pop");
; 1498 : 		else
; 1499 : 			{	// something to erase, do it
; 1500 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1501 : 			_Orphan_off(_Newoff);
; 1502 : 			size_type _Block = this->_Getblock(_Newoff);
; 1503 : 			this->_Getal().destroy(
; 1504 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1505 : 			if (--this->_Mysize == 0)
; 1506 : 				this->_Myoff = 0;
; 1507 : 			}
; 1508 : 
; 1509 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1510 : 		if (!empty())

  0001d	74 21		 je	 SHORT $LN5@pop

; 1511 : 			{	// something to erase, do it
; 1512 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1513 : 			size_type _Block = this->_Getblock(_Newoff);
; 1514 : 			this->_Getal().destroy(
; 1515 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1516 : 			if (--this->_Mysize == 0)

  0001f	48 ff c8	 dec	 rax
  00022	b9 00 00 00 00	 mov	 ecx, 0
  00027	48 89 05 20 00
	00 00		 mov	 QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+32, rax
  0002e	48 8b 05 18 00
	00 00		 mov	 rax, QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+24
  00035	48 0f 44 c1	 cmove	 rax, rcx
  00039	48 89 05 18 00
	00 00		 mov	 QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+24, rax
$LN5@pop:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 527  : 	topmost = unstack();

  00040	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00045	e8 00 00 00 00	 call	 ?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ ; gfxu::MatrixStack::unstack
  0004a	48 8d 0d 2c 00
	00 00		 lea	 rcx, OFFSET FLAT:?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+44
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 212  : 	for(int i = 0; i < 16; i++)

  00051	4c 8d 05 6c 00
	00 00		 lea	 r8, OFFSET FLAT:?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+108
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 527  : 	topmost = unstack();

  00058	48 8b d0	 mov	 rdx, rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 212  : 	for(int i = 0; i < 16; i++)

  0005b	48 2b d1	 sub	 rdx, rcx
  0005e	66 90		 npad	 2
$LL17@pop:

; 213  : 	{
; 214  : 		data[i] = mat.data[i];

  00060	8b 04 0a	 mov	 eax, DWORD PTR [rdx+rcx]
  00063	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00067	89 41 dc	 mov	 DWORD PTR [rcx-36], eax
  0006a	8b 44 0a e4	 mov	 eax, DWORD PTR [rdx+rcx-28]
  0006e	89 41 e0	 mov	 DWORD PTR [rcx-32], eax
  00071	8b 44 0a e8	 mov	 eax, DWORD PTR [rdx+rcx-24]
  00075	89 41 e4	 mov	 DWORD PTR [rcx-28], eax
  00078	8b 44 0a ec	 mov	 eax, DWORD PTR [rdx+rcx-20]
  0007c	89 41 e8	 mov	 DWORD PTR [rcx-24], eax
  0007f	8b 44 0a f0	 mov	 eax, DWORD PTR [rdx+rcx-16]
  00083	89 41 ec	 mov	 DWORD PTR [rcx-20], eax
  00086	8b 44 0a f4	 mov	 eax, DWORD PTR [rdx+rcx-12]
  0008a	89 41 f0	 mov	 DWORD PTR [rcx-16], eax
  0008d	8b 44 0a f8	 mov	 eax, DWORD PTR [rdx+rcx-8]
  00091	89 41 f4	 mov	 DWORD PTR [rcx-12], eax
  00094	8b 44 0a fc	 mov	 eax, DWORD PTR [rdx+rcx-4]
  00098	89 41 f8	 mov	 DWORD PTR [rcx-8], eax
  0009b	49 3b c8	 cmp	 rcx, r8
  0009e	7c c0		 jl	 SHORT $LL17@pop
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 528  : 	changed = true;

  000a0	c6 05 68 00 00
	00 01		 mov	 BYTE PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+104, 1

; 529  : }

  000a7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000ac	48 33 cc	 xor	 rcx, rsp
  000af	e8 00 00 00 00	 call	 __security_check_cookie
  000b4	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000b8	c3		 ret	 0
?pop@MatrixStack@gfxu@@QEAAXXZ ENDP			; gfxu::MatrixStack::pop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?getTopmost@MatrixStack@gfxu@@QEAA?BVMatrix@geom@@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?getTopmost@MatrixStack@gfxu@@QEAA?BVMatrix@geom@@XZ PROC ; gfxu::MatrixStack::getTopmost, COMDAT

; 544  : 	return topmost;

  00000	8b 41 28	 mov	 eax, DWORD PTR [rcx+40]
  00003	89 02		 mov	 DWORD PTR [rdx], eax
  00005	8b 41 2c	 mov	 eax, DWORD PTR [rcx+44]
  00008	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  0000b	8b 41 30	 mov	 eax, DWORD PTR [rcx+48]
  0000e	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00011	8b 41 34	 mov	 eax, DWORD PTR [rcx+52]
  00014	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  00017	8b 41 38	 mov	 eax, DWORD PTR [rcx+56]
  0001a	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  0001d	8b 41 3c	 mov	 eax, DWORD PTR [rcx+60]
  00020	89 42 14	 mov	 DWORD PTR [rdx+20], eax
  00023	8b 41 40	 mov	 eax, DWORD PTR [rcx+64]
  00026	89 42 18	 mov	 DWORD PTR [rdx+24], eax
  00029	8b 41 44	 mov	 eax, DWORD PTR [rcx+68]
  0002c	89 42 1c	 mov	 DWORD PTR [rdx+28], eax
  0002f	8b 41 48	 mov	 eax, DWORD PTR [rcx+72]
  00032	89 42 20	 mov	 DWORD PTR [rdx+32], eax
  00035	8b 41 4c	 mov	 eax, DWORD PTR [rcx+76]
  00038	89 42 24	 mov	 DWORD PTR [rdx+36], eax
  0003b	8b 41 50	 mov	 eax, DWORD PTR [rcx+80]
  0003e	89 42 28	 mov	 DWORD PTR [rdx+40], eax
  00041	8b 41 54	 mov	 eax, DWORD PTR [rcx+84]
  00044	89 42 2c	 mov	 DWORD PTR [rdx+44], eax
  00047	8b 41 58	 mov	 eax, DWORD PTR [rcx+88]
  0004a	89 42 30	 mov	 DWORD PTR [rdx+48], eax
  0004d	8b 41 5c	 mov	 eax, DWORD PTR [rcx+92]
  00050	89 42 34	 mov	 DWORD PTR [rdx+52], eax
  00053	8b 41 60	 mov	 eax, DWORD PTR [rcx+96]
  00056	89 42 38	 mov	 DWORD PTR [rdx+56], eax
  00059	8b 41 64	 mov	 eax, DWORD PTR [rcx+100]
  0005c	89 42 3c	 mov	 DWORD PTR [rdx+60], eax
  0005f	48 8b c2	 mov	 rax, rdx

; 545  : }

  00062	c3		 ret	 0
?getTopmost@MatrixStack@gfxu@@QEAA?BVMatrix@geom@@XZ ENDP ; gfxu::MatrixStack::getTopmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
$T1 = 32
fileName$GSCopy$ = 72
__$ArrayPad$ = 80
this$ = 112
fileName$ = 120
??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; gfxu::VertexShader::VertexShader, COMDAT

; 345  : {

$LN84:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	57		 push	 rdi
  00004	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00008	49 c7 43 d8 fe
	ff ff ff	 mov	 QWORD PTR [r11-40], -2
  00010	49 89 5b 18	 mov	 QWORD PTR [r11+24], rbx
  00014	49 89 73 20	 mov	 QWORD PTR [r11+32], rsi
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00027	48 8b da	 mov	 rbx, rdx
  0002a	48 8b f9	 mov	 rdi, rcx
  0002d	49 89 53 e0	 mov	 QWORD PTR [r11-32], rdx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00031	49 c7 43 d0 07
	00 00 00	 mov	 QWORD PTR [r11-48], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00039	33 f6		 xor	 esi, esi
  0003b	49 89 73 c8	 mov	 QWORD PTR [r11-56], rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0003f	66 89 74 24 20	 mov	 WORD PTR $T1[rsp], si
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  00044	49 83 c9 ff	 or	 r9, -1
  00048	45 33 c0	 xor	 r8d, r8d
  0004b	49 8d 4b b8	 lea	 rcx, QWORD PTR [r11-72]
  0004f	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 345  : {

  00054	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00059	48 8b cf	 mov	 rcx, rdi
  0005c	e8 00 00 00 00	 call	 ??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; gfxu::Shader::Shader
  00061	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7VertexShader@gfxu@@6B@
  00068	48 89 07	 mov	 QWORD PTR [rdi], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0006b	48 83 7b 18 08	 cmp	 QWORD PTR [rbx+24], 8
  00070	72 08		 jb	 SHORT $LN72@VertexShad
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00072	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00075	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN72@VertexShad:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  0007a	48 c7 43 18 07
	00 00 00	 mov	 QWORD PTR [rbx+24], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00082	48 89 73 10	 mov	 QWORD PTR [rbx+16], rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00086	66 89 33	 mov	 WORD PTR [rbx], si
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 347  : }

  00089	48 8b c7	 mov	 rax, rdi
  0008c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00091	48 33 cc	 xor	 rcx, rsp
  00094	e8 00 00 00 00	 call	 __security_check_cookie
  00099	4c 8d 5c 24 60	 lea	 r11, QWORD PTR [rsp+96]
  0009e	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  000a2	49 8b 73 28	 mov	 rsi, QWORD PTR [r11+40]
  000a6	49 8b e3	 mov	 rsp, r11
  000a9	5f		 pop	 rdi
  000aa	c3		 ret	 0
??0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; gfxu::VertexShader::VertexShader
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
fileName$GSCopy$ = 72
__$ArrayPad$ = 80
this$ = 112
fileName$ = 120
?dtor$0@?0???0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z@4HA PROC ; `gfxu::VertexShader::VertexShader'::`1'::dtor$0
  00000	48 8b 8a 48 00
	00 00		 mov	 rcx, QWORD PTR fileName$GSCopy$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
?dtor$0@?0???0VertexShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z@4HA ENDP ; `gfxu::VertexShader::VertexShader'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
$T1 = 32
fileName$GSCopy$ = 72
__$ArrayPad$ = 80
this$ = 112
fileName$ = 120
??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; gfxu::FragmentShader::FragmentShader, COMDAT

; 367  : {

$LN84:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	57		 push	 rdi
  00004	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00008	49 c7 43 d8 fe
	ff ff ff	 mov	 QWORD PTR [r11-40], -2
  00010	49 89 5b 18	 mov	 QWORD PTR [r11+24], rbx
  00014	49 89 73 20	 mov	 QWORD PTR [r11+32], rsi
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00027	48 8b da	 mov	 rbx, rdx
  0002a	48 8b f9	 mov	 rdi, rcx
  0002d	49 89 53 e0	 mov	 QWORD PTR [r11-32], rdx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00031	49 c7 43 d0 07
	00 00 00	 mov	 QWORD PTR [r11-48], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00039	33 f6		 xor	 esi, esi
  0003b	49 89 73 c8	 mov	 QWORD PTR [r11-56], rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0003f	66 89 74 24 20	 mov	 WORD PTR $T1[rsp], si
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  00044	49 83 c9 ff	 or	 r9, -1
  00048	45 33 c0	 xor	 r8d, r8d
  0004b	49 8d 4b b8	 lea	 rcx, QWORD PTR [r11-72]
  0004f	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 367  : {

  00054	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00059	48 8b cf	 mov	 rcx, rdi
  0005c	e8 00 00 00 00	 call	 ??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; gfxu::Shader::Shader
  00061	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7FragmentShader@gfxu@@6B@
  00068	48 89 07	 mov	 QWORD PTR [rdi], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0006b	48 83 7b 18 08	 cmp	 QWORD PTR [rbx+24], 8
  00070	72 08		 jb	 SHORT $LN72@FragmentSh
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00072	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00075	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN72@FragmentSh:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  0007a	48 c7 43 18 07
	00 00 00	 mov	 QWORD PTR [rbx+24], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00082	48 89 73 10	 mov	 QWORD PTR [rbx+16], rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00086	66 89 33	 mov	 WORD PTR [rbx], si
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 369  : }

  00089	48 8b c7	 mov	 rax, rdi
  0008c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00091	48 33 cc	 xor	 rcx, rsp
  00094	e8 00 00 00 00	 call	 __security_check_cookie
  00099	4c 8d 5c 24 60	 lea	 r11, QWORD PTR [rsp+96]
  0009e	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  000a2	49 8b 73 28	 mov	 rsi, QWORD PTR [r11+40]
  000a6	49 8b e3	 mov	 rsp, r11
  000a9	5f		 pop	 rdi
  000aa	c3		 ret	 0
??0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; gfxu::FragmentShader::FragmentShader
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
fileName$GSCopy$ = 72
__$ArrayPad$ = 80
this$ = 112
fileName$ = 120
?dtor$0@?0???0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z@4HA PROC ; `gfxu::FragmentShader::FragmentShader'::`1'::dtor$0
  00000	48 8b 8a 48 00
	00 00		 mov	 rcx, QWORD PTR fileName$GSCopy$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
?dtor$0@?0???0FragmentShader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z@4HA ENDP ; `gfxu::FragmentShader::FragmentShader'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0ShaderProgram@gfxu@@QEAA@PEAVVertexShader@1@PEAVGeometryShader@1@PEAVFragmentShader@1@@Z
_TEXT	SEGMENT
this$ = 48
vShader$ = 56
gShader$dead$ = 64
fShader$ = 72
??0ShaderProgram@gfxu@@QEAA@PEAVVertexShader@1@PEAVGeometryShader@1@PEAVFragmentShader@1@@Z PROC ; gfxu::ShaderProgram::ShaderProgram, COMDAT

; 379  : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	48 89 11	 mov	 QWORD PTR [rcx], rdx
  0000c	48 c7 41 08 00
	00 00 00	 mov	 QWORD PTR [rcx+8], 0
  00014	4c 89 49 10	 mov	 QWORD PTR [rcx+16], r9
  00018	c6 41 1c 00	 mov	 BYTE PTR [rcx+28], 0

; 380  : 	create();

  0001c	e8 00 00 00 00	 call	 ?create@ShaderProgram@gfxu@@AEAA_NXZ ; gfxu::ShaderProgram::create

; 381  : }

  00021	48 8b c3	 mov	 rax, rbx
  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5b		 pop	 rbx
  00029	c3		 ret	 0
??0ShaderProgram@gfxu@@QEAA@PEAVVertexShader@1@PEAVGeometryShader@1@PEAVFragmentShader@1@@Z ENDP ; gfxu::ShaderProgram::ShaderProgram
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??1ShaderProgram@gfxu@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1ShaderProgram@gfxu@@QEAA@XZ PROC			; gfxu::ShaderProgram::~ShaderProgram, COMDAT

; 384  : {

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 385  : 	glUseProgram(0);

  00009	33 c9		 xor	 ecx, ecx
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __glewUseProgram

; 386  : 	glDeleteProgram(object);

  00011	8b 4b 18	 mov	 ecx, DWORD PTR [rbx+24]

; 387  : }

  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5b		 pop	 rbx

; 386  : 	glDeleteProgram(object);

  00019	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __glewDeleteProgram
??1ShaderProgram@gfxu@@QEAA@XZ ENDP			; gfxu::ShaderProgram::~ShaderProgram
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?bind@ShaderProgram@gfxu@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?bind@ShaderProgram@gfxu@@QEAAXXZ PROC			; gfxu::ShaderProgram::bind, COMDAT

; 473  : {

$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 474  : 	glUseProgram(object);

  00009	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  0000c	ff 15 00 00 00
	00		 call	 QWORD PTR __glewUseProgram

; 606  : }
; 607  : 
; 608  : bool Uniforms::forceUpload = false;
; 609  : MatrixStack Uniforms::MMS;
; 610  : MatrixStack Uniforms::PMS;
; 611  : Uniform<geom::Vector> Uniforms::color;
; 612  : Uniform<geom::Vector> Uniforms::camPos;
; 613  : Uniform<geom::Vector> Uniforms::fogColor;
; 614  : Uniform<float> Uniforms::fogDist;
; 615  : 
; 616  : 
; 617  : 
; 618  : Texture2D::Texture2D()
; 619  : 	: data(nullptr), width(0), height(0), object(0), magFilter(GL_LINEAR), minFilter(GL_LINEAR), wrap(GL_REPEAT), mipmapped(false), uploaded(false)
; 620  : {
; 621  : 
; 622  : }
; 623  : 
; 624  : Texture2D::Texture2D(unsigned int width, unsigned int height, TEXTURE_PARAMETER magFilter, TEXTURE_PARAMETER minFilter, TEXTURE_PARAMETER wrap, bool mipmapped)
; 625  : 	: width(width), height(height), data(new unsigned char[width * height * 4]), object(0), magFilter(magFilter), minFilter(minFilter), wrap(wrap), mipmapped(mipmapped), uploaded(false)
; 626  : {
; 627  : 
; 628  : }
; 629  : 
; 630  : Texture2D::Texture2D(unsigned int width, unsigned int height, Noise::NoiseGenerator2D* r, Noise::NoiseGenerator2D* g, Noise::NoiseGenerator2D* b, Noise::NoiseGenerator2D* a)
; 631  : 	: width(width), height(height), data(new unsigned char[width * height* 4]), object(0), magFilter(GL_LINEAR), minFilter(GL_LINEAR), wrap(GL_CLAMP_TO_EDGE), mipmapped(false), uploaded(false)
; 632  : {
; 633  : 	for(unsigned int i = 0; i < width; i++)
; 634  : 	{
; 635  : 		for(unsigned int j = 0; j < height; j++)
; 636  : 		{
; 637  : 			data[(i + j * width) * 4] = (unsigned char)((r == nullptr ? 1.0f : r->getNoise(i, j)) * 255.0f);
; 638  : 			data[(i + j * width) * 4 + 1] = (unsigned char)((g == nullptr ? 1.0f : g->getNoise(i, j)) * 255.0f);
; 639  : 			data[(i + j * width) * 4 + 2] = (unsigned char)((b == nullptr ? 1.0f : b->getNoise(i, j)) * 255.0f);
; 640  : 			data[(i + j * width) * 4 + 3] = (unsigned char)((a == nullptr ? 1.0f : a->getNoise(i, j)) * 255.0f);
; 641  : 		}
; 642  : 	}
; 643  : }
; 644  : 
; 645  : Texture2D::Texture2D(wstring fileName)
; 646  : 	: object(0), magFilter(GL_LINEAR), minFilter(GL_LINEAR), wrap(GL_REPEAT), mipmapped(false), uploaded(false)
; 647  : {
; 648  : 	init(fileName);
; 649  : }
; 650  : 
; 651  : Texture2D::Texture2D(wstring fileName, TEXTURE_PARAMETER magFilter, TEXTURE_PARAMETER minFilter, TEXTURE_PARAMETER wrap, bool mipmapped)
; 652  : 	: object(0), magFilter(magFilter), minFilter(minFilter), wrap(wrap), mipmapped(mipmapped), uploaded(false)
; 653  : {
; 654  : 	init(fileName);
; 655  : }
; 656  : 
; 657  : void Texture2D::init(wstring fileName)
; 658  : {
; 659  : 	data = IOUtil::readPNG(fileName, width, height);
; 660  : }
; 661  : 
; 662  : Texture2D::~Texture2D()
; 663  : {
; 664  : 	if(data != nullptr)
; 665  : 	{
; 666  : 		delete[] data;
; 667  : 	}
; 668  : 
; 669  : 	if(uploaded)
; 670  : 	{
; 671  : 		glDeleteTextures(1, &object);
; 672  : 	}
; 673  : }
; 674  : 
; 675  : bool Texture2D::upload()
; 676  : {
; 677  : 	glGenTextures(1, &object);
; 678  : 	glBindTexture(GL_TEXTURE_2D, object);
; 679  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, minFilter);
; 680  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, magFilter);
; 681  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, wrap);
; 682  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, wrap);
; 683  : 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
; 684  : 	if(mipmapped)
; 685  : 	{
; 686  : 		glGenerateMipmap(GL_TEXTURE_2D);
; 687  : 	}
; 688  : 
; 689  : 	uploaded = true;
; 690  : 
; 691  : 	return true;
; 692  : }
; 693  : 
; 694  : void Texture2D::bind()
; 695  : {
; 696  : 	if(!uploaded)
; 697  : 	{
; 698  : 		if(!upload())
; 699  : 		{
; 700  : 			return;
; 701  : 		}
; 702  : 	}
; 703  : 	else
; 704  : 	{
; 705  : 		glBindTexture(GL_TEXTURE_2D, object);
; 706  : 	}
; 707  : }
; 708  : 
; 709  : TiledTexture::TiledTexture()
; 710  : 	: Texture2D()
; 711  : {
; 712  : 
; 713  : }
; 714  : 
; 715  : TiledTexture::~TiledTexture()
; 716  : {
; 717  : 
; 718  : }
; 719  : 
; 720  : TiledTexture::Icon* TiledTexture::icon(wstring file)
; 721  : {
; 722  : 	auto iconIter = icons.find(file);
; 723  : 
; 724  : 	if(iconIter == icons.end())
; 725  : 	{
; 726  : 		Icon* icon = new TiledTexture::Icon(file);
; 727  : 
; 728  : 		icons[file] = icon;
; 729  : 		return icon;
; 730  : 	}
; 731  : 	else
; 732  : 	{
; 733  : 		return iconIter->second;
; 734  : 	}
; 735  : }
; 736  : 
; 737  : TiledTexture::Icon::Icon(wstring file)
; 738  : 	: file(file), x(0), y(0)
; 739  : {
; 740  : 	data = IOUtil::readPNG(file, width, height);
; 741  : }
; 742  : 
; 743  : TiledTexture::Icon::~Icon()
; 744  : {
; 745  : 	delete[] data;
; 746  : }
; 747  : 
; 748  : 
; 749  : 
; 750  : bool gfxu::getError(const char* caption)
; 751  : {
; 752  : 	int error = glGetError();

  00012	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glGetError

; 753  : 	if(error != GL_NO_ERROR)

  00018	85 c0		 test	 eax, eax
  0001a	74 17		 je	 SHORT $LN4@bind

; 754  : 	{
; 755  : 		const char* errorString = (const char*)gluErrorString(error);

  0001c	8b c8		 mov	 ecx, eax
  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_gluErrorString

; 756  : 		GLWindow::instance->postError(errorString, caption);

  00024	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG4294928249
  0002b	48 8b d0	 mov	 rdx, rax
  0002e	e8 00 00 00 00	 call	 ?postError@GLWindow@@QEAAXPEBD0@Z ; GLWindow::postError
$LN4@bind:

; 475  : 	gfxu::getError();
; 476  : 	current = this;

  00033	48 89 1d 00 00
	00 00		 mov	 QWORD PTR ?current@ShaderProgram@gfxu@@2PEAV12@EA, rbx ; gfxu::ShaderProgram::current

; 480  : 
; 481  : ShaderProgram* ShaderProgram::current;
; 482  : 
; 483  : 
; 484  : 
; 485  : MatrixStack::MatrixStack()
; 486  : {
; 487  : 	clear();
; 488  : }
; 489  : 
; 490  : geom::Matrix MatrixStack::unstack()
; 491  : {
; 492  : 	std::stack<geom::Matrix> stack2 = stack;
; 493  : 	geom::Matrix mat = geom::Matrix::identity();
; 494  : 	while(!stack2.empty())
; 495  : 	{
; 496  : 		mat = stack2.top() * mat;
; 497  : 		stack2.pop();
; 498  : 	}
; 499  : 
; 500  : 	return mat;
; 501  : }
; 502  : 
; 503  : void MatrixStack::push(geom::Matrix mat)
; 504  : {
; 505  : 	stack.push(mat);
; 506  : 	topmost = topmost * mat;
; 507  : 	changed = true;
; 508  : }
; 509  : 
; 510  : void MatrixStack::mult(geom::Matrix mat)
; 511  : {
; 512  : 	stack.top() = stack.top() * mat;
; 513  : 	topmost = topmost * mat;
; 514  : 	changed = true;
; 515  : }
; 516  : 
; 517  : void MatrixStack::identity()
; 518  : {
; 519  : 	stack.top() = geom::Matrix::identity();
; 520  : 	topmost = unstack();
; 521  : 	changed = true;
; 522  : }
; 523  : 
; 524  : void MatrixStack::pop()
; 525  : {
; 526  : 	stack.pop();
; 527  : 	topmost = unstack();
; 528  : 	changed = true;
; 529  : }
; 530  : 
; 531  : void MatrixStack::clear()
; 532  : {
; 533  : 	while(!stack.empty())
; 534  : 	{
; 535  : 		stack.pop();
; 536  : 	}
; 537  : 	stack.push(geom::Matrix::identity());
; 538  : 	topmost = geom::Matrix::identity();
; 539  : 	changed = true;
; 540  : }
; 541  : 
; 542  : const geom::Matrix MatrixStack::getTopmost()
; 543  : {
; 544  : 	return topmost;
; 545  : }
; 546  : 
; 547  : 
; 548  : 
; 549  : void Uniforms::setColor(float r, float g, float b, float a)
; 550  : {
; 551  : 	color.set(geom::Vector(r, g, b, a));
; 552  : }
; 553  : 
; 554  : void Uniforms::setFogColor(float r, float g, float b, float a)
; 555  : {
; 556  : 	fogColor.set(geom::Vector(r, g, b, a));
; 557  : }
; 558  : 
; 559  : void Uniforms::uploadChanges()
; 560  : {
; 561  : 	if(forceUpload | (MMS.changed & (ShaderProgram::current->modelview >= 0)))
; 562  : 	{
; 563  : 		glUniformMatrix4fv(ShaderProgram::current->modelview, 1, false, MMS.getTopmost().data);
; 564  : 		MMS.changed = false;
; 565  : 	}
; 566  : 
; 567  : 	if(forceUpload | (PMS.changed & (ShaderProgram::current->projection >= 0)))
; 568  : 	{
; 569  : 		glUniformMatrix4fv(ShaderProgram::current->projection, 1, false, PMS.getTopmost().data);
; 570  : 		PMS.changed = false;
; 571  : 	}
; 572  : 
; 573  : 	if(forceUpload | (color.changed & (ShaderProgram::current->const_color >= 0)))
; 574  : 	{
; 575  : 		geom::Vector vec = color.get();
; 576  : 		glUniform4f(ShaderProgram::current->const_color, vec.x, vec.y, vec.z, vec.w);
; 577  : 	}
; 578  : 
; 579  : 	if(forceUpload | (camPos.changed & (ShaderProgram::current->cam_pos >= 0)))
; 580  : 	{
; 581  : 		geom::Vector vec = camPos.get();
; 582  : 		glUniform4f(ShaderProgram::current->cam_pos, vec.x, vec.y, vec.z, vec.w);
; 583  : 	}
; 584  : 
; 585  : 	if(forceUpload | (fogColor.changed & (ShaderProgram::current->fog_color >= 0)))
; 586  : 	{
; 587  : 		geom::Vector vec = fogColor.get();
; 588  : 		glUniform4f(ShaderProgram::current->fog_color, vec.x, vec.y, vec.z, vec.w);
; 589  : 	}
; 590  : 
; 591  : 	if(forceUpload | (fogDist.changed & (ShaderProgram::current->fog_dist >= 0)))
; 592  : 	{
; 593  : 		glUniform1f(ShaderProgram::current->fog_dist, fogDist.get());
; 594  : 	}
; 595  : }
; 596  : 
; 597  : void Uniforms::reset()
; 598  : {
; 599  : 	MMS.clear();
; 600  : 	PMS.clear();
; 601  : }
; 602  : 
; 603  : void Uniforms::setForceUpload()
; 604  : {
; 605  : 	MMS.changed = PMS.changed = true;

  0003a	c6 05 68 00 00
	00 01		 mov	 BYTE PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+104, 1
  00041	c6 05 68 00 00
	00 01		 mov	 BYTE PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+104, 1

; 477  : 
; 478  : 	Uniforms::setForceUpload();
; 479  : }

  00048	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004c	5b		 pop	 rbx
  0004d	c3		 ret	 0
?bind@ShaderProgram@gfxu@@QEAAXXZ ENDP			; gfxu::ShaderProgram::bind
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??1Shader@gfxu@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1Shader@gfxu@@QEAA@XZ PROC				; gfxu::Shader::~Shader, COMDAT

; 336  : {

$LN39:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00013	48 8b d9	 mov	 rbx, rcx
  00016	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Shader@gfxu@@6B@
  0001d	48 89 01	 mov	 QWORD PTR [rcx], rax

; 337  : 	if(compiled)

  00020	80 79 2c 00	 cmp	 BYTE PTR [rcx+44], 0
  00024	74 0a		 je	 SHORT $LN1@Shader

; 338  : 	{
; 339  : 		glDeleteShader(object);

  00026	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __glewDeleteShader
  0002f	90		 npad	 1
$LN1@Shader:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00030	48 83 7b 20 08	 cmp	 QWORD PTR [rbx+32], 8
  00035	72 09		 jb	 SHORT $LN27@Shader
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00037	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  0003b	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN27@Shader:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00040	48 c7 43 20 07
	00 00 00	 mov	 QWORD PTR [rbx+32], 7

; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00048	33 c0		 xor	 eax, eax
  0004a	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0004e	66 89 43 08	 mov	 WORD PTR [rbx+8], ax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 341  : }

  00052	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00056	5b		 pop	 rbx
  00057	c3		 ret	 0
??1Shader@gfxu@@QEAA@XZ ENDP				; gfxu::Shader::~Shader
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???1Shader@gfxu@@QEAA@XZ@4HA PROC		; `gfxu::Shader::~Shader'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	48 83 c1 08	 add	 rcx, 8
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
?dtor$0@?0???1Shader@gfxu@@QEAA@XZ@4HA ENDP		; `gfxu::Shader::~Shader'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z
_TEXT	SEGMENT
$T1 = 32
fileName$GSCopy$ = 72
__$ArrayPad$ = 80
this$ = 112
fileName$ = 120
magFilter$dead$ = 128
minFilter$dead$ = 136
wrap$dead$ = 144
mipmapped$dead$ = 152
??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z PROC ; gfxu::Texture2D::Texture2D, COMDAT

; 653  : {

$LN83:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	57		 push	 rdi
  00004	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00008	49 c7 43 d8 fe
	ff ff ff	 mov	 QWORD PTR [r11-40], -2
  00010	49 89 5b 18	 mov	 QWORD PTR [r11+24], rbx
  00014	49 89 73 20	 mov	 QWORD PTR [r11+32], rsi
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00027	48 8b da	 mov	 rbx, rdx
  0002a	48 8b f9	 mov	 rdi, rcx
  0002d	49 89 53 e0	 mov	 QWORD PTR [r11-32], rdx
  00031	33 f6		 xor	 esi, esi
  00033	89 31		 mov	 DWORD PTR [rcx], esi
  00035	c7 41 04 00 26
	00 00		 mov	 DWORD PTR [rcx+4], 9728	; 00002600H
  0003c	c7 41 08 00 26
	00 00		 mov	 DWORD PTR [rcx+8], 9728	; 00002600H
  00043	c7 41 0c 2f 81
	00 00		 mov	 DWORD PTR [rcx+12], 33071 ; 0000812fH
  0004a	66 89 71 10	 mov	 WORD PTR [rcx+16], si
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  0004e	49 c7 43 d0 07
	00 00 00	 mov	 QWORD PTR [r11-48], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00056	49 89 73 c8	 mov	 QWORD PTR [r11-56], rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0005a	66 89 74 24 20	 mov	 WORD PTR $T1[rsp], si
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  0005f	49 83 c9 ff	 or	 r9, -1
  00063	45 33 c0	 xor	 r8d, r8d
  00066	49 8d 4b b8	 lea	 rcx, QWORD PTR [r11-72]
  0006a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 654  : 	init(fileName);

  0006f	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00074	48 8b cf	 mov	 rcx, rdi
  00077	e8 00 00 00 00	 call	 ?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; gfxu::Texture2D::init
  0007c	90		 npad	 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0007d	48 83 7b 18 08	 cmp	 QWORD PTR [rbx+24], 8
  00082	72 08		 jb	 SHORT $LN71@Texture2D
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00084	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00087	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN71@Texture2D:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  0008c	48 c7 43 18 07
	00 00 00	 mov	 QWORD PTR [rbx+24], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00094	48 89 73 10	 mov	 QWORD PTR [rbx+16], rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00098	66 89 33	 mov	 WORD PTR [rbx], si
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 655  : }

  0009b	48 8b c7	 mov	 rax, rdi
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000a3	48 33 cc	 xor	 rcx, rsp
  000a6	e8 00 00 00 00	 call	 __security_check_cookie
  000ab	4c 8d 5c 24 60	 lea	 r11, QWORD PTR [rsp+96]
  000b0	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  000b4	49 8b 73 28	 mov	 rsi, QWORD PTR [r11+40]
  000b8	49 8b e3	 mov	 rsp, r11
  000bb	5f		 pop	 rdi
  000bc	c3		 ret	 0
??0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z ENDP ; gfxu::Texture2D::Texture2D
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
fileName$GSCopy$ = 72
__$ArrayPad$ = 80
this$ = 112
fileName$ = 120
magFilter$dead$ = 128
minFilter$dead$ = 136
wrap$dead$ = 144
mipmapped$dead$ = 152
?dtor$0@?0???0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z@4HA PROC ; `gfxu::Texture2D::Texture2D'::`1'::dtor$0
  00000	48 8b 8a 48 00
	00 00		 mov	 rcx, QWORD PTR fileName$GSCopy$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
?dtor$0@?0???0Texture2D@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@III_N@Z@4HA ENDP ; `gfxu::Texture2D::Texture2D'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??1Texture2D@gfxu@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1Texture2D@gfxu@@QEAA@XZ PROC				; gfxu::Texture2D::~Texture2D, COMDAT

; 663  : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 664  : 	if(data != nullptr)

  00009	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  0000d	48 85 c9	 test	 rcx, rcx
  00010	74 05		 je	 SHORT $LN2@Texture2D

; 665  : 	{
; 666  : 		delete[] data;

  00012	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN2@Texture2D:

; 667  : 	}
; 668  : 
; 669  : 	if(uploaded)

  00017	80 7b 11 00	 cmp	 BYTE PTR [rbx+17], 0
  0001b	74 14		 je	 SHORT $LN1@Texture2D

; 670  : 	{
; 671  : 		glDeleteTextures(1, &object);

  0001d	48 8b d3	 mov	 rdx, rbx
  00020	b9 01 00 00 00	 mov	 ecx, 1

; 672  : 	}
; 673  : }

  00025	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00029	5b		 pop	 rbx

; 670  : 	{
; 671  : 		glDeleteTextures(1, &object);

  0002a	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_glDeleteTextures
$LN1@Texture2D:

; 672  : 	}
; 673  : }

  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5b		 pop	 rbx
  00036	c3		 ret	 0
??1Texture2D@gfxu@@QEAA@XZ ENDP				; gfxu::Texture2D::~Texture2D
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?bind@Texture2D@gfxu@@QEAAXXZ
_TEXT	SEGMENT
this$dead$ = 8
?bind@Texture2D@gfxu@@QEAAXXZ PROC			; gfxu::Texture2D::bind, COMDAT

; 695  : {

  00000	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?testure@@3PEAVTexture2D@gfxu@@EA ; testure

; 696  : 	if(!uploaded)

  00007	80 78 11 00	 cmp	 BYTE PTR [rax+17], 0
  0000b	75 08		 jne	 SHORT $LN3@bind

; 697  : 	{
; 698  : 		if(!upload())

  0000d	48 8b c8	 mov	 rcx, rax
  00010	e9 00 00 00 00	 jmp	 ?upload@Texture2D@gfxu@@QEAA_NXZ ; gfxu::Texture2D::upload
$LN3@bind:

; 699  : 		{
; 700  : 			return;
; 701  : 		}
; 702  : 	}
; 703  : 	else
; 704  : 	{
; 705  : 		glBindTexture(GL_TEXTURE_2D, object);

  00015	8b 10		 mov	 edx, DWORD PTR [rax]
  00017	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  0001c	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_glBindTexture
?bind@Texture2D@gfxu@@QEAAXXZ ENDP			; gfxu::Texture2D::bind
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QEAA@AEBU01@@Z
_TEXT	SEGMENT
_Lock$1 = 48
this$ = 48
_Right$ = 56
??0_Iterator_base12@std@@QEAA@AEBU01@@Z PROC		; std::_Iterator_base12::_Iterator_base12, COMDAT

; 118  : 		{	// copy an iterator

$LN22:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	33 c0		 xor	 eax, eax
  00008	48 8b d9	 mov	 rbx, rcx
  0000b	48 89 01	 mov	 QWORD PTR [rcx], rax
  0000e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  00012	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00015	48 85 c0	 test	 rax, rax
  00018	74 2e		 je	 SHORT $LN20@Iterator_b

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  0001a	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  0001d	48 85 c0	 test	 rax, rax
  00020	75 20		 jne	 SHORT $LN11@Iterator_b

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00022	8d 50 03	 lea	 edx, QWORD PTR [rax+3]
  00025	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  0002a	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  0002f	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  00034	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit

; 119  : 		*this = _Right;
; 120  : 		}

  00039	48 8b c3	 mov	 rax, rbx
  0003c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00040	5b		 pop	 rbx
  00041	c3		 ret	 0
$LN11@Iterator_b:

; 151  : 		else
; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00042	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00045	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN20@Iterator_b:

; 119  : 		*this = _Right;
; 120  : 		}

  00048	48 8b c3	 mov	 rax, rbx
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5b		 pop	 rbx
  00050	c3		 ret	 0
??0_Iterator_base12@std@@QEAA@AEBU01@@Z ENDP		; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z
_TEXT	SEGMENT
_Lock$1 = 48
this$ = 48
_Right$ = 56
??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z PROC	; std::_Iterator_base12::operator=, COMDAT

; 123  : 		{	// assign an iterator

$LN19:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00006	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00009	48 8b d9	 mov	 rbx, rcx
  0000c	48 39 01	 cmp	 QWORD PTR [rcx], rax
  0000f	74 35		 je	 SHORT $LN17@operator

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)

  00011	48 85 c0	 test	 rax, rax
  00014	74 17		 je	 SHORT $LN2@operator

; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00016	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00019	48 85 c0	 test	 rax, rax
  0001c	74 0f		 je	 SHORT $LN2@operator

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);
; 149  : 			_Orphan_me();
; 150  : 			}
; 151  : 		else
; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  0001e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00021	48 89 01	 mov	 QWORD PTR [rcx], rax

; 133  : 		return (*this);

  00024	48 8b c1	 mov	 rax, rcx

; 134  : 		}

  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5b		 pop	 rbx
  0002c	c3		 ret	 0
$LN2@operator:

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);

  0002d	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  00032	ba 03 00 00 00	 mov	 edx, 3
  00037	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 131  : 			_Orphan_me();
; 132  : 			}

  0003c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  00041	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
$LN17@operator:

; 133  : 		return (*this);

  00046	48 8b c3	 mov	 rax, rbx

; 134  : 		}

  00049	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004d	5b		 pop	 rbx
  0004e	c3		 ret	 0
??4_Iterator_base12@std@@QEAAAEAU01@AEBU01@@Z ENDP	; std::_Iterator_base12::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0VertexUVRGBA@gfxu@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 8
v$ = 16
??0VertexUVRGBA@gfxu@@QEAA@AEBV01@@Z PROC		; gfxu::VertexUVRGBA::VertexUVRGBA, COMDAT

; 85   : {}

  00000	8b 02		 mov	 eax, DWORD PTR [rdx]
  00002	89 01		 mov	 DWORD PTR [rcx], eax
  00004	8b 42 04	 mov	 eax, DWORD PTR [rdx+4]
  00007	89 41 04	 mov	 DWORD PTR [rcx+4], eax
  0000a	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  0000d	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  00010	8b 42 0c	 mov	 eax, DWORD PTR [rdx+12]
  00013	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  00016	8b 42 10	 mov	 eax, DWORD PTR [rdx+16]
  00019	89 41 10	 mov	 DWORD PTR [rcx+16], eax
  0001c	0f b6 42 14	 movzx	 eax, BYTE PTR [rdx+20]
  00020	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00023	0f b6 42 15	 movzx	 eax, BYTE PTR [rdx+21]
  00027	88 41 15	 mov	 BYTE PTR [rcx+21], al
  0002a	0f b6 42 16	 movzx	 eax, BYTE PTR [rdx+22]
  0002e	88 41 16	 mov	 BYTE PTR [rcx+22], al
  00031	0f b6 42 17	 movzx	 eax, BYTE PTR [rdx+23]
  00035	88 41 17	 mov	 BYTE PTR [rcx+23], al
  00038	48 8b c1	 mov	 rax, rcx
  0003b	c3		 ret	 0
??0VertexUVRGBA@gfxu@@QEAA@AEBV01@@Z ENDP		; gfxu::VertexUVRGBA::VertexUVRGBA
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_GVertexStream@gfxu@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GVertexStream@gfxu@@UEAAPEAXI@Z PROC			; gfxu::VertexStream::`scalar deleting destructor', COMDAT
$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b da		 mov	 ebx, edx
  0000c	48 8b f9	 mov	 rdi, rcx
  0000f	e8 00 00 00 00	 call	 ??1VertexStream@gfxu@@UEAA@XZ ; gfxu::VertexStream::~VertexStream
  00014	f6 c3 01	 test	 bl, 1
  00017	74 08		 je	 SHORT $LN4@scalar
  00019	48 8b cf	 mov	 rcx, rdi
  0001c	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN4@scalar:
  00021	48 8b c7	 mov	 rax, rdi
  00024	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5f		 pop	 rdi
  0002e	c3		 ret	 0
??_GVertexStream@gfxu@@UEAAPEAXI@Z ENDP			; gfxu::VertexStream::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\task.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??1VertexStream@gfxu@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1VertexStream@gfxu@@UEAA@XZ PROC			; gfxu::VertexStream::~VertexStream, COMDAT

; 100  : {

$LN49:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 101  : 	if(isUploaded())

  00006	80 79 4d 00	 cmp	 BYTE PTR [rcx+77], 0
  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7VertexStream@gfxu@@6B@
  00011	48 8b d9	 mov	 rbx, rcx
  00014	48 89 01	 mov	 QWORD PTR [rcx], rax
  00017	74 71		 je	 SHORT $LN28@VertexStre
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h

; 18   : 			if(pos + sizeof(A) <= size)

  00019	44 8b 05 34 08
	00 00		 mov	 r8d, DWORD PTR ?renderThread@@3VRenderThread@@A+2100
  00020	8b 05 30 08 00
	00		 mov	 eax, DWORD PTR ?renderThread@@3VRenderThread@@A+2096
; File c:\users\glenn\documents\github\wind\project\wind\wind\task.cpp

; 13   : {

  00026	44 8b 49 48	 mov	 r9d, DWORD PTR [rcx+72]
  0002a	44 8b 51 44	 mov	 r10d, DWORD PTR [rcx+68]
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h

; 18   : 			if(pos + sizeof(A) <= size)

  0002e	49 8d 50 10	 lea	 rdx, QWORD PTR [r8+16]
  00032	41 8b c8	 mov	 ecx, r8d
  00035	48 3b d0	 cmp	 rdx, rax
  00038	77 2f		 ja	 SHORT $LN17@VertexStre

; 19   : 			{
; 20   : 				A* mempos = (A*)(heap + pos);

  0003a	48 03 0d 28 08
	00 00		 add	 rcx, QWORD PTR ?renderThread@@3VRenderThread@@A+2088

; 21   : 				new(mempos) A(object);

  00041	74 19		 je	 SHORT $LN20@VertexStre
  00043	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7TaskVBOVAOSet@Tasks@@6B@
  0004a	44 89 49 08	 mov	 DWORD PTR [rcx+8], r9d
  0004e	44 89 51 0c	 mov	 DWORD PTR [rcx+12], r10d
  00052	48 89 01	 mov	 QWORD PTR [rcx], rax
  00055	44 8b 05 34 08
	00 00		 mov	 r8d, DWORD PTR ?renderThread@@3VRenderThread@@A+2100
$LN20@VertexStre:

; 22   : 				pos += sizeof(A);

  0005c	41 83 c0 10	 add	 r8d, 16
  00060	44 89 05 34 08
	00 00		 mov	 DWORD PTR ?renderThread@@3VRenderThread@@A+2100, r8d

; 23   : 
; 24   : 				return mempos;

  00067	eb 02		 jmp	 SHORT $LN16@VertexStre
$LN17@VertexStre:

; 25   : 			}
; 26   : 			else
; 27   : 			{
; 28   : 				return nullptr;

  00069	33 c9		 xor	 ecx, ecx
$LN16@VertexStre:
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h

; 24   : 		if(count < size - 1)

  0006b	48 63 05 20 08
	00 00		 movsxd	 rax, DWORD PTR ?renderThread@@3VRenderThread@@A+2080
  00072	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00077	7d 11		 jge	 SHORT $LN28@VertexStre

; 25   : 		{
; 26   : 			content[count++] = object;

  00079	48 8d 15 20 00
	00 00		 lea	 rdx, OFFSET FLAT:?renderThread@@3VRenderThread@@A+32
  00080	48 89 0c c2	 mov	 QWORD PTR [rdx+rax*8], rcx
  00084	ff 05 20 08 00
	00		 inc	 DWORD PTR ?renderThread@@3VRenderThread@@A+2080
$LN28@VertexStre:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex

; 33   : 		_Mtx_destroy(&_Mtx);

  0008a	48 8d 4b 50	 lea	 rcx, QWORD PTR [rbx+80]
  0008e	e8 00 00 00 00	 call	 _Mtx_destroy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1536 : 		if (this->_Myfirst != pointer())

  00093	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00097	48 85 c9	 test	 rcx, rcx
  0009a	74 1d		 je	 SHORT $LN37@VertexStre
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0009c	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1542 : 			this->_Myfirst = pointer();

  000a1	48 c7 43 08 00
	00 00 00	 mov	 QWORD PTR [rbx+8], 0

; 1543 : 			this->_Mylast = pointer();

  000a9	48 c7 43 10 00
	00 00 00	 mov	 QWORD PTR [rbx+16], 0

; 1544 : 			this->_Myend = pointer();

  000b1	48 c7 43 18 00
	00 00 00	 mov	 QWORD PTR [rbx+24], 0
$LN37@VertexStre:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 105  : }

  000b9	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000bd	5b		 pop	 rbx
  000be	c3		 ret	 0
??1VertexStream@gfxu@@UEAA@XZ ENDP			; gfxu::VertexStream::~VertexStream
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?put@VertexStream@gfxu@@QEAAXMMM@Z
_TEXT	SEGMENT
this$ = 48
x$ = 56
y$ = 64
z$ = 72
?put@VertexStream@gfxu@@QEAAXMMM@Z PROC			; gfxu::VertexStream::put, COMDAT

; 107  : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 108  : 	vertex.x = x + translation.x;
; 109  : 	vertex.y = y + translation.y;

  00004	f3 0f 58 51 24	 addss	 xmm2, DWORD PTR [rcx+36]

; 110  : 	vertex.z = z + translation.z;

  00009	f3 0f 58 59 28	 addss	 xmm3, DWORD PTR [rcx+40]
  0000e	f3 0f 58 49 20	 addss	 xmm1, DWORD PTR [rcx+32]
  00013	48 8d 51 2c	 lea	 rdx, QWORD PTR [rcx+44]

; 111  : 
; 112  : 	vertices.push_back(vertex);

  00017	48 83 c1 08	 add	 rcx, 8
  0001b	f3 0f 11 51 28	 movss	 DWORD PTR [rcx+40], xmm2
  00020	f3 0f 11 59 2c	 movss	 DWORD PTR [rcx+44], xmm3
  00025	f3 0f 11 0a	 movss	 DWORD PTR [rdx], xmm1
  00029	e8 00 00 00 00	 call	 ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back

; 113  : 
; 114  : 	vs++;

  0002e	ff 05 00 00 00
	00		 inc	 DWORD PTR ?vs@@3HA	; vs

; 115  : }

  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
?put@VertexStream@gfxu@@QEAAXMMM@Z ENDP			; gfxu::VertexStream::put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?setUV@VertexStream@gfxu@@QEAAXMM@Z
_TEXT	SEGMENT
this$ = 8
u$ = 16
v$ = 24
?setUV@VertexStream@gfxu@@QEAAXMM@Z PROC		; gfxu::VertexStream::setUV, COMDAT

; 163  : 	vertex.u = u;

  00000	f3 0f 11 49 38	 movss	 DWORD PTR [rcx+56], xmm1

; 164  : 	vertex.v = v;

  00005	f3 0f 11 51 3c	 movss	 DWORD PTR [rcx+60], xmm2

; 165  : }

  0000a	c3		 ret	 0
?setUV@VertexStream@gfxu@@QEAAXMM@Z ENDP		; gfxu::VertexStream::setUV
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?lock@VertexStream@gfxu@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?lock@VertexStream@gfxu@@QEAAXXZ PROC			; gfxu::VertexStream::lock, COMDAT

; 182  : {

$LN11:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex

; 43   : 		_Mtx_lockX(&_Mtx);

  00004	48 83 c1 50	 add	 rcx, 80			; 00000050H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00008	e8 00 00 00 00	 call	 _Mtx_lock

; 32   : 	if (_Res != _Thrd_success)

  0000d	85 c0		 test	 eax, eax
  0000f	74 0b		 je	 SHORT $LN7@lock

; 33   : 		_Throw_C_error(_Res);

  00011	8b c8		 mov	 ecx, eax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 184  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 33   : 		_Throw_C_error(_Res);

  00017	e9 00 00 00 00	 jmp	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN7@lock:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 184  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
?lock@VertexStream@gfxu@@QEAAXXZ ENDP			; gfxu::VertexStream::lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?unlock@VertexStream@gfxu@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?unlock@VertexStream@gfxu@@QEAAXXZ PROC			; gfxu::VertexStream::unlock, COMDAT

; 187  : {

$LN11:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex

; 53   : 		_Mtx_unlockX(&_Mtx);

  00004	48 83 c1 50	 add	 rcx, 80			; 00000050H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  00008	e8 00 00 00 00	 call	 _Mtx_unlock

; 32   : 	if (_Res != _Thrd_success)

  0000d	85 c0		 test	 eax, eax
  0000f	74 0b		 je	 SHORT $LN7@unlock

; 33   : 		_Throw_C_error(_Res);

  00011	8b c8		 mov	 ecx, eax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 189  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 33   : 		_Throw_C_error(_Res);

  00017	e9 00 00 00 00	 jmp	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN7@unlock:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 189  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
?unlock@VertexStream@gfxu@@QEAAXXZ ENDP			; gfxu::VertexStream::unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?upload@VertexStream@gfxu@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 64
?upload@VertexStream@gfxu@@QEAA_NXZ PROC		; gfxu::VertexStream::upload, COMDAT

; 202  : {

$LN50:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 203  : 	if(!ready)

  0000a	80 79 4c 00	 cmp	 BYTE PTR [rcx+76], 0
  0000e	48 8b f9	 mov	 rdi, rcx
  00011	75 51		 jne	 SHORT $LN4@upload

; 204  : 	{
; 205  : 		glGenVertexArrays(1, &vao);

  00013	48 8d 51 44	 lea	 rdx, QWORD PTR [rcx+68]
  00017	b9 01 00 00 00	 mov	 ecx, 1
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGenVertexArrays

; 206  : 		glGenBuffers(1, &vbo);

  00022	48 8d 57 48	 lea	 rdx, QWORD PTR [rdi+72]
  00026	b9 01 00 00 00	 mov	 ecx, 1
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGenBuffers

; 207  : 		glBindBuffer(GL_ARRAY_BUFFER, vbo);

  00031	8b 57 48	 mov	 edx, DWORD PTR [rdi+72]
  00034	b9 92 88 00 00	 mov	 ecx, 34962		; 00008892H
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __glewBindBuffer

; 244  : 
; 245  : void VertexStream::draw(GLenum mode)
; 246  : {
; 247  : 	if(vertices.size() > 0 && upload())
; 248  : 	{
; 249  : 		Uniforms::uploadChanges();
; 250  : 		glBindVertexArray(vao);
; 251  : 		glDrawArrays(mode, 0, vertices.size());
; 252  : 	}
; 253  : }
; 254  : 
; 255  : void VertexStream::compress()
; 256  : {
; 257  : 	vertices.shrink_to_fit();
; 258  : }
; 259  : 
; 260  : bool VertexStream::isUploaded()
; 261  : {
; 262  : 	return uploaded;
; 263  : }
; 264  : 
; 265  : bool VertexStream::isReleased()
; 266  : {
; 267  : 	return released;
; 268  : }
; 269  : 
; 270  : 
; 271  : 
; 272  : bool Shader::_compile(GLuint type)
; 273  : {
; 274  : 	if(compiled)
; 275  : 	{
; 276  : 		return true;
; 277  : 	}
; 278  : 
; 279  : 	std::ifstream file(fileName);
; 280  : 
; 281  : 	if(!file.good())
; 282  : 	{
; 283  : 		file.close();
; 284  : 		return false;
; 285  : 	}
; 286  : 
; 287  : 	std::string str = std::string((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
; 288  : 	file.close();
; 289  : 	const char* strPtr = str.c_str();
; 290  : 	const int strLen = str.length();
; 291  : 
; 292  : 	if(!strLen)
; 293  : 	{
; 294  : 		return false;
; 295  : 	}
; 296  : 
; 297  : 	object = glCreateShader(type);
; 298  : 
; 299  : 	glShaderSource(object, 1, &strPtr, &strLen);
; 300  : 	glCompileShader(object);
; 301  : 
; 302  : 	GLint compileStatus;
; 303  : 
; 304  : 	glGetObjectParameterivARB(object, GL_OBJECT_COMPILE_STATUS_ARB, &compileStatus);
; 305  : 
; 306  : 	if((compileStatus == GL_FALSE) & (GLWindow::instance != NULL))
; 307  : 	{
; 308  : 		GLint len;
; 309  : 		glGetShaderiv(object, GL_INFO_LOG_LENGTH, &len);
; 310  : 		if(len > 0)
; 311  : 		{
; 312  : 			GLchar* str = new GLchar[len];
; 313  : 			glGetShaderInfoLog(object, len, nullptr, str);
; 314  : 			GLWindow::instance->postError(str, "Shader compliation error");
; 315  : 
; 316  : 			delete[] str;
; 317  : 		}
; 318  : 		else
; 319  : 		{
; 320  : 			GLWindow::instance->postError("The shader had a compilation error, but returned no log.", "Shader compliation error");
; 321  : 		}
; 322  : 
; 323  : 		return false;
; 324  : 	}
; 325  : 	
; 326  : 	compiled = true;
; 327  : 	return compiled;
; 328  : }
; 329  : 
; 330  : Shader::Shader(wstring fileName)
; 331  : 	: fileName(fileName), compiled(false)
; 332  : {
; 333  : 	
; 334  : }
; 335  : Shader::~Shader()
; 336  : {
; 337  : 	if(compiled)
; 338  : 	{
; 339  : 		glDeleteShader(object);
; 340  : 	}
; 341  : }
; 342  : 
; 343  : VertexShader::VertexShader(wstring fileName)
; 344  : 	: Shader(fileName)
; 345  : {
; 346  : 
; 347  : }
; 348  : 
; 349  : bool VertexShader::compile()
; 350  : {
; 351  : 	return _compile(GL_VERTEX_SHADER);
; 352  : }
; 353  : 
; 354  : GeometryShader::GeometryShader(wstring fileName)
; 355  : 	: Shader(fileName)
; 356  : {
; 357  : 
; 358  : }
; 359  : 
; 360  : bool GeometryShader::compile()
; 361  : {
; 362  : 	return _compile(GL_GEOMETRY_SHADER);
; 363  : }
; 364  : 
; 365  : FragmentShader::FragmentShader(wstring fileName)
; 366  : 	: Shader(fileName)
; 367  : {
; 368  : 
; 369  : }
; 370  : 
; 371  : bool FragmentShader::compile()
; 372  : {
; 373  : 	return _compile(GL_FRAGMENT_SHADER);
; 374  : }
; 375  : 
; 376  : 
; 377  : ShaderProgram::ShaderProgram(VertexShader* vShader, GeometryShader* gShader, FragmentShader* fShader)
; 378  : 	: vShader(vShader), gShader(gShader), fShader(fShader), okay(false)
; 379  : {
; 380  : 	create();
; 381  : }
; 382  : 
; 383  : ShaderProgram::~ShaderProgram()
; 384  : {
; 385  : 	glUseProgram(0);
; 386  : 	glDeleteProgram(object);
; 387  : }
; 388  : 
; 389  : bool ShaderProgram::create()
; 390  : {
; 391  : 	if(vShader || gShader || fShader)
; 392  : 	{
; 393  : 		object = glCreateProgramObjectARB();
; 394  : 
; 395  : 		if(vShader)
; 396  : 		{
; 397  : 			if(!vShader->compile())
; 398  : 			{
; 399  : 				return okay;
; 400  : 			}
; 401  : 			glAttachShader(object, vShader->object);
; 402  : 		}
; 403  : 
; 404  : 		if(gShader)
; 405  : 		{
; 406  : 			if(!gShader->compile())
; 407  : 			{
; 408  : 				return okay;
; 409  : 			}
; 410  : 			glAttachShader(object, gShader->object);
; 411  : 		}
; 412  : 
; 413  : 		if(fShader)
; 414  : 		{
; 415  : 			if(!fShader->compile())
; 416  : 			{
; 417  : 				return okay;
; 418  : 			}
; 419  : 			glAttachShader(object, fShader->object);
; 420  : 		}
; 421  : 
; 422  : 		getError("Unable to attach shaders.");
; 423  : 
; 424  : 		glLinkProgram(object);
; 425  : 		GLint linkStatus;
; 426  : 
; 427  : 		glGetObjectParameterivARB(object, GL_OBJECT_LINK_STATUS_ARB, &linkStatus);
; 428  : 
; 429  : 		if((linkStatus == GL_FALSE) & (GLWindow::instance != NULL))
; 430  : 		{
; 431  : 			GLint len;
; 432  : 			glGetProgramiv(object, GL_INFO_LOG_LENGTH, &len);
; 433  : 			if(len > 0)
; 434  : 			{
; 435  : 				GLchar* str = new GLchar[len];
; 436  : 				glGetProgramInfoLog(object, len, nullptr, str);
; 437  : 				GLWindow::instance->postError(str, "Linking error");
; 438  : 				delete[] str;
; 439  : 			}
; 440  : 			else
; 441  : 			{
; 442  : 				GLWindow::instance->postError("The program has a linking error, but returned no log.", "Linking error");
; 443  : 			}
; 444  : 
; 445  : 			GlobalThread::stop = true;
; 446  : 			return okay;
; 447  : 		}
; 448  : 		else
; 449  : 		{
; 450  : 			glUseProgram(object);
; 451  : 			modelview = glGetUniformLocation(object, "modelview");
; 452  : 			projection = glGetUniformLocation(object, "projection");
; 453  : 			const_color = glGetUniformLocation(object, "const_color");
; 454  : 			cam_pos = glGetUniformLocation(object, "cam_pos");
; 455  : 			fog_color = glGetUniformLocation(object, "fog_color");
; 456  : 			fog_dist = glGetUniformLocation(object, "fog_dist");
; 457  : 			texture1 = glGetUniformLocation(object, "texture_1");
; 458  : 		
; 459  : 			if(texture1 >= 0)
; 460  : 			{
; 461  : 				glUniform1i(texture1, 0);
; 462  : 			}
; 463  : 
; 464  : 			okay = true;
; 465  : 			return okay;
; 466  : 		}
; 467  : 	}
; 468  : 
; 469  : 	return false;
; 470  : }
; 471  : 
; 472  : void ShaderProgram::bind()
; 473  : {
; 474  : 	glUseProgram(object);
; 475  : 	gfxu::getError();
; 476  : 	current = this;
; 477  : 
; 478  : 	Uniforms::setForceUpload();
; 479  : }
; 480  : 
; 481  : ShaderProgram* ShaderProgram::current;
; 482  : 
; 483  : 
; 484  : 
; 485  : MatrixStack::MatrixStack()
; 486  : {
; 487  : 	clear();
; 488  : }
; 489  : 
; 490  : geom::Matrix MatrixStack::unstack()
; 491  : {
; 492  : 	std::stack<geom::Matrix> stack2 = stack;
; 493  : 	geom::Matrix mat = geom::Matrix::identity();
; 494  : 	while(!stack2.empty())
; 495  : 	{
; 496  : 		mat = stack2.top() * mat;
; 497  : 		stack2.pop();
; 498  : 	}
; 499  : 
; 500  : 	return mat;
; 501  : }
; 502  : 
; 503  : void MatrixStack::push(geom::Matrix mat)
; 504  : {
; 505  : 	stack.push(mat);
; 506  : 	topmost = topmost * mat;
; 507  : 	changed = true;
; 508  : }
; 509  : 
; 510  : void MatrixStack::mult(geom::Matrix mat)
; 511  : {
; 512  : 	stack.top() = stack.top() * mat;
; 513  : 	topmost = topmost * mat;
; 514  : 	changed = true;
; 515  : }
; 516  : 
; 517  : void MatrixStack::identity()
; 518  : {
; 519  : 	stack.top() = geom::Matrix::identity();
; 520  : 	topmost = unstack();
; 521  : 	changed = true;
; 522  : }
; 523  : 
; 524  : void MatrixStack::pop()
; 525  : {
; 526  : 	stack.pop();
; 527  : 	topmost = unstack();
; 528  : 	changed = true;
; 529  : }
; 530  : 
; 531  : void MatrixStack::clear()
; 532  : {
; 533  : 	while(!stack.empty())
; 534  : 	{
; 535  : 		stack.pop();
; 536  : 	}
; 537  : 	stack.push(geom::Matrix::identity());
; 538  : 	topmost = geom::Matrix::identity();
; 539  : 	changed = true;
; 540  : }
; 541  : 
; 542  : const geom::Matrix MatrixStack::getTopmost()
; 543  : {
; 544  : 	return topmost;
; 545  : }
; 546  : 
; 547  : 
; 548  : 
; 549  : void Uniforms::setColor(float r, float g, float b, float a)
; 550  : {
; 551  : 	color.set(geom::Vector(r, g, b, a));
; 552  : }
; 553  : 
; 554  : void Uniforms::setFogColor(float r, float g, float b, float a)
; 555  : {
; 556  : 	fogColor.set(geom::Vector(r, g, b, a));
; 557  : }
; 558  : 
; 559  : void Uniforms::uploadChanges()
; 560  : {
; 561  : 	if(forceUpload | (MMS.changed & (ShaderProgram::current->modelview >= 0)))
; 562  : 	{
; 563  : 		glUniformMatrix4fv(ShaderProgram::current->modelview, 1, false, MMS.getTopmost().data);
; 564  : 		MMS.changed = false;
; 565  : 	}
; 566  : 
; 567  : 	if(forceUpload | (PMS.changed & (ShaderProgram::current->projection >= 0)))
; 568  : 	{
; 569  : 		glUniformMatrix4fv(ShaderProgram::current->projection, 1, false, PMS.getTopmost().data);
; 570  : 		PMS.changed = false;
; 571  : 	}
; 572  : 
; 573  : 	if(forceUpload | (color.changed & (ShaderProgram::current->const_color >= 0)))
; 574  : 	{
; 575  : 		geom::Vector vec = color.get();
; 576  : 		glUniform4f(ShaderProgram::current->const_color, vec.x, vec.y, vec.z, vec.w);
; 577  : 	}
; 578  : 
; 579  : 	if(forceUpload | (camPos.changed & (ShaderProgram::current->cam_pos >= 0)))
; 580  : 	{
; 581  : 		geom::Vector vec = camPos.get();
; 582  : 		glUniform4f(ShaderProgram::current->cam_pos, vec.x, vec.y, vec.z, vec.w);
; 583  : 	}
; 584  : 
; 585  : 	if(forceUpload | (fogColor.changed & (ShaderProgram::current->fog_color >= 0)))
; 586  : 	{
; 587  : 		geom::Vector vec = fogColor.get();
; 588  : 		glUniform4f(ShaderProgram::current->fog_color, vec.x, vec.y, vec.z, vec.w);
; 589  : 	}
; 590  : 
; 591  : 	if(forceUpload | (fogDist.changed & (ShaderProgram::current->fog_dist >= 0)))
; 592  : 	{
; 593  : 		glUniform1f(ShaderProgram::current->fog_dist, fogDist.get());
; 594  : 	}
; 595  : }
; 596  : 
; 597  : void Uniforms::reset()
; 598  : {
; 599  : 	MMS.clear();
; 600  : 	PMS.clear();
; 601  : }
; 602  : 
; 603  : void Uniforms::setForceUpload()
; 604  : {
; 605  : 	MMS.changed = PMS.changed = true;
; 606  : }
; 607  : 
; 608  : bool Uniforms::forceUpload = false;
; 609  : MatrixStack Uniforms::MMS;
; 610  : MatrixStack Uniforms::PMS;
; 611  : Uniform<geom::Vector> Uniforms::color;
; 612  : Uniform<geom::Vector> Uniforms::camPos;
; 613  : Uniform<geom::Vector> Uniforms::fogColor;
; 614  : Uniform<float> Uniforms::fogDist;
; 615  : 
; 616  : 
; 617  : 
; 618  : Texture2D::Texture2D()
; 619  : 	: data(nullptr), width(0), height(0), object(0), magFilter(GL_LINEAR), minFilter(GL_LINEAR), wrap(GL_REPEAT), mipmapped(false), uploaded(false)
; 620  : {
; 621  : 
; 622  : }
; 623  : 
; 624  : Texture2D::Texture2D(unsigned int width, unsigned int height, TEXTURE_PARAMETER magFilter, TEXTURE_PARAMETER minFilter, TEXTURE_PARAMETER wrap, bool mipmapped)
; 625  : 	: width(width), height(height), data(new unsigned char[width * height * 4]), object(0), magFilter(magFilter), minFilter(minFilter), wrap(wrap), mipmapped(mipmapped), uploaded(false)
; 626  : {
; 627  : 
; 628  : }
; 629  : 
; 630  : Texture2D::Texture2D(unsigned int width, unsigned int height, Noise::NoiseGenerator2D* r, Noise::NoiseGenerator2D* g, Noise::NoiseGenerator2D* b, Noise::NoiseGenerator2D* a)
; 631  : 	: width(width), height(height), data(new unsigned char[width * height* 4]), object(0), magFilter(GL_LINEAR), minFilter(GL_LINEAR), wrap(GL_CLAMP_TO_EDGE), mipmapped(false), uploaded(false)
; 632  : {
; 633  : 	for(unsigned int i = 0; i < width; i++)
; 634  : 	{
; 635  : 		for(unsigned int j = 0; j < height; j++)
; 636  : 		{
; 637  : 			data[(i + j * width) * 4] = (unsigned char)((r == nullptr ? 1.0f : r->getNoise(i, j)) * 255.0f);
; 638  : 			data[(i + j * width) * 4 + 1] = (unsigned char)((g == nullptr ? 1.0f : g->getNoise(i, j)) * 255.0f);
; 639  : 			data[(i + j * width) * 4 + 2] = (unsigned char)((b == nullptr ? 1.0f : b->getNoise(i, j)) * 255.0f);
; 640  : 			data[(i + j * width) * 4 + 3] = (unsigned char)((a == nullptr ? 1.0f : a->getNoise(i, j)) * 255.0f);
; 641  : 		}
; 642  : 	}
; 643  : }
; 644  : 
; 645  : Texture2D::Texture2D(wstring fileName)
; 646  : 	: object(0), magFilter(GL_LINEAR), minFilter(GL_LINEAR), wrap(GL_REPEAT), mipmapped(false), uploaded(false)
; 647  : {
; 648  : 	init(fileName);
; 649  : }
; 650  : 
; 651  : Texture2D::Texture2D(wstring fileName, TEXTURE_PARAMETER magFilter, TEXTURE_PARAMETER minFilter, TEXTURE_PARAMETER wrap, bool mipmapped)
; 652  : 	: object(0), magFilter(magFilter), minFilter(minFilter), wrap(wrap), mipmapped(mipmapped), uploaded(false)
; 653  : {
; 654  : 	init(fileName);
; 655  : }
; 656  : 
; 657  : void Texture2D::init(wstring fileName)
; 658  : {
; 659  : 	data = IOUtil::readPNG(fileName, width, height);
; 660  : }
; 661  : 
; 662  : Texture2D::~Texture2D()
; 663  : {
; 664  : 	if(data != nullptr)
; 665  : 	{
; 666  : 		delete[] data;
; 667  : 	}
; 668  : 
; 669  : 	if(uploaded)
; 670  : 	{
; 671  : 		glDeleteTextures(1, &object);
; 672  : 	}
; 673  : }
; 674  : 
; 675  : bool Texture2D::upload()
; 676  : {
; 677  : 	glGenTextures(1, &object);
; 678  : 	glBindTexture(GL_TEXTURE_2D, object);
; 679  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, minFilter);
; 680  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, magFilter);
; 681  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, wrap);
; 682  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, wrap);
; 683  : 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
; 684  : 	if(mipmapped)
; 685  : 	{
; 686  : 		glGenerateMipmap(GL_TEXTURE_2D);
; 687  : 	}
; 688  : 
; 689  : 	uploaded = true;
; 690  : 
; 691  : 	return true;
; 692  : }
; 693  : 
; 694  : void Texture2D::bind()
; 695  : {
; 696  : 	if(!uploaded)
; 697  : 	{
; 698  : 		if(!upload())
; 699  : 		{
; 700  : 			return;
; 701  : 		}
; 702  : 	}
; 703  : 	else
; 704  : 	{
; 705  : 		glBindTexture(GL_TEXTURE_2D, object);
; 706  : 	}
; 707  : }
; 708  : 
; 709  : TiledTexture::TiledTexture()
; 710  : 	: Texture2D()
; 711  : {
; 712  : 
; 713  : }
; 714  : 
; 715  : TiledTexture::~TiledTexture()
; 716  : {
; 717  : 
; 718  : }
; 719  : 
; 720  : TiledTexture::Icon* TiledTexture::icon(wstring file)
; 721  : {
; 722  : 	auto iconIter = icons.find(file);
; 723  : 
; 724  : 	if(iconIter == icons.end())
; 725  : 	{
; 726  : 		Icon* icon = new TiledTexture::Icon(file);
; 727  : 
; 728  : 		icons[file] = icon;
; 729  : 		return icon;
; 730  : 	}
; 731  : 	else
; 732  : 	{
; 733  : 		return iconIter->second;
; 734  : 	}
; 735  : }
; 736  : 
; 737  : TiledTexture::Icon::Icon(wstring file)
; 738  : 	: file(file), x(0), y(0)
; 739  : {
; 740  : 	data = IOUtil::readPNG(file, width, height);
; 741  : }
; 742  : 
; 743  : TiledTexture::Icon::~Icon()
; 744  : {
; 745  : 	delete[] data;
; 746  : }
; 747  : 
; 748  : 
; 749  : 
; 750  : bool gfxu::getError(const char* caption)
; 751  : {
; 752  : 	int error = glGetError();

  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glGetError

; 753  : 	if(error != GL_NO_ERROR)

  00045	85 c0		 test	 eax, eax
  00047	74 17		 je	 SHORT $LN8@upload

; 754  : 	{
; 755  : 		const char* errorString = (const char*)gluErrorString(error);

  00049	8b c8		 mov	 ecx, eax
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_gluErrorString

; 756  : 		GLWindow::instance->postError(errorString, caption);

  00051	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG4294928265
  00058	48 8b d0	 mov	 rdx, rax
  0005b	e8 00 00 00 00	 call	 ?postError@GLWindow@@QEAAXPEBD0@Z ; GLWindow::postError
$LN8@upload:

; 208  : 
; 209  : 		getError("Vertex stream upload error");
; 210  : 
; 211  : 		ready = true;

  00060	c6 47 4c 01	 mov	 BYTE PTR [rdi+76], 1
$LN4@upload:

; 212  : 	}
; 213  : 
; 214  : 	if(!isUploaded())

  00064	80 7f 4d 00	 cmp	 BYTE PTR [rdi+77], 0
  00068	0f 85 57 01 00
	00		 jne	 $LN45@upload
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  0006e	48 8d 4f 50	 lea	 rcx, QWORD PTR [rdi+80]
  00072	e8 00 00 00 00	 call	 _Mtx_lock

; 32   : 	if (_Res != _Thrd_success)

  00077	85 c0		 test	 eax, eax
  00079	74 07		 je	 SHORT $LN19@upload

; 33   : 		_Throw_C_error(_Res);

  0007b	8b c8		 mov	 ecx, eax
  0007d	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN19@upload:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 218  : 		glBindVertexArray(vao);

  00082	8b 4f 44	 mov	 ecx, DWORD PTR [rdi+68]
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __glewBindVertexArray

; 219  : 		glBindBuffer(GL_ARRAY_BUFFER, vbo);

  0008b	8b 57 48	 mov	 edx, DWORD PTR [rdi+72]
  0008e	b9 92 88 00 00	 mov	 ecx, 34962		; 00008892H
  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __glewBindBuffer
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00099	48 8b 57 10	 mov	 rdx, QWORD PTR [rdi+16]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 220  : 		glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(VertexUVRGBA), (const void*)&vertices[0], GL_STATIC_DRAW);

  0009d	4c 8b 47 08	 mov	 r8, QWORD PTR [rdi+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  000a1	48 2b 57 08	 sub	 rdx, QWORD PTR [rdi+8]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 220  : 		glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(VertexUVRGBA), (const void*)&vertices[0], GL_STATIC_DRAW);

  000a5	41 b9 e4 88 00
	00		 mov	 r9d, 35044		; 000088e4H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  000ab	48 b8 ab aa aa
	aa aa aa aa 2a	 mov	 rax, 3074457345618258603 ; 2aaaaaaaaaaaaaabH
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 220  : 		glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(VertexUVRGBA), (const void*)&vertices[0], GL_STATIC_DRAW);

  000b5	41 8d 49 ae	 lea	 ecx, QWORD PTR [r9-82]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  000b9	48 f7 ea	 imul	 rdx
  000bc	48 c1 fa 02	 sar	 rdx, 2
  000c0	48 8b c2	 mov	 rax, rdx
  000c3	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  000c7	48 03 d0	 add	 rdx, rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 220  : 		glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(VertexUVRGBA), (const void*)&vertices[0], GL_STATIC_DRAW);

  000ca	48 8d 14 52	 lea	 rdx, QWORD PTR [rdx+rdx*2]
  000ce	48 c1 e2 03	 shl	 rdx, 3
  000d2	ff 15 00 00 00
	00		 call	 QWORD PTR __glewBufferData

; 221  : 		glEnableVertexAttribArray(0);

  000d8	33 c9		 xor	 ecx, ecx
  000da	ff 15 00 00 00
	00		 call	 QWORD PTR __glewEnableVertexAttribArray

; 222  : 		glEnableVertexAttribArray(1);

  000e0	b9 01 00 00 00	 mov	 ecx, 1
  000e5	ff 15 00 00 00
	00		 call	 QWORD PTR __glewEnableVertexAttribArray

; 223  : 		glEnableVertexAttribArray(2);

  000eb	b9 02 00 00 00	 mov	 ecx, 2
  000f0	ff 15 00 00 00
	00		 call	 QWORD PTR __glewEnableVertexAttribArray

; 224  : 		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(VertexUVRGBA), (GLvoid*)0);

  000f6	45 33 c9	 xor	 r9d, r9d
  000f9	33 c9		 xor	 ecx, ecx
  000fb	41 8d 51 03	 lea	 edx, QWORD PTR [r9+3]
  000ff	41 b8 06 14 00
	00		 mov	 r8d, 5126		; 00001406H
  00105	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0010e	c7 44 24 20 18
	00 00 00	 mov	 DWORD PTR [rsp+32], 24
  00116	ff 15 00 00 00
	00		 call	 QWORD PTR __glewVertexAttribPointer

; 225  : 		glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, sizeof(VertexUVRGBA), (GLvoid*)offsetof(VertexUVRGBA, u));

  0011c	45 33 c9	 xor	 r9d, r9d
  0011f	41 8d 51 02	 lea	 edx, QWORD PTR [r9+2]
  00123	41 b8 06 14 00
	00		 mov	 r8d, 5126		; 00001406H
  00129	48 c7 44 24 28
	0c 00 00 00	 mov	 QWORD PTR [rsp+40], 12
  00132	8d 4a ff	 lea	 ecx, QWORD PTR [rdx-1]
  00135	c7 44 24 20 18
	00 00 00	 mov	 DWORD PTR [rsp+32], 24
  0013d	ff 15 00 00 00
	00		 call	 QWORD PTR __glewVertexAttribPointer

; 226  : 		//glVertexAttribPointer(2, 4, GL_UNSIGNED_SHORT, GL_TRUE, sizeof(VertexUVRGBA), (GLvoid*)offsetof(VertexUVRGBA, r));
; 227  : 		glVertexAttribPointer(2, 4, GL_UNSIGNED_BYTE, GL_TRUE, sizeof(VertexUVRGBA), (GLvoid*)offsetof(VertexUVRGBA, r));

  00143	ba 04 00 00 00	 mov	 edx, 4
  00148	41 b1 01	 mov	 r9b, 1
  0014b	8d 4a fe	 lea	 ecx, QWORD PTR [rdx-2]
  0014e	41 b8 01 14 00
	00		 mov	 r8d, 5121		; 00001401H
  00154	48 c7 44 24 28
	14 00 00 00	 mov	 QWORD PTR [rsp+40], 20
  0015d	c7 44 24 20 18
	00 00 00	 mov	 DWORD PTR [rsp+32], 24
  00165	ff 15 00 00 00
	00		 call	 QWORD PTR __glewVertexAttribPointer

; 244  : 
; 245  : void VertexStream::draw(GLenum mode)
; 246  : {
; 247  : 	if(vertices.size() > 0 && upload())
; 248  : 	{
; 249  : 		Uniforms::uploadChanges();
; 250  : 		glBindVertexArray(vao);
; 251  : 		glDrawArrays(mode, 0, vertices.size());
; 252  : 	}
; 253  : }
; 254  : 
; 255  : void VertexStream::compress()
; 256  : {
; 257  : 	vertices.shrink_to_fit();
; 258  : }
; 259  : 
; 260  : bool VertexStream::isUploaded()
; 261  : {
; 262  : 	return uploaded;
; 263  : }
; 264  : 
; 265  : bool VertexStream::isReleased()
; 266  : {
; 267  : 	return released;
; 268  : }
; 269  : 
; 270  : 
; 271  : 
; 272  : bool Shader::_compile(GLuint type)
; 273  : {
; 274  : 	if(compiled)
; 275  : 	{
; 276  : 		return true;
; 277  : 	}
; 278  : 
; 279  : 	std::ifstream file(fileName);
; 280  : 
; 281  : 	if(!file.good())
; 282  : 	{
; 283  : 		file.close();
; 284  : 		return false;
; 285  : 	}
; 286  : 
; 287  : 	std::string str = std::string((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
; 288  : 	file.close();
; 289  : 	const char* strPtr = str.c_str();
; 290  : 	const int strLen = str.length();
; 291  : 
; 292  : 	if(!strLen)
; 293  : 	{
; 294  : 		return false;
; 295  : 	}
; 296  : 
; 297  : 	object = glCreateShader(type);
; 298  : 
; 299  : 	glShaderSource(object, 1, &strPtr, &strLen);
; 300  : 	glCompileShader(object);
; 301  : 
; 302  : 	GLint compileStatus;
; 303  : 
; 304  : 	glGetObjectParameterivARB(object, GL_OBJECT_COMPILE_STATUS_ARB, &compileStatus);
; 305  : 
; 306  : 	if((compileStatus == GL_FALSE) & (GLWindow::instance != NULL))
; 307  : 	{
; 308  : 		GLint len;
; 309  : 		glGetShaderiv(object, GL_INFO_LOG_LENGTH, &len);
; 310  : 		if(len > 0)
; 311  : 		{
; 312  : 			GLchar* str = new GLchar[len];
; 313  : 			glGetShaderInfoLog(object, len, nullptr, str);
; 314  : 			GLWindow::instance->postError(str, "Shader compliation error");
; 315  : 
; 316  : 			delete[] str;
; 317  : 		}
; 318  : 		else
; 319  : 		{
; 320  : 			GLWindow::instance->postError("The shader had a compilation error, but returned no log.", "Shader compliation error");
; 321  : 		}
; 322  : 
; 323  : 		return false;
; 324  : 	}
; 325  : 	
; 326  : 	compiled = true;
; 327  : 	return compiled;
; 328  : }
; 329  : 
; 330  : Shader::Shader(wstring fileName)
; 331  : 	: fileName(fileName), compiled(false)
; 332  : {
; 333  : 	
; 334  : }
; 335  : Shader::~Shader()
; 336  : {
; 337  : 	if(compiled)
; 338  : 	{
; 339  : 		glDeleteShader(object);
; 340  : 	}
; 341  : }
; 342  : 
; 343  : VertexShader::VertexShader(wstring fileName)
; 344  : 	: Shader(fileName)
; 345  : {
; 346  : 
; 347  : }
; 348  : 
; 349  : bool VertexShader::compile()
; 350  : {
; 351  : 	return _compile(GL_VERTEX_SHADER);
; 352  : }
; 353  : 
; 354  : GeometryShader::GeometryShader(wstring fileName)
; 355  : 	: Shader(fileName)
; 356  : {
; 357  : 
; 358  : }
; 359  : 
; 360  : bool GeometryShader::compile()
; 361  : {
; 362  : 	return _compile(GL_GEOMETRY_SHADER);
; 363  : }
; 364  : 
; 365  : FragmentShader::FragmentShader(wstring fileName)
; 366  : 	: Shader(fileName)
; 367  : {
; 368  : 
; 369  : }
; 370  : 
; 371  : bool FragmentShader::compile()
; 372  : {
; 373  : 	return _compile(GL_FRAGMENT_SHADER);
; 374  : }
; 375  : 
; 376  : 
; 377  : ShaderProgram::ShaderProgram(VertexShader* vShader, GeometryShader* gShader, FragmentShader* fShader)
; 378  : 	: vShader(vShader), gShader(gShader), fShader(fShader), okay(false)
; 379  : {
; 380  : 	create();
; 381  : }
; 382  : 
; 383  : ShaderProgram::~ShaderProgram()
; 384  : {
; 385  : 	glUseProgram(0);
; 386  : 	glDeleteProgram(object);
; 387  : }
; 388  : 
; 389  : bool ShaderProgram::create()
; 390  : {
; 391  : 	if(vShader || gShader || fShader)
; 392  : 	{
; 393  : 		object = glCreateProgramObjectARB();
; 394  : 
; 395  : 		if(vShader)
; 396  : 		{
; 397  : 			if(!vShader->compile())
; 398  : 			{
; 399  : 				return okay;
; 400  : 			}
; 401  : 			glAttachShader(object, vShader->object);
; 402  : 		}
; 403  : 
; 404  : 		if(gShader)
; 405  : 		{
; 406  : 			if(!gShader->compile())
; 407  : 			{
; 408  : 				return okay;
; 409  : 			}
; 410  : 			glAttachShader(object, gShader->object);
; 411  : 		}
; 412  : 
; 413  : 		if(fShader)
; 414  : 		{
; 415  : 			if(!fShader->compile())
; 416  : 			{
; 417  : 				return okay;
; 418  : 			}
; 419  : 			glAttachShader(object, fShader->object);
; 420  : 		}
; 421  : 
; 422  : 		getError("Unable to attach shaders.");
; 423  : 
; 424  : 		glLinkProgram(object);
; 425  : 		GLint linkStatus;
; 426  : 
; 427  : 		glGetObjectParameterivARB(object, GL_OBJECT_LINK_STATUS_ARB, &linkStatus);
; 428  : 
; 429  : 		if((linkStatus == GL_FALSE) & (GLWindow::instance != NULL))
; 430  : 		{
; 431  : 			GLint len;
; 432  : 			glGetProgramiv(object, GL_INFO_LOG_LENGTH, &len);
; 433  : 			if(len > 0)
; 434  : 			{
; 435  : 				GLchar* str = new GLchar[len];
; 436  : 				glGetProgramInfoLog(object, len, nullptr, str);
; 437  : 				GLWindow::instance->postError(str, "Linking error");
; 438  : 				delete[] str;
; 439  : 			}
; 440  : 			else
; 441  : 			{
; 442  : 				GLWindow::instance->postError("The program has a linking error, but returned no log.", "Linking error");
; 443  : 			}
; 444  : 
; 445  : 			GlobalThread::stop = true;
; 446  : 			return okay;
; 447  : 		}
; 448  : 		else
; 449  : 		{
; 450  : 			glUseProgram(object);
; 451  : 			modelview = glGetUniformLocation(object, "modelview");
; 452  : 			projection = glGetUniformLocation(object, "projection");
; 453  : 			const_color = glGetUniformLocation(object, "const_color");
; 454  : 			cam_pos = glGetUniformLocation(object, "cam_pos");
; 455  : 			fog_color = glGetUniformLocation(object, "fog_color");
; 456  : 			fog_dist = glGetUniformLocation(object, "fog_dist");
; 457  : 			texture1 = glGetUniformLocation(object, "texture_1");
; 458  : 		
; 459  : 			if(texture1 >= 0)
; 460  : 			{
; 461  : 				glUniform1i(texture1, 0);
; 462  : 			}
; 463  : 
; 464  : 			okay = true;
; 465  : 			return okay;
; 466  : 		}
; 467  : 	}
; 468  : 
; 469  : 	return false;
; 470  : }
; 471  : 
; 472  : void ShaderProgram::bind()
; 473  : {
; 474  : 	glUseProgram(object);
; 475  : 	gfxu::getError();
; 476  : 	current = this;
; 477  : 
; 478  : 	Uniforms::setForceUpload();
; 479  : }
; 480  : 
; 481  : ShaderProgram* ShaderProgram::current;
; 482  : 
; 483  : 
; 484  : 
; 485  : MatrixStack::MatrixStack()
; 486  : {
; 487  : 	clear();
; 488  : }
; 489  : 
; 490  : geom::Matrix MatrixStack::unstack()
; 491  : {
; 492  : 	std::stack<geom::Matrix> stack2 = stack;
; 493  : 	geom::Matrix mat = geom::Matrix::identity();
; 494  : 	while(!stack2.empty())
; 495  : 	{
; 496  : 		mat = stack2.top() * mat;
; 497  : 		stack2.pop();
; 498  : 	}
; 499  : 
; 500  : 	return mat;
; 501  : }
; 502  : 
; 503  : void MatrixStack::push(geom::Matrix mat)
; 504  : {
; 505  : 	stack.push(mat);
; 506  : 	topmost = topmost * mat;
; 507  : 	changed = true;
; 508  : }
; 509  : 
; 510  : void MatrixStack::mult(geom::Matrix mat)
; 511  : {
; 512  : 	stack.top() = stack.top() * mat;
; 513  : 	topmost = topmost * mat;
; 514  : 	changed = true;
; 515  : }
; 516  : 
; 517  : void MatrixStack::identity()
; 518  : {
; 519  : 	stack.top() = geom::Matrix::identity();
; 520  : 	topmost = unstack();
; 521  : 	changed = true;
; 522  : }
; 523  : 
; 524  : void MatrixStack::pop()
; 525  : {
; 526  : 	stack.pop();
; 527  : 	topmost = unstack();
; 528  : 	changed = true;
; 529  : }
; 530  : 
; 531  : void MatrixStack::clear()
; 532  : {
; 533  : 	while(!stack.empty())
; 534  : 	{
; 535  : 		stack.pop();
; 536  : 	}
; 537  : 	stack.push(geom::Matrix::identity());
; 538  : 	topmost = geom::Matrix::identity();
; 539  : 	changed = true;
; 540  : }
; 541  : 
; 542  : const geom::Matrix MatrixStack::getTopmost()
; 543  : {
; 544  : 	return topmost;
; 545  : }
; 546  : 
; 547  : 
; 548  : 
; 549  : void Uniforms::setColor(float r, float g, float b, float a)
; 550  : {
; 551  : 	color.set(geom::Vector(r, g, b, a));
; 552  : }
; 553  : 
; 554  : void Uniforms::setFogColor(float r, float g, float b, float a)
; 555  : {
; 556  : 	fogColor.set(geom::Vector(r, g, b, a));
; 557  : }
; 558  : 
; 559  : void Uniforms::uploadChanges()
; 560  : {
; 561  : 	if(forceUpload | (MMS.changed & (ShaderProgram::current->modelview >= 0)))
; 562  : 	{
; 563  : 		glUniformMatrix4fv(ShaderProgram::current->modelview, 1, false, MMS.getTopmost().data);
; 564  : 		MMS.changed = false;
; 565  : 	}
; 566  : 
; 567  : 	if(forceUpload | (PMS.changed & (ShaderProgram::current->projection >= 0)))
; 568  : 	{
; 569  : 		glUniformMatrix4fv(ShaderProgram::current->projection, 1, false, PMS.getTopmost().data);
; 570  : 		PMS.changed = false;
; 571  : 	}
; 572  : 
; 573  : 	if(forceUpload | (color.changed & (ShaderProgram::current->const_color >= 0)))
; 574  : 	{
; 575  : 		geom::Vector vec = color.get();
; 576  : 		glUniform4f(ShaderProgram::current->const_color, vec.x, vec.y, vec.z, vec.w);
; 577  : 	}
; 578  : 
; 579  : 	if(forceUpload | (camPos.changed & (ShaderProgram::current->cam_pos >= 0)))
; 580  : 	{
; 581  : 		geom::Vector vec = camPos.get();
; 582  : 		glUniform4f(ShaderProgram::current->cam_pos, vec.x, vec.y, vec.z, vec.w);
; 583  : 	}
; 584  : 
; 585  : 	if(forceUpload | (fogColor.changed & (ShaderProgram::current->fog_color >= 0)))
; 586  : 	{
; 587  : 		geom::Vector vec = fogColor.get();
; 588  : 		glUniform4f(ShaderProgram::current->fog_color, vec.x, vec.y, vec.z, vec.w);
; 589  : 	}
; 590  : 
; 591  : 	if(forceUpload | (fogDist.changed & (ShaderProgram::current->fog_dist >= 0)))
; 592  : 	{
; 593  : 		glUniform1f(ShaderProgram::current->fog_dist, fogDist.get());
; 594  : 	}
; 595  : }
; 596  : 
; 597  : void Uniforms::reset()
; 598  : {
; 599  : 	MMS.clear();
; 600  : 	PMS.clear();
; 601  : }
; 602  : 
; 603  : void Uniforms::setForceUpload()
; 604  : {
; 605  : 	MMS.changed = PMS.changed = true;
; 606  : }
; 607  : 
; 608  : bool Uniforms::forceUpload = false;
; 609  : MatrixStack Uniforms::MMS;
; 610  : MatrixStack Uniforms::PMS;
; 611  : Uniform<geom::Vector> Uniforms::color;
; 612  : Uniform<geom::Vector> Uniforms::camPos;
; 613  : Uniform<geom::Vector> Uniforms::fogColor;
; 614  : Uniform<float> Uniforms::fogDist;
; 615  : 
; 616  : 
; 617  : 
; 618  : Texture2D::Texture2D()
; 619  : 	: data(nullptr), width(0), height(0), object(0), magFilter(GL_LINEAR), minFilter(GL_LINEAR), wrap(GL_REPEAT), mipmapped(false), uploaded(false)
; 620  : {
; 621  : 
; 622  : }
; 623  : 
; 624  : Texture2D::Texture2D(unsigned int width, unsigned int height, TEXTURE_PARAMETER magFilter, TEXTURE_PARAMETER minFilter, TEXTURE_PARAMETER wrap, bool mipmapped)
; 625  : 	: width(width), height(height), data(new unsigned char[width * height * 4]), object(0), magFilter(magFilter), minFilter(minFilter), wrap(wrap), mipmapped(mipmapped), uploaded(false)
; 626  : {
; 627  : 
; 628  : }
; 629  : 
; 630  : Texture2D::Texture2D(unsigned int width, unsigned int height, Noise::NoiseGenerator2D* r, Noise::NoiseGenerator2D* g, Noise::NoiseGenerator2D* b, Noise::NoiseGenerator2D* a)
; 631  : 	: width(width), height(height), data(new unsigned char[width * height* 4]), object(0), magFilter(GL_LINEAR), minFilter(GL_LINEAR), wrap(GL_CLAMP_TO_EDGE), mipmapped(false), uploaded(false)
; 632  : {
; 633  : 	for(unsigned int i = 0; i < width; i++)
; 634  : 	{
; 635  : 		for(unsigned int j = 0; j < height; j++)
; 636  : 		{
; 637  : 			data[(i + j * width) * 4] = (unsigned char)((r == nullptr ? 1.0f : r->getNoise(i, j)) * 255.0f);
; 638  : 			data[(i + j * width) * 4 + 1] = (unsigned char)((g == nullptr ? 1.0f : g->getNoise(i, j)) * 255.0f);
; 639  : 			data[(i + j * width) * 4 + 2] = (unsigned char)((b == nullptr ? 1.0f : b->getNoise(i, j)) * 255.0f);
; 640  : 			data[(i + j * width) * 4 + 3] = (unsigned char)((a == nullptr ? 1.0f : a->getNoise(i, j)) * 255.0f);
; 641  : 		}
; 642  : 	}
; 643  : }
; 644  : 
; 645  : Texture2D::Texture2D(wstring fileName)
; 646  : 	: object(0), magFilter(GL_LINEAR), minFilter(GL_LINEAR), wrap(GL_REPEAT), mipmapped(false), uploaded(false)
; 647  : {
; 648  : 	init(fileName);
; 649  : }
; 650  : 
; 651  : Texture2D::Texture2D(wstring fileName, TEXTURE_PARAMETER magFilter, TEXTURE_PARAMETER minFilter, TEXTURE_PARAMETER wrap, bool mipmapped)
; 652  : 	: object(0), magFilter(magFilter), minFilter(minFilter), wrap(wrap), mipmapped(mipmapped), uploaded(false)
; 653  : {
; 654  : 	init(fileName);
; 655  : }
; 656  : 
; 657  : void Texture2D::init(wstring fileName)
; 658  : {
; 659  : 	data = IOUtil::readPNG(fileName, width, height);
; 660  : }
; 661  : 
; 662  : Texture2D::~Texture2D()
; 663  : {
; 664  : 	if(data != nullptr)
; 665  : 	{
; 666  : 		delete[] data;
; 667  : 	}
; 668  : 
; 669  : 	if(uploaded)
; 670  : 	{
; 671  : 		glDeleteTextures(1, &object);
; 672  : 	}
; 673  : }
; 674  : 
; 675  : bool Texture2D::upload()
; 676  : {
; 677  : 	glGenTextures(1, &object);
; 678  : 	glBindTexture(GL_TEXTURE_2D, object);
; 679  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, minFilter);
; 680  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, magFilter);
; 681  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, wrap);
; 682  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, wrap);
; 683  : 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
; 684  : 	if(mipmapped)
; 685  : 	{
; 686  : 		glGenerateMipmap(GL_TEXTURE_2D);
; 687  : 	}
; 688  : 
; 689  : 	uploaded = true;
; 690  : 
; 691  : 	return true;
; 692  : }
; 693  : 
; 694  : void Texture2D::bind()
; 695  : {
; 696  : 	if(!uploaded)
; 697  : 	{
; 698  : 		if(!upload())
; 699  : 		{
; 700  : 			return;
; 701  : 		}
; 702  : 	}
; 703  : 	else
; 704  : 	{
; 705  : 		glBindTexture(GL_TEXTURE_2D, object);
; 706  : 	}
; 707  : }
; 708  : 
; 709  : TiledTexture::TiledTexture()
; 710  : 	: Texture2D()
; 711  : {
; 712  : 
; 713  : }
; 714  : 
; 715  : TiledTexture::~TiledTexture()
; 716  : {
; 717  : 
; 718  : }
; 719  : 
; 720  : TiledTexture::Icon* TiledTexture::icon(wstring file)
; 721  : {
; 722  : 	auto iconIter = icons.find(file);
; 723  : 
; 724  : 	if(iconIter == icons.end())
; 725  : 	{
; 726  : 		Icon* icon = new TiledTexture::Icon(file);
; 727  : 
; 728  : 		icons[file] = icon;
; 729  : 		return icon;
; 730  : 	}
; 731  : 	else
; 732  : 	{
; 733  : 		return iconIter->second;
; 734  : 	}
; 735  : }
; 736  : 
; 737  : TiledTexture::Icon::Icon(wstring file)
; 738  : 	: file(file), x(0), y(0)
; 739  : {
; 740  : 	data = IOUtil::readPNG(file, width, height);
; 741  : }
; 742  : 
; 743  : TiledTexture::Icon::~Icon()
; 744  : {
; 745  : 	delete[] data;
; 746  : }
; 747  : 
; 748  : 
; 749  : 
; 750  : bool gfxu::getError(const char* caption)
; 751  : {
; 752  : 	int error = glGetError();

  0016b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glGetError

; 753  : 	if(error != GL_NO_ERROR)

  00171	85 c0		 test	 eax, eax
  00173	74 38		 je	 SHORT $LN2@upload

; 754  : 	{
; 755  : 		const char* errorString = (const char*)gluErrorString(error);

  00175	8b c8		 mov	 ecx, eax
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_gluErrorString

; 756  : 		GLWindow::instance->postError(errorString, caption);

  0017d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG4294928264
  00184	48 8b d0	 mov	 rdx, rax
  00187	e8 00 00 00 00	 call	 ?postError@GLWindow@@QEAAXPEBD0@Z ; GLWindow::postError
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  0018c	48 8d 4f 50	 lea	 rcx, QWORD PTR [rdi+80]
  00190	e8 00 00 00 00	 call	 _Mtx_unlock

; 32   : 	if (_Res != _Thrd_success)

  00195	85 c0		 test	 eax, eax
  00197	74 07		 je	 SHORT $LN36@upload

; 33   : 		_Throw_C_error(_Res);

  00199	8b c8		 mov	 ecx, eax
  0019b	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN36@upload:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 232  : 			return false;

  001a0	32 c0		 xor	 al, al

; 243  : }

  001a2	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001a7	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001ab	5f		 pop	 rdi
  001ac	c3		 ret	 0
$LN2@upload:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  001ad	48 8d 4f 50	 lea	 rcx, QWORD PTR [rdi+80]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 236  : 			uploaded = true;

  001b1	c6 47 4d 01	 mov	 BYTE PTR [rdi+77], 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  001b5	e8 00 00 00 00	 call	 _Mtx_unlock

; 32   : 	if (_Res != _Thrd_success)

  001ba	85 c0		 test	 eax, eax
  001bc	74 07		 je	 SHORT $LN45@upload

; 33   : 		_Throw_C_error(_Res);

  001be	8b c8		 mov	 ecx, eax
  001c0	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN45@upload:
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 242  : 	return true;

  001c5	b0 01		 mov	 al, 1

; 243  : }

  001c7	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]
  001cc	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001d0	5f		 pop	 rdi
  001d1	c3		 ret	 0
?upload@VertexStream@gfxu@@QEAA_NXZ ENDP		; gfxu::VertexStream::upload
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?isUploaded@VertexStream@gfxu@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 8
?isUploaded@VertexStream@gfxu@@QEAA_NXZ PROC		; gfxu::VertexStream::isUploaded, COMDAT

; 262  : 	return uploaded;

  00000	0f b6 41 4d	 movzx	 eax, BYTE PTR [rcx+77]

; 263  : }

  00004	c3		 ret	 0
?isUploaded@VertexStream@gfxu@@QEAA_NXZ ENDP		; gfxu::VertexStream::isUploaded
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?_compile@Shader@gfxu@@IEAA_NI@Z
_TEXT	SEGMENT
len$1 = 48
compileStatus$ = 52
strLen$ = 56
$T2 = 64
$T3 = 64
$T4 = 80
$T5 = 80
strPtr$ = 96
$T6 = 104
file$ = 112
str$ = 384
__$ArrayPad$ = 416
this$ = 448
type$ = 456
?_compile@Shader@gfxu@@IEAA_NI@Z PROC			; gfxu::Shader::_compile, COMDAT

; 273  : {

$LN220:
  00000	48 8b c4	 mov	 rax, rsp
  00003	55		 push	 rbp
  00004	48 8d a8 48 ff
	ff ff		 lea	 rbp, QWORD PTR [rax-184]
  0000b	48 81 ec b0 01
	00 00		 sub	 rsp, 432		; 000001b0H
  00012	48 c7 44 24 68
	fe ff ff ff	 mov	 QWORD PTR $T6[rsp], -2
  0001b	48 89 58 18	 mov	 QWORD PTR [rax+24], rbx
  0001f	48 89 78 20	 mov	 QWORD PTR [rax+32], rdi
  00023	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002a	48 33 c4	 xor	 rax, rsp
  0002d	48 89 85 a0 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp-256], rax
  00034	8b da		 mov	 ebx, edx
  00036	48 8b f9	 mov	 rdi, rcx

; 274  : 	if(compiled)

  00039	80 79 2c 00	 cmp	 BYTE PTR [rcx+44], 0
  0003d	74 07		 je	 SHORT $LN6@compile

; 275  : 	{
; 276  : 		return true;

  0003f	b0 01		 mov	 al, 1
  00041	e9 42 02 00 00	 jmp	 $LN7@compile
$LN6@compile:

; 277  : 	}
; 278  : 
; 279  : 	std::ifstream file(fileName);

  00046	48 8d 51 08	 lea	 rdx, QWORD PTR [rcx+8]
  0004a	48 8d 4c 24 70	 lea	 rcx, QWORD PTR file$[rsp]
  0004f	e8 00 00 00 00	 call	 ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@HH@Z ; std::basic_ifstream<char,std::char_traits<char> >::basic_ifstream<char,std::char_traits<char> >
  00054	90		 npad	 1

; 281  : 	if(!file.good())

  00055	48 8b 44 24 70	 mov	 rax, QWORD PTR file$[rsp]
  0005a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 349  : 		return (rdstate() == goodbit);

  0005e	83 7c 05 80 00	 cmp	 DWORD PTR file$[rbp+rax-240], 0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 281  : 	if(!file.good())

  00063	74 3b		 je	 SHORT $LN5@compile
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 912  : 		if (_Filebuffer.close() == 0)

  00065	48 8d 4d 80	 lea	 rcx, QWORD PTR file$[rbp-240]
  00069	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  0006e	48 85 c0	 test	 rax, rax
  00071	75 26		 jne	 SHORT $LN26@compile

; 913  : 			_Myios::setstate(ios_base::failbit);

  00073	48 8b 44 24 70	 mov	 rax, QWORD PTR file$[rsp]
  00078	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
  0007c	48 8d 4c 0c 70	 lea	 rcx, QWORD PTR file$[rsp+rcx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  00081	8b 51 10	 mov	 edx, DWORD PTR [rcx+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00084	83 ca 02	 or	 edx, 2

; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  00087	48 83 79 48 00	 cmp	 QWORD PTR [rcx+72], 0
  0008c	75 03		 jne	 SHORT $LN28@compile
  0008e	83 ca 04	 or	 edx, 4
$LN28@compile:
  00091	45 33 c0	 xor	 r8d, r8d
  00094	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QEAAXH_N@Z ; std::ios_base::clear
$LN26@compile:
  00099	32 db		 xor	 bl, bl
  0009b	e9 c8 01 00 00	 jmp	 $LN212@compile
$LN5@compile:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\streambuf

; 490  : 		{	// construct from stream buffer _Sb

  000a0	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR $T5[rsp], 0
  000a9	c6 44 24 58 01	 mov	 BYTE PTR $T5[rsp+8], 1

; 491  : 		}
; 492  : 
; 493  : 	istreambuf_iterator(istream_type& _Istr) _THROW0()
; 494  : 		: _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
; 495  : 		{	// construct from stream buffer in istream _Istr

  000ae	48 8b 44 05 b8	 mov	 rax, QWORD PTR file$[rbp+rax-184]
  000b3	48 89 44 24 40	 mov	 QWORD PTR $T3[rsp], rax
  000b8	48 85 c0	 test	 rax, rax
  000bb	0f 94 44 24 48	 sete	 BYTE PTR $T3[rsp+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  000c0	48 c7 85 98 00
	00 00 0f 00 00
	00		 mov	 QWORD PTR str$[rbp-232], 15

; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  000cb	48 c7 85 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR str$[rbp-240], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  000d6	c6 85 80 00 00
	00 00		 mov	 BYTE PTR str$[rbp-256], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));

  000dd	0f 28 44 24 50	 movaps	 xmm0, XMMWORD PTR $T5[rsp]
  000e2	66 0f 7f 44 24
	50		 movdqa	 XMMWORD PTR $T4[rsp], xmm0
  000e8	0f 28 4c 24 40	 movaps	 xmm1, XMMWORD PTR $T3[rsp]
  000ed	66 0f 7f 4c 24
	40		 movdqa	 XMMWORD PTR $T2[rsp], xmm1
  000f3	4c 8d 44 24 50	 lea	 r8, QWORD PTR $T4[rsp]
  000f8	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T2[rsp]
  000fd	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR str$[rbp-256]
  00104	e8 00 00 00 00	 call	 ??$_Construct@V?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXV?$istreambuf_iterator@DU?$char_traits@D@std@@@1@0Uinput_iterator_tag@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<std::istreambuf_iterator<char,std::char_traits<char> > >
  00109	90		 npad	 1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\fstream

; 912  : 		if (_Filebuffer.close() == 0)

  0010a	48 8d 4d 80	 lea	 rcx, QWORD PTR file$[rbp-240]
  0010e	e8 00 00 00 00	 call	 ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ ; std::basic_filebuf<char,std::char_traits<char> >::close
  00113	48 85 c0	 test	 rax, rax
  00116	75 26		 jne	 SHORT $LN92@compile

; 913  : 			_Myios::setstate(ios_base::failbit);

  00118	48 8b 44 24 70	 mov	 rax, QWORD PTR file$[rsp]
  0011d	48 63 48 04	 movsxd	 rcx, DWORD PTR [rax+4]
  00121	48 8d 4c 0c 70	 lea	 rcx, QWORD PTR file$[rsp+rcx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 327  : 		return (_Mystate);

  00126	8b 51 10	 mov	 edx, DWORD PTR [rcx+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\ios

; 66   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00129	83 ca 02	 or	 edx, 2

; 54   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);

  0012c	48 83 79 48 00	 cmp	 QWORD PTR [rcx+72], 0
  00131	75 03		 jne	 SHORT $LN94@compile
  00133	83 ca 04	 or	 edx, 4
$LN94@compile:
  00136	45 33 c0	 xor	 r8d, r8d
  00139	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QEAAXH_N@Z ; std::ios_base::clear
$LN92@compile:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 524  : 			: this->_Bx._Buf);

  0013e	48 8d 85 80 00
	00 00		 lea	 rax, QWORD PTR str$[rbp-256]
  00145	48 83 bd 98 00
	00 00 10	 cmp	 QWORD PTR str$[rbp-232], 16
  0014d	48 0f 43 85 80
	00 00 00	 cmovae	 rax, QWORD PTR str$[rbp-256]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 289  : 	const char* strPtr = str.c_str();

  00155	48 89 44 24 60	 mov	 QWORD PTR strPtr$[rsp], rax

; 290  : 	const int strLen = str.length();

  0015a	8b 85 90 00 00
	00		 mov	 eax, DWORD PTR str$[rbp-240]
  00160	89 44 24 38	 mov	 DWORD PTR strLen$[rsp], eax

; 291  : 
; 292  : 	if(!strLen)

  00164	85 c0		 test	 eax, eax
  00166	0f 84 c7 00 00
	00		 je	 $LN1@compile

; 293  : 	{
; 294  : 		return false;
; 295  : 	}
; 296  : 
; 297  : 	object = glCreateShader(type);

  0016c	8b cb		 mov	 ecx, ebx
  0016e	ff 15 00 00 00
	00		 call	 QWORD PTR __glewCreateShader
  00174	89 47 28	 mov	 DWORD PTR [rdi+40], eax

; 298  : 
; 299  : 	glShaderSource(object, 1, &strPtr, &strLen);

  00177	4c 8d 4c 24 38	 lea	 r9, QWORD PTR strLen$[rsp]
  0017c	4c 8d 44 24 60	 lea	 r8, QWORD PTR strPtr$[rsp]
  00181	ba 01 00 00 00	 mov	 edx, 1
  00186	8b c8		 mov	 ecx, eax
  00188	ff 15 00 00 00
	00		 call	 QWORD PTR __glewShaderSource

; 300  : 	glCompileShader(object);

  0018e	8b 4f 28	 mov	 ecx, DWORD PTR [rdi+40]
  00191	ff 15 00 00 00
	00		 call	 QWORD PTR __glewCompileShader

; 301  : 
; 302  : 	GLint compileStatus;
; 303  : 
; 304  : 	glGetObjectParameterivARB(object, GL_OBJECT_COMPILE_STATUS_ARB, &compileStatus);

  00197	4c 8d 44 24 34	 lea	 r8, QWORD PTR compileStatus$[rsp]
  0019c	ba 81 8b 00 00	 mov	 edx, 35713		; 00008b81H
  001a1	8b 4f 28	 mov	 ecx, DWORD PTR [rdi+40]
  001a4	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGetObjectParameterivARB

; 305  : 
; 306  : 	if((compileStatus == GL_FALSE) & (GLWindow::instance != NULL))

  001aa	33 c9		 xor	 ecx, ecx
  001ac	48 39 0d 00 00
	00 00		 cmp	 QWORD PTR ?instance@GLWindow@@2PEAV1@EA, rcx ; GLWindow::instance
  001b3	0f 95 c1	 setne	 cl
  001b6	33 c0		 xor	 eax, eax
  001b8	39 44 24 34	 cmp	 DWORD PTR compileStatus$[rsp], eax
  001bc	0f 94 c0	 sete	 al
  001bf	85 c8		 test	 ecx, eax
  001c1	74 68		 je	 SHORT $LN3@compile

; 307  : 	{
; 308  : 		GLint len;
; 309  : 		glGetShaderiv(object, GL_INFO_LOG_LENGTH, &len);

  001c3	4c 8d 44 24 30	 lea	 r8, QWORD PTR len$1[rsp]
  001c8	ba 84 8b 00 00	 mov	 edx, 35716		; 00008b84H
  001cd	8b 4f 28	 mov	 ecx, DWORD PTR [rdi+40]
  001d0	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGetShaderiv

; 310  : 		if(len > 0)

  001d6	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$1[rsp]
  001db	85 c0		 test	 eax, eax
  001dd	7e 37		 jle	 SHORT $LN2@compile

; 311  : 		{
; 312  : 			GLchar* str = new GLchar[len];

  001df	48 8b c8	 mov	 rcx, rax
  001e2	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]
  001e7	48 8b d8	 mov	 rbx, rax

; 313  : 			glGetShaderInfoLog(object, len, nullptr, str);

  001ea	4c 8b c8	 mov	 r9, rax
  001ed	45 33 c0	 xor	 r8d, r8d
  001f0	8b 54 24 30	 mov	 edx, DWORD PTR len$1[rsp]
  001f4	8b 4f 28	 mov	 ecx, DWORD PTR [rdi+40]
  001f7	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGetShaderInfoLog

; 314  : 			GLWindow::instance->postError(str, "Shader compliation error");

  001fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG4294928263
  00204	48 8b d3	 mov	 rdx, rbx
  00207	e8 00 00 00 00	 call	 ?postError@GLWindow@@QEAAXPEBD0@Z ; GLWindow::postError

; 315  : 
; 316  : 			delete[] str;

  0020c	48 8b cb	 mov	 rcx, rbx
  0020f	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]

; 317  : 		}
; 318  : 		else

  00214	eb 1d		 jmp	 SHORT $LN1@compile
$LN2@compile:

; 319  : 		{
; 320  : 			GLWindow::instance->postError("The shader had a compilation error, but returned no log.", "Shader compliation error");

  00216	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG4294928262
  0021d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG4294928261
  00224	e8 00 00 00 00	 call	 ?postError@GLWindow@@QEAAXPEBD0@Z ; GLWindow::postError
  00229	eb 08		 jmp	 SHORT $LN1@compile
$LN3@compile:

; 321  : 		}
; 322  : 
; 323  : 		return false;
; 324  : 	}
; 325  : 	
; 326  : 	compiled = true;

  0022b	c6 47 2c 01	 mov	 BYTE PTR [rdi+44], 1

; 327  : 	return compiled;

  0022f	b3 01		 mov	 bl, 1
  00231	eb 02		 jmp	 SHORT $LN13@compile
$LN1@compile:
  00233	32 db		 xor	 bl, bl
$LN13@compile:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00235	48 83 bd 98 00
	00 00 10	 cmp	 QWORD PTR str$[rbp-232], 16
  0023d	72 0c		 jb	 SHORT $LN202@compile
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0023f	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR str$[rbp-256]
  00246	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN202@compile:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  0024b	48 c7 85 98 00
	00 00 0f 00 00
	00		 mov	 QWORD PTR str$[rbp-232], 15

; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00256	48 c7 85 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR str$[rbp-240], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 564  : 		_Left = _Right;

  00261	c6 85 80 00 00
	00 00		 mov	 BYTE PTR str$[rbp-256], 0
$LN212@compile:
  00268	48 8d 4d 20	 lea	 rcx, QWORD PTR file$[rbp-80]
  0026c	e8 00 00 00 00	 call	 ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ifstream<char,std::char_traits<char> >::~basic_ifstream<char,std::char_traits<char> >
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xiosbase

; 531  : 		{	// destroy the object

  00271	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7ios_base@std@@6B@
  00278	48 89 45 20	 mov	 QWORD PTR file$[rbp-80], rax

; 532  : 		_Ios_base_dtor(this);

  0027c	48 8d 4d 20	 lea	 rcx, QWORD PTR file$[rbp-80]
  00280	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPEAV12@@Z ; std::ios_base::_Ios_base_dtor
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 327  : 	return compiled;

  00285	0f b6 c3	 movzx	 eax, bl
$LN7@compile:

; 328  : }

  00288	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-256]
  0028f	48 33 cc	 xor	 rcx, rsp
  00292	e8 00 00 00 00	 call	 __security_check_cookie
  00297	4c 8d 9c 24 b0
	01 00 00	 lea	 r11, QWORD PTR [rsp+432]
  0029f	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  002a3	49 8b 7b 28	 mov	 rdi, QWORD PTR [r11+40]
  002a7	49 8b e3	 mov	 rsp, r11
  002aa	5d		 pop	 rbp
  002ab	c3		 ret	 0
?_compile@Shader@gfxu@@IEAA_NI@Z ENDP			; gfxu::Shader::_compile
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
len$1 = 48
compileStatus$ = 52
strLen$ = 56
$T2 = 64
$T3 = 64
$T4 = 80
$T5 = 80
strPtr$ = 96
$T6 = 104
file$ = 112
str$ = 384
__$ArrayPad$ = 416
this$ = 448
type$ = 456
?dtor$0@?0??_compile@Shader@gfxu@@IEAA_NI@Z@4HA PROC	; `gfxu::Shader::_compile'::`1'::dtor$0
  00000	48 8d 8a 70 00
	00 00		 lea	 rcx, QWORD PTR file$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
?dtor$0@?0??_compile@Shader@gfxu@@IEAA_NI@Z@4HA ENDP	; `gfxu::Shader::_compile'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
len$1 = 48
compileStatus$ = 52
strLen$ = 56
$T2 = 64
$T3 = 64
$T4 = 80
$T5 = 80
strPtr$ = 96
$T6 = 104
file$ = 112
str$ = 384
__$ArrayPad$ = 416
this$ = 448
type$ = 456
?dtor$1@?0??_compile@Shader@gfxu@@IEAA_NI@Z@4HA PROC	; `gfxu::Shader::_compile'::`1'::dtor$1
  0000c	48 8d 8a 80 01
	00 00		 lea	 rcx, QWORD PTR str$[rdx]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
?dtor$1@?0??_compile@Shader@gfxu@@IEAA_NI@Z@4HA ENDP	; `gfxu::Shader::_compile'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
$T1 = 32
fileName$GSCopy$ = 40
__$ArrayPad$ = 48
this$ = 80
fileName$ = 88
??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; gfxu::Shader::Shader, COMDAT

; 332  : {

$LN83:
  00000	40 57		 push	 rdi
  00002	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00006	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  0000f	48 89 5c 24 60	 mov	 QWORD PTR [rsp+96], rbx
  00014	48 89 74 24 68	 mov	 QWORD PTR [rsp+104], rsi
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00028	48 8b da	 mov	 rbx, rdx
  0002b	48 8b f9	 mov	 rdi, rcx
  0002e	48 89 54 24 28	 mov	 QWORD PTR fileName$GSCopy$[rsp], rdx
  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Shader@gfxu@@6B@
  0003a	48 89 01	 mov	 QWORD PTR [rcx], rax
  0003d	48 83 c1 08	 add	 rcx, 8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00041	48 c7 41 18 07
	00 00 00	 mov	 QWORD PTR [rcx+24], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00049	33 f6		 xor	 esi, esi
  0004b	48 89 71 10	 mov	 QWORD PTR [rcx+16], rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0004f	66 89 31	 mov	 WORD PTR [rcx], si
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  00052	49 83 c9 ff	 or	 r9, -1
  00056	45 33 c0	 xor	 r8d, r8d
  00059	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 332  : {

  0005e	40 88 77 2c	 mov	 BYTE PTR [rdi+44], sil
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  00062	48 83 7b 18 08	 cmp	 QWORD PTR [rbx+24], 8
  00067	72 08		 jb	 SHORT $LN71@Shader
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00069	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  0006c	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN71@Shader:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00071	48 c7 43 18 07
	00 00 00	 mov	 QWORD PTR [rbx+24], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00079	48 89 73 10	 mov	 QWORD PTR [rbx+16], rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0007d	66 89 33	 mov	 WORD PTR [rbx], si
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 334  : }

  00080	48 8b c7	 mov	 rax, rdi
  00083	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00088	48 33 cc	 xor	 rcx, rsp
  0008b	e8 00 00 00 00	 call	 __security_check_cookie
  00090	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]
  00095	48 8b 74 24 68	 mov	 rsi, QWORD PTR [rsp+104]
  0009a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0009e	5f		 pop	 rdi
  0009f	c3		 ret	 0
??0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; gfxu::Shader::Shader
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
fileName$GSCopy$ = 40
__$ArrayPad$ = 48
this$ = 80
fileName$ = 88
?dtor$0@?0???0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z@4HA PROC ; `gfxu::Shader::Shader'::`1'::dtor$0
  00000	48 8b 8a 28 00
	00 00		 mov	 rcx, QWORD PTR fileName$GSCopy$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
?dtor$0@?0???0Shader@gfxu@@QEAA@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z@4HA ENDP ; `gfxu::Shader::Shader'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?compile@VertexShader@gfxu@@UEAA_NXZ
_TEXT	SEGMENT
this$ = 8
?compile@VertexShader@gfxu@@UEAA_NXZ PROC		; gfxu::VertexShader::compile, COMDAT

; 351  : 	return _compile(GL_VERTEX_SHADER);

  00000	ba 31 8b 00 00	 mov	 edx, 35633		; 00008b31H
  00005	e9 00 00 00 00	 jmp	 ?_compile@Shader@gfxu@@IEAA_NI@Z ; gfxu::Shader::_compile
?compile@VertexShader@gfxu@@UEAA_NXZ ENDP		; gfxu::VertexShader::compile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?compile@GeometryShader@gfxu@@UEAA_NXZ
_TEXT	SEGMENT
this$ = 8
?compile@GeometryShader@gfxu@@UEAA_NXZ PROC		; gfxu::GeometryShader::compile, COMDAT

; 362  : 	return _compile(GL_GEOMETRY_SHADER);

  00000	ba d9 8d 00 00	 mov	 edx, 36313		; 00008dd9H
  00005	e9 00 00 00 00	 jmp	 ?_compile@Shader@gfxu@@IEAA_NI@Z ; gfxu::Shader::_compile
?compile@GeometryShader@gfxu@@UEAA_NXZ ENDP		; gfxu::GeometryShader::compile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?compile@FragmentShader@gfxu@@UEAA_NXZ
_TEXT	SEGMENT
this$ = 8
?compile@FragmentShader@gfxu@@UEAA_NXZ PROC		; gfxu::FragmentShader::compile, COMDAT

; 373  : 	return _compile(GL_FRAGMENT_SHADER);

  00000	ba 30 8b 00 00	 mov	 edx, 35632		; 00008b30H
  00005	e9 00 00 00 00	 jmp	 ?_compile@Shader@gfxu@@IEAA_NI@Z ; gfxu::Shader::_compile
?compile@FragmentShader@gfxu@@UEAA_NXZ ENDP		; gfxu::FragmentShader::compile
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?create@ShaderProgram@gfxu@@AEAA_NXZ
_TEXT	SEGMENT
len$1 = 48
this$ = 48
linkStatus$2 = 56
?create@ShaderProgram@gfxu@@AEAA_NXZ PROC		; gfxu::ShaderProgram::create, COMDAT

; 390  : {

$LN22:
  00000	40 57		 push	 rdi
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 391  : 	if(vShader || gShader || fShader)

  00006	48 83 39 00	 cmp	 QWORD PTR [rcx], 0
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	75 16		 jne	 SHORT $LN12@create
  0000f	48 83 79 08 00	 cmp	 QWORD PTR [rcx+8], 0
  00014	75 0f		 jne	 SHORT $LN12@create
  00016	48 83 79 10 00	 cmp	 QWORD PTR [rcx+16], 0
  0001b	75 08		 jne	 SHORT $LN12@create

; 466  : 		}
; 467  : 	}
; 468  : 
; 469  : 	return false;

  0001d	32 c0		 xor	 al, al

; 470  : }

  0001f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00023	5f		 pop	 rdi
  00024	c3		 ret	 0
$LN12@create:

; 392  : 	{
; 393  : 		object = glCreateProgramObjectARB();

  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __glewCreateProgramObjectARB

; 394  : 
; 395  : 		if(vShader)

  0002b	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  0002e	89 47 18	 mov	 DWORD PTR [rdi+24], eax
  00031	48 85 c9	 test	 rcx, rcx
  00034	74 1c		 je	 SHORT $LN11@create

; 396  : 		{
; 397  : 			if(!vShader->compile())

  00036	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00039	ff 10		 call	 QWORD PTR [rax]
  0003b	84 c0		 test	 al, al
  0003d	0f 84 3b 01 00
	00		 je	 $LN20@create

; 398  : 			{
; 399  : 				return okay;
; 400  : 			}
; 401  : 			glAttachShader(object, vShader->object);

  00043	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00046	8b 4f 18	 mov	 ecx, DWORD PTR [rdi+24]
  00049	8b 50 28	 mov	 edx, DWORD PTR [rax+40]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __glewAttachShader
$LN11@create:

; 402  : 		}
; 403  : 
; 404  : 		if(gShader)

  00052	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  00056	48 85 c9	 test	 rcx, rcx
  00059	74 1d		 je	 SHORT $LN9@create

; 405  : 		{
; 406  : 			if(!gShader->compile())

  0005b	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0005e	ff 10		 call	 QWORD PTR [rax]
  00060	84 c0		 test	 al, al
  00062	0f 84 16 01 00
	00		 je	 $LN20@create

; 407  : 			{
; 408  : 				return okay;
; 409  : 			}
; 410  : 			glAttachShader(object, gShader->object);

  00068	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  0006c	8b 4f 18	 mov	 ecx, DWORD PTR [rdi+24]
  0006f	8b 50 28	 mov	 edx, DWORD PTR [rax+40]
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __glewAttachShader
$LN9@create:

; 411  : 		}
; 412  : 
; 413  : 		if(fShader)

  00078	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  0007c	48 85 c9	 test	 rcx, rcx
  0007f	74 1d		 je	 SHORT $LN7@create

; 414  : 		{
; 415  : 			if(!fShader->compile())

  00081	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00084	ff 10		 call	 QWORD PTR [rax]
  00086	84 c0		 test	 al, al
  00088	0f 84 f0 00 00
	00		 je	 $LN20@create

; 416  : 			{
; 417  : 				return okay;
; 418  : 			}
; 419  : 			glAttachShader(object, fShader->object);

  0008e	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  00092	8b 4f 18	 mov	 ecx, DWORD PTR [rdi+24]
  00095	8b 50 28	 mov	 edx, DWORD PTR [rax+40]
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __glewAttachShader
$LN7@create:

; 471  : 
; 472  : void ShaderProgram::bind()
; 473  : {
; 474  : 	glUseProgram(object);
; 475  : 	gfxu::getError();
; 476  : 	current = this;
; 477  : 
; 478  : 	Uniforms::setForceUpload();
; 479  : }
; 480  : 
; 481  : ShaderProgram* ShaderProgram::current;
; 482  : 
; 483  : 
; 484  : 
; 485  : MatrixStack::MatrixStack()
; 486  : {
; 487  : 	clear();
; 488  : }
; 489  : 
; 490  : geom::Matrix MatrixStack::unstack()
; 491  : {
; 492  : 	std::stack<geom::Matrix> stack2 = stack;
; 493  : 	geom::Matrix mat = geom::Matrix::identity();
; 494  : 	while(!stack2.empty())
; 495  : 	{
; 496  : 		mat = stack2.top() * mat;
; 497  : 		stack2.pop();
; 498  : 	}
; 499  : 
; 500  : 	return mat;
; 501  : }
; 502  : 
; 503  : void MatrixStack::push(geom::Matrix mat)
; 504  : {
; 505  : 	stack.push(mat);
; 506  : 	topmost = topmost * mat;
; 507  : 	changed = true;
; 508  : }
; 509  : 
; 510  : void MatrixStack::mult(geom::Matrix mat)
; 511  : {
; 512  : 	stack.top() = stack.top() * mat;
; 513  : 	topmost = topmost * mat;
; 514  : 	changed = true;
; 515  : }
; 516  : 
; 517  : void MatrixStack::identity()
; 518  : {
; 519  : 	stack.top() = geom::Matrix::identity();
; 520  : 	topmost = unstack();
; 521  : 	changed = true;
; 522  : }
; 523  : 
; 524  : void MatrixStack::pop()
; 525  : {
; 526  : 	stack.pop();
; 527  : 	topmost = unstack();
; 528  : 	changed = true;
; 529  : }
; 530  : 
; 531  : void MatrixStack::clear()
; 532  : {
; 533  : 	while(!stack.empty())
; 534  : 	{
; 535  : 		stack.pop();
; 536  : 	}
; 537  : 	stack.push(geom::Matrix::identity());
; 538  : 	topmost = geom::Matrix::identity();
; 539  : 	changed = true;
; 540  : }
; 541  : 
; 542  : const geom::Matrix MatrixStack::getTopmost()
; 543  : {
; 544  : 	return topmost;
; 545  : }
; 546  : 
; 547  : 
; 548  : 
; 549  : void Uniforms::setColor(float r, float g, float b, float a)
; 550  : {
; 551  : 	color.set(geom::Vector(r, g, b, a));
; 552  : }
; 553  : 
; 554  : void Uniforms::setFogColor(float r, float g, float b, float a)
; 555  : {
; 556  : 	fogColor.set(geom::Vector(r, g, b, a));
; 557  : }
; 558  : 
; 559  : void Uniforms::uploadChanges()
; 560  : {
; 561  : 	if(forceUpload | (MMS.changed & (ShaderProgram::current->modelview >= 0)))
; 562  : 	{
; 563  : 		glUniformMatrix4fv(ShaderProgram::current->modelview, 1, false, MMS.getTopmost().data);
; 564  : 		MMS.changed = false;
; 565  : 	}
; 566  : 
; 567  : 	if(forceUpload | (PMS.changed & (ShaderProgram::current->projection >= 0)))
; 568  : 	{
; 569  : 		glUniformMatrix4fv(ShaderProgram::current->projection, 1, false, PMS.getTopmost().data);
; 570  : 		PMS.changed = false;
; 571  : 	}
; 572  : 
; 573  : 	if(forceUpload | (color.changed & (ShaderProgram::current->const_color >= 0)))
; 574  : 	{
; 575  : 		geom::Vector vec = color.get();
; 576  : 		glUniform4f(ShaderProgram::current->const_color, vec.x, vec.y, vec.z, vec.w);
; 577  : 	}
; 578  : 
; 579  : 	if(forceUpload | (camPos.changed & (ShaderProgram::current->cam_pos >= 0)))
; 580  : 	{
; 581  : 		geom::Vector vec = camPos.get();
; 582  : 		glUniform4f(ShaderProgram::current->cam_pos, vec.x, vec.y, vec.z, vec.w);
; 583  : 	}
; 584  : 
; 585  : 	if(forceUpload | (fogColor.changed & (ShaderProgram::current->fog_color >= 0)))
; 586  : 	{
; 587  : 		geom::Vector vec = fogColor.get();
; 588  : 		glUniform4f(ShaderProgram::current->fog_color, vec.x, vec.y, vec.z, vec.w);
; 589  : 	}
; 590  : 
; 591  : 	if(forceUpload | (fogDist.changed & (ShaderProgram::current->fog_dist >= 0)))
; 592  : 	{
; 593  : 		glUniform1f(ShaderProgram::current->fog_dist, fogDist.get());
; 594  : 	}
; 595  : }
; 596  : 
; 597  : void Uniforms::reset()
; 598  : {
; 599  : 	MMS.clear();
; 600  : 	PMS.clear();
; 601  : }
; 602  : 
; 603  : void Uniforms::setForceUpload()
; 604  : {
; 605  : 	MMS.changed = PMS.changed = true;
; 606  : }
; 607  : 
; 608  : bool Uniforms::forceUpload = false;
; 609  : MatrixStack Uniforms::MMS;
; 610  : MatrixStack Uniforms::PMS;
; 611  : Uniform<geom::Vector> Uniforms::color;
; 612  : Uniform<geom::Vector> Uniforms::camPos;
; 613  : Uniform<geom::Vector> Uniforms::fogColor;
; 614  : Uniform<float> Uniforms::fogDist;
; 615  : 
; 616  : 
; 617  : 
; 618  : Texture2D::Texture2D()
; 619  : 	: data(nullptr), width(0), height(0), object(0), magFilter(GL_LINEAR), minFilter(GL_LINEAR), wrap(GL_REPEAT), mipmapped(false), uploaded(false)
; 620  : {
; 621  : 
; 622  : }
; 623  : 
; 624  : Texture2D::Texture2D(unsigned int width, unsigned int height, TEXTURE_PARAMETER magFilter, TEXTURE_PARAMETER minFilter, TEXTURE_PARAMETER wrap, bool mipmapped)
; 625  : 	: width(width), height(height), data(new unsigned char[width * height * 4]), object(0), magFilter(magFilter), minFilter(minFilter), wrap(wrap), mipmapped(mipmapped), uploaded(false)
; 626  : {
; 627  : 
; 628  : }
; 629  : 
; 630  : Texture2D::Texture2D(unsigned int width, unsigned int height, Noise::NoiseGenerator2D* r, Noise::NoiseGenerator2D* g, Noise::NoiseGenerator2D* b, Noise::NoiseGenerator2D* a)
; 631  : 	: width(width), height(height), data(new unsigned char[width * height* 4]), object(0), magFilter(GL_LINEAR), minFilter(GL_LINEAR), wrap(GL_CLAMP_TO_EDGE), mipmapped(false), uploaded(false)
; 632  : {
; 633  : 	for(unsigned int i = 0; i < width; i++)
; 634  : 	{
; 635  : 		for(unsigned int j = 0; j < height; j++)
; 636  : 		{
; 637  : 			data[(i + j * width) * 4] = (unsigned char)((r == nullptr ? 1.0f : r->getNoise(i, j)) * 255.0f);
; 638  : 			data[(i + j * width) * 4 + 1] = (unsigned char)((g == nullptr ? 1.0f : g->getNoise(i, j)) * 255.0f);
; 639  : 			data[(i + j * width) * 4 + 2] = (unsigned char)((b == nullptr ? 1.0f : b->getNoise(i, j)) * 255.0f);
; 640  : 			data[(i + j * width) * 4 + 3] = (unsigned char)((a == nullptr ? 1.0f : a->getNoise(i, j)) * 255.0f);
; 641  : 		}
; 642  : 	}
; 643  : }
; 644  : 
; 645  : Texture2D::Texture2D(wstring fileName)
; 646  : 	: object(0), magFilter(GL_LINEAR), minFilter(GL_LINEAR), wrap(GL_REPEAT), mipmapped(false), uploaded(false)
; 647  : {
; 648  : 	init(fileName);
; 649  : }
; 650  : 
; 651  : Texture2D::Texture2D(wstring fileName, TEXTURE_PARAMETER magFilter, TEXTURE_PARAMETER minFilter, TEXTURE_PARAMETER wrap, bool mipmapped)
; 652  : 	: object(0), magFilter(magFilter), minFilter(minFilter), wrap(wrap), mipmapped(mipmapped), uploaded(false)
; 653  : {
; 654  : 	init(fileName);
; 655  : }
; 656  : 
; 657  : void Texture2D::init(wstring fileName)
; 658  : {
; 659  : 	data = IOUtil::readPNG(fileName, width, height);
; 660  : }
; 661  : 
; 662  : Texture2D::~Texture2D()
; 663  : {
; 664  : 	if(data != nullptr)
; 665  : 	{
; 666  : 		delete[] data;
; 667  : 	}
; 668  : 
; 669  : 	if(uploaded)
; 670  : 	{
; 671  : 		glDeleteTextures(1, &object);
; 672  : 	}
; 673  : }
; 674  : 
; 675  : bool Texture2D::upload()
; 676  : {
; 677  : 	glGenTextures(1, &object);
; 678  : 	glBindTexture(GL_TEXTURE_2D, object);
; 679  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, minFilter);
; 680  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, magFilter);
; 681  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, wrap);
; 682  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, wrap);
; 683  : 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
; 684  : 	if(mipmapped)
; 685  : 	{
; 686  : 		glGenerateMipmap(GL_TEXTURE_2D);
; 687  : 	}
; 688  : 
; 689  : 	uploaded = true;
; 690  : 
; 691  : 	return true;
; 692  : }
; 693  : 
; 694  : void Texture2D::bind()
; 695  : {
; 696  : 	if(!uploaded)
; 697  : 	{
; 698  : 		if(!upload())
; 699  : 		{
; 700  : 			return;
; 701  : 		}
; 702  : 	}
; 703  : 	else
; 704  : 	{
; 705  : 		glBindTexture(GL_TEXTURE_2D, object);
; 706  : 	}
; 707  : }
; 708  : 
; 709  : TiledTexture::TiledTexture()
; 710  : 	: Texture2D()
; 711  : {
; 712  : 
; 713  : }
; 714  : 
; 715  : TiledTexture::~TiledTexture()
; 716  : {
; 717  : 
; 718  : }
; 719  : 
; 720  : TiledTexture::Icon* TiledTexture::icon(wstring file)
; 721  : {
; 722  : 	auto iconIter = icons.find(file);
; 723  : 
; 724  : 	if(iconIter == icons.end())
; 725  : 	{
; 726  : 		Icon* icon = new TiledTexture::Icon(file);
; 727  : 
; 728  : 		icons[file] = icon;
; 729  : 		return icon;
; 730  : 	}
; 731  : 	else
; 732  : 	{
; 733  : 		return iconIter->second;
; 734  : 	}
; 735  : }
; 736  : 
; 737  : TiledTexture::Icon::Icon(wstring file)
; 738  : 	: file(file), x(0), y(0)
; 739  : {
; 740  : 	data = IOUtil::readPNG(file, width, height);
; 741  : }
; 742  : 
; 743  : TiledTexture::Icon::~Icon()
; 744  : {
; 745  : 	delete[] data;
; 746  : }
; 747  : 
; 748  : 
; 749  : 
; 750  : bool gfxu::getError(const char* caption)
; 751  : {
; 752  : 	int error = glGetError();

  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glGetError

; 753  : 	if(error != GL_NO_ERROR)

  000a4	85 c0		 test	 eax, eax
  000a6	74 17		 je	 SHORT $LN17@create

; 754  : 	{
; 755  : 		const char* errorString = (const char*)gluErrorString(error);

  000a8	8b c8		 mov	 ecx, eax
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_gluErrorString

; 756  : 		GLWindow::instance->postError(errorString, caption);

  000b0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG4294928260
  000b7	48 8b d0	 mov	 rdx, rax
  000ba	e8 00 00 00 00	 call	 ?postError@GLWindow@@QEAAXPEBD0@Z ; GLWindow::postError
$LN17@create:

; 420  : 		}
; 421  : 
; 422  : 		getError("Unable to attach shaders.");
; 423  : 
; 424  : 		glLinkProgram(object);

  000bf	8b 4f 18	 mov	 ecx, DWORD PTR [rdi+24]
  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __glewLinkProgram

; 425  : 		GLint linkStatus;
; 426  : 
; 427  : 		glGetObjectParameterivARB(object, GL_OBJECT_LINK_STATUS_ARB, &linkStatus);

  000c8	8b 4f 18	 mov	 ecx, DWORD PTR [rdi+24]
  000cb	4c 8d 44 24 38	 lea	 r8, QWORD PTR linkStatus$2[rsp]
  000d0	ba 82 8b 00 00	 mov	 edx, 35714		; 00008b82H
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGetObjectParameterivARB

; 428  : 
; 429  : 		if((linkStatus == GL_FALSE) & (GLWindow::instance != NULL))

  000db	33 c9		 xor	 ecx, ecx
  000dd	8b c1		 mov	 eax, ecx
  000df	48 39 05 00 00
	00 00		 cmp	 QWORD PTR ?instance@GLWindow@@2PEAV1@EA, rax ; GLWindow::instance
  000e6	0f 95 c0	 setne	 al
  000e9	39 4c 24 38	 cmp	 DWORD PTR linkStatus$2[rsp], ecx
  000ed	0f 94 c1	 sete	 cl
  000f0	85 c1		 test	 eax, ecx

; 430  : 		{
; 431  : 			GLint len;
; 432  : 			glGetProgramiv(object, GL_INFO_LOG_LENGTH, &len);

  000f2	8b 4f 18	 mov	 ecx, DWORD PTR [rdi+24]
  000f5	0f 84 8d 00 00
	00		 je	 $LN5@create
  000fb	4c 8d 44 24 30	 lea	 r8, QWORD PTR len$1[rsp]
  00100	ba 84 8b 00 00	 mov	 edx, 35716		; 00008b84H
  00105	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGetProgramiv

; 433  : 			if(len > 0)

  0010b	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$1[rsp]
  00110	85 c0		 test	 eax, eax
  00112	7e 50		 jle	 SHORT $LN4@create

; 434  : 			{
; 435  : 				GLchar* str = new GLchar[len];

  00114	48 8b c8	 mov	 rcx, rax
  00117	48 89 5c 24 40	 mov	 QWORD PTR [rsp+64], rbx
  0011c	e8 00 00 00 00	 call	 ??_U@YAPEAX_K@Z		; operator new[]

; 436  : 				glGetProgramInfoLog(object, len, nullptr, str);

  00121	8b 54 24 30	 mov	 edx, DWORD PTR len$1[rsp]
  00125	8b 4f 18	 mov	 ecx, DWORD PTR [rdi+24]
  00128	4c 8b c8	 mov	 r9, rax
  0012b	45 33 c0	 xor	 r8d, r8d
  0012e	48 8b d8	 mov	 rbx, rax
  00131	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGetProgramInfoLog

; 437  : 				GLWindow::instance->postError(str, "Linking error");

  00137	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG4294928259
  0013e	48 8b d3	 mov	 rdx, rbx
  00141	e8 00 00 00 00	 call	 ?postError@GLWindow@@QEAAXPEBD0@Z ; GLWindow::postError

; 438  : 				delete[] str;

  00146	48 8b cb	 mov	 rcx, rbx
  00149	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
  0014e	48 8b 5c 24 40	 mov	 rbx, QWORD PTR [rsp+64]

; 446  : 			return okay;

  00153	0f b6 47 1c	 movzx	 eax, BYTE PTR [rdi+28]
  00157	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?stop@GlobalThread@@3_NA, 1 ; GlobalThread::stop

; 470  : }

  0015e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00162	5f		 pop	 rdi
  00163	c3		 ret	 0
$LN4@create:

; 439  : 			}
; 440  : 			else
; 441  : 			{
; 442  : 				GLWindow::instance->postError("The program has a linking error, but returned no log.", "Linking error");

  00164	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG4294928258
  0016b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG4294928257
  00172	e8 00 00 00 00	 call	 ?postError@GLWindow@@QEAAXPEBD0@Z ; GLWindow::postError

; 443  : 			}
; 444  : 
; 445  : 			GlobalThread::stop = true;

  00177	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?stop@GlobalThread@@3_NA, 1 ; GlobalThread::stop
$LN20@create:

; 446  : 			return okay;

  0017e	0f b6 47 1c	 movzx	 eax, BYTE PTR [rdi+28]

; 470  : }

  00182	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00186	5f		 pop	 rdi
  00187	c3		 ret	 0
$LN5@create:

; 447  : 		}
; 448  : 		else
; 449  : 		{
; 450  : 			glUseProgram(object);

  00188	ff 15 00 00 00
	00		 call	 QWORD PTR __glewUseProgram

; 451  : 			modelview = glGetUniformLocation(object, "modelview");

  0018e	8b 4f 18	 mov	 ecx, DWORD PTR [rdi+24]
  00191	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG4294928256
  00198	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGetUniformLocation

; 452  : 			projection = glGetUniformLocation(object, "projection");

  0019e	8b 4f 18	 mov	 ecx, DWORD PTR [rdi+24]
  001a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG4294928255
  001a8	89 47 20	 mov	 DWORD PTR [rdi+32], eax
  001ab	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGetUniformLocation

; 453  : 			const_color = glGetUniformLocation(object, "const_color");

  001b1	8b 4f 18	 mov	 ecx, DWORD PTR [rdi+24]
  001b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG4294928254
  001bb	89 47 24	 mov	 DWORD PTR [rdi+36], eax
  001be	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGetUniformLocation

; 454  : 			cam_pos = glGetUniformLocation(object, "cam_pos");

  001c4	8b 4f 18	 mov	 ecx, DWORD PTR [rdi+24]
  001c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG4294928253
  001ce	89 47 28	 mov	 DWORD PTR [rdi+40], eax
  001d1	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGetUniformLocation

; 455  : 			fog_color = glGetUniformLocation(object, "fog_color");

  001d7	8b 4f 18	 mov	 ecx, DWORD PTR [rdi+24]
  001da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG4294928252
  001e1	89 47 2c	 mov	 DWORD PTR [rdi+44], eax
  001e4	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGetUniformLocation

; 456  : 			fog_dist = glGetUniformLocation(object, "fog_dist");

  001ea	8b 4f 18	 mov	 ecx, DWORD PTR [rdi+24]
  001ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG4294928251
  001f4	89 47 30	 mov	 DWORD PTR [rdi+48], eax
  001f7	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGetUniformLocation

; 457  : 			texture1 = glGetUniformLocation(object, "texture_1");

  001fd	8b 4f 18	 mov	 ecx, DWORD PTR [rdi+24]
  00200	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG4294928250
  00207	89 47 34	 mov	 DWORD PTR [rdi+52], eax
  0020a	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGetUniformLocation
  00210	89 47 38	 mov	 DWORD PTR [rdi+56], eax

; 458  : 		
; 459  : 			if(texture1 >= 0)

  00213	85 c0		 test	 eax, eax
  00215	78 0a		 js	 SHORT $LN1@create

; 460  : 			{
; 461  : 				glUniform1i(texture1, 0);

  00217	33 d2		 xor	 edx, edx
  00219	8b c8		 mov	 ecx, eax
  0021b	ff 15 00 00 00
	00		 call	 QWORD PTR __glewUniform1i
$LN1@create:

; 462  : 			}
; 463  : 
; 464  : 			okay = true;

  00221	c6 47 1c 01	 mov	 BYTE PTR [rdi+28], 1

; 465  : 			return okay;

  00225	b0 01		 mov	 al, 1

; 470  : }

  00227	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0022b	5f		 pop	 rdi
  0022c	c3		 ret	 0
?create@ShaderProgram@gfxu@@AEAA_NXZ ENDP		; gfxu::ShaderProgram::create
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??0MatrixStack@gfxu@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0MatrixStack@gfxu@@QEAA@XZ PROC			; gfxu::MatrixStack::MatrixStack, COMDAT

; 486  : {

$LN64:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00013	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  00018	48 8b d9	 mov	 rbx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 79   : 		{	// construct childless container

  0001b	33 ff		 xor	 edi, edi
  0001d	48 89 39	 mov	 QWORD PTR [rcx], rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 778  : 		_Map = _Mapptr();

  00020	48 89 79 08	 mov	 QWORD PTR [rcx+8], rdi

; 779  : 		_Mapsize = 0;

  00024	48 89 79 10	 mov	 QWORD PTR [rcx+16], rdi

; 780  : 		_Myoff = 0;

  00028	48 89 79 18	 mov	 QWORD PTR [rcx+24], rdi

; 781  : 		_Mysize = 0;

  0002c	48 89 79 20	 mov	 QWORD PTR [rcx+32], rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00030	8d 4f 10	 lea	 ecx, QWORD PTR [rdi+16]
  00033	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00038	48 85 c0	 test	 rax, rax
  0003b	75 06		 jne	 SHORT $LN25@MatrixStac

; 29   : 		_Xbad_alloc();	// report no memory

  0003d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00042	cc		 int	 3
$LN25@MatrixStac:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 900  : 		this->_Myproxy = _Alproxy.allocate(1);

  00043	48 89 03	 mov	 QWORD PTR [rbx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00046	48 89 38	 mov	 QWORD PTR [rax], rdi
  00049	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 902  : 		this->_Myproxy->_Mycont = this;

  0004d	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00050	48 89 18	 mov	 QWORD PTR [rax], rbx
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 143  : 		data[i] = 0.0f;

  00053	48 89 7b 28	 mov	 QWORD PTR [rbx+40], rdi
  00057	48 89 7b 30	 mov	 QWORD PTR [rbx+48], rdi
  0005b	48 89 7b 38	 mov	 QWORD PTR [rbx+56], rdi
  0005f	48 89 7b 40	 mov	 QWORD PTR [rbx+64], rdi
  00063	48 89 7b 48	 mov	 QWORD PTR [rbx+72], rdi
  00067	48 89 7b 50	 mov	 QWORD PTR [rbx+80], rdi
  0006b	48 89 7b 58	 mov	 QWORD PTR [rbx+88], rdi
  0006f	48 89 7b 60	 mov	 QWORD PTR [rbx+96], rdi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 487  : 	clear();

  00073	48 8b cb	 mov	 rcx, rbx
  00076	e8 00 00 00 00	 call	 ?clear@MatrixStack@gfxu@@QEAAXXZ ; gfxu::MatrixStack::clear
  0007b	90		 npad	 1

; 488  : }

  0007c	48 8b c3	 mov	 rax, rbx
  0007f	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00084	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00088	5f		 pop	 rdi
  00089	c3		 ret	 0
$LN63@MatrixStac:
??0MatrixStack@gfxu@@QEAA@XZ ENDP			; gfxu::MatrixStack::MatrixStack
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???0MatrixStack@gfxu@@QEAA@XZ@4HA PROC	; `gfxu::MatrixStack::MatrixStack'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
?dtor$0@?0???0MatrixStack@gfxu@@QEAA@XZ@4HA ENDP	; `gfxu::MatrixStack::MatrixStack'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::~stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >, COMDAT
$LN16:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1222 : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0000e	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00011	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 912  : 		this->_Myproxy = 0;

  00016	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0
  0001d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00021	5b		 pop	 rbx
  00022	c3		 ret	 0
??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::~stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ
_TEXT	SEGMENT
stack2$ = 32
$T1 = 72
$T2 = 80
$T3 = 104
$T4 = 128
__$ArrayPad$ = 192
this$dead$ = 224
__$ReturnUdt$ = 232
?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ PROC	; gfxu::MatrixStack::unstack, COMDAT

; 491  : {

$LN84:
  00000	48 8b c4	 mov	 rax, rsp
  00003	57		 push	 rdi
  00004	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  0000b	48 c7 44 24 48
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00014	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00018	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0002e	48 8b da	 mov	 rbx, rdx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 33   : 		{	// construct by copying _Right

  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?MMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::MMS
  00038	48 8d 4c 24 20	 lea	 rcx, QWORD PTR stack2$[rsp]
  0003d	e8 00 00 00 00	 call	 ??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >
  00042	90		 npad	 1
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 143  : 		data[i] = 0.0f;

  00043	33 f6		 xor	 esi, esi
  00045	48 89 33	 mov	 QWORD PTR [rbx], rsi
  00048	48 89 73 08	 mov	 QWORD PTR [rbx+8], rsi
  0004c	48 89 73 10	 mov	 QWORD PTR [rbx+16], rsi
  00050	48 89 73 18	 mov	 QWORD PTR [rbx+24], rsi
  00054	48 89 73 20	 mov	 QWORD PTR [rbx+32], rsi
  00058	48 89 73 28	 mov	 QWORD PTR [rbx+40], rsi
  0005c	48 89 73 30	 mov	 QWORD PTR [rbx+48], rsi
  00060	48 89 73 38	 mov	 QWORD PTR [rbx+56], rsi

; 215  : 	}
; 216  : 
; 217  : 	return *this;
; 218  : }
; 219  : 
; 220  : Matrix Matrix::identity()
; 221  : {
; 222  : 	Matrix result;
; 223  : 	result[0] = 1.0f;

  00064	c7 03 00 00 80
	3f		 mov	 DWORD PTR [rbx], 1065353216 ; 3f800000H

; 224  : 	result[5] = 1.0f;

  0006a	c7 43 14 00 00
	80 3f		 mov	 DWORD PTR [rbx+20], 1065353216 ; 3f800000H

; 225  : 	result[10] = 1.0f;

  00071	c7 43 28 00 00
	80 3f		 mov	 DWORD PTR [rbx+40], 1065353216 ; 3f800000H

; 226  : 	result[15] = 1.0f;

  00078	c7 43 3c 00 00
	80 3f		 mov	 DWORD PTR [rbx+60], 1065353216 ; 3f800000H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  0007f	48 39 74 24 40	 cmp	 QWORD PTR stack2$[rsp+32], rsi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 494  : 	while(!stack2.empty())

  00084	0f 84 de 00 00
	00		 je	 $LN82@unstack
  0008a	66 0f 1f 44 00
	00		 npad	 6
$LL2@unstack:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1436 : 		return (*(end() - 1));

  00090	48 8d 54 24 68	 lea	 rdx, QWORD PTR $T3[rsp]
  00095	48 8d 4c 24 20	 lea	 rcx, QWORD PTR stack2$[rsp]
  0009a	e8 00 00 00 00	 call	 ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
  0009f	48 8b c8	 mov	 rcx, rax
  000a2	48 8d 54 24 50	 lea	 rdx, QWORD PTR $T2[rsp]
  000a7	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
  000ac	48 8b d0	 mov	 rdx, rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  000af	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b2	48 85 c0	 test	 rax, rax
  000b5	75 05		 jne	 SHORT $LN38@unstack
  000b7	48 8b c6	 mov	 rax, rsi
  000ba	eb 03		 jmp	 SHORT $LN39@unstack
$LN38@unstack:
  000bc	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN39@unstack:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  000bf	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  000c3	48 ff c9	 dec	 rcx
  000c6	48 23 4a 10	 and	 rcx, QWORD PTR [rdx+16]

; 1436 : 		return (*(end() - 1));

  000ca	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 496  : 		mat = stack2.top() * mat;

  000ce	4c 8b c3	 mov	 r8, rbx
  000d1	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR $T4[rsp]
  000d9	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  000dd	e8 00 00 00 00	 call	 ??DMatrix@geom@@QEBA?AV01@AEBV01@@Z ; geom::Matrix::operator*
  000e2	48 8b d0	 mov	 rdx, rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  000e5	48 8d 4b 04	 lea	 rcx, QWORD PTR [rbx+4]
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 212  : 	for(int i = 0; i < 16; i++)

  000e9	48 2b d3	 sub	 rdx, rbx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  000ec	41 b8 02 00 00
	00		 mov	 r8d, 2
  000f2	66 66 66 66 66
	66 0f 1f 84 00
	00 00 00 00	 npad	 14
$LL44@unstack:
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 214  : 		data[i] = mat.data[i];

  00100	8b 44 11 fc	 mov	 eax, DWORD PTR [rcx+rdx-4]
  00104	89 41 fc	 mov	 DWORD PTR [rcx-4], eax
  00107	8b 04 0a	 mov	 eax, DWORD PTR [rdx+rcx]
  0010a	89 01		 mov	 DWORD PTR [rcx], eax
  0010c	8b 44 0a 04	 mov	 eax, DWORD PTR [rdx+rcx+4]
  00110	89 41 04	 mov	 DWORD PTR [rcx+4], eax
  00113	8b 44 0a 08	 mov	 eax, DWORD PTR [rdx+rcx+8]
  00117	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  0011a	8b 44 11 0c	 mov	 eax, DWORD PTR [rcx+rdx+12]
  0011e	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  00121	8b 44 11 10	 mov	 eax, DWORD PTR [rcx+rdx+16]
  00125	89 41 10	 mov	 DWORD PTR [rcx+16], eax
  00128	8b 44 11 14	 mov	 eax, DWORD PTR [rcx+rdx+20]
  0012c	89 41 14	 mov	 DWORD PTR [rcx+20], eax
  0012f	8b 44 11 18	 mov	 eax, DWORD PTR [rcx+rdx+24]
  00133	89 41 18	 mov	 DWORD PTR [rcx+24], eax
  00136	48 8d 49 20	 lea	 rcx, QWORD PTR [rcx+32]

; 212  : 	for(int i = 0; i < 16; i++)

  0013a	49 ff c8	 dec	 r8
  0013d	75 c1		 jne	 SHORT $LL44@unstack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  0013f	48 8b 54 24 40	 mov	 rdx, QWORD PTR stack2$[rsp+32]
  00144	48 85 d2	 test	 rdx, rdx

; 1437 : 		}
; 1438 : 
; 1439 : 	const_reference back() const
; 1440 : 		{	// return last element of nonmutable sequence
; 1441 : 		return (*(end() - 1));
; 1442 : 		}
; 1443 : 
; 1444 : 	void push_front(const value_type& _Val)
; 1445 : 		{	// insert element at beginning
; 1446 : 		this->_Orphan_all();
; 1447 : 		_PUSH_FRONT_BEGIN;
; 1448 : 		this->_Getal().construct(
; 1449 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1450 : 		_PUSH_FRONT_END;
; 1451 : 		}
; 1452 : 
; 1453 : 	void pop_front()
; 1454 : 		{	// erase element at beginning
; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (empty())
; 1457 : 			_DEBUG_ERROR("deque empty before pop");
; 1458 : 		else
; 1459 : 			{	// something to erase, do it
; 1460 : 			_Orphan_off(this->_Myoff);
; 1461 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1462 : 			this->_Getal().destroy(
; 1463 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1464 : 			if (--this->_Mysize == 0)
; 1465 : 				this->_Myoff = 0;
; 1466 : 			else
; 1467 : 				++this->_Myoff;
; 1468 : 			}
; 1469 : 
; 1470 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 		if (!empty())
; 1472 : 			{	// something to erase, do it
; 1473 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1474 : 			this->_Getal().destroy(
; 1475 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1476 : 			if (--this->_Mysize == 0)
; 1477 : 				this->_Myoff = 0;
; 1478 : 			else
; 1479 : 				++this->_Myoff;
; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}
; 1483 : 
; 1484 : 	void push_back(const value_type& _Val)
; 1485 : 		{	// insert element at end
; 1486 : 		this->_Orphan_all();
; 1487 : 		_PUSH_BACK_BEGIN;
; 1488 : 		this->_Getal().construct(
; 1489 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1490 : 		_PUSH_BACK_END;
; 1491 : 		}
; 1492 : 
; 1493 : 	void pop_back()
; 1494 : 		{	// erase element at end
; 1495 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1496 : 		if (empty())
; 1497 : 			_DEBUG_ERROR("deque empty before pop");
; 1498 : 		else
; 1499 : 			{	// something to erase, do it
; 1500 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1501 : 			_Orphan_off(_Newoff);
; 1502 : 			size_type _Block = this->_Getblock(_Newoff);
; 1503 : 			this->_Getal().destroy(
; 1504 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1505 : 			if (--this->_Mysize == 0)
; 1506 : 				this->_Myoff = 0;
; 1507 : 			}
; 1508 : 
; 1509 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1510 : 		if (!empty())

  00147	74 1f		 je	 SHORT $LN82@unstack

; 1511 : 			{	// something to erase, do it
; 1512 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1513 : 			size_type _Block = this->_Getblock(_Newoff);
; 1514 : 			this->_Getal().destroy(
; 1515 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1516 : 			if (--this->_Mysize == 0)

  00149	48 ff ca	 dec	 rdx
  0014c	48 89 54 24 40	 mov	 QWORD PTR stack2$[rsp+32], rdx
  00151	48 8b 4c 24 38	 mov	 rcx, QWORD PTR stack2$[rsp+24]
  00156	48 0f 44 ce	 cmove	 rcx, rsi
  0015a	48 89 4c 24 38	 mov	 QWORD PTR stack2$[rsp+24], rcx

; 1382 : 		return (this->_Mysize == 0);

  0015f	48 85 d2	 test	 rdx, rdx
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 494  : 	while(!stack2.empty())

  00162	0f 85 28 ff ff
	ff		 jne	 $LL2@unstack
$LN82@unstack:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1222 : 		_Tidy();

  00168	48 8d 4c 24 20	 lea	 rcx, QWORD PTR stack2$[rsp]
  0016d	e8 00 00 00 00	 call	 ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00172	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stack2$[rsp]
  00177	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 500  : 	return mat;

  0017c	48 8b c3	 mov	 rax, rbx

; 501  : }

  0017f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00187	48 33 cc	 xor	 rcx, rsp
  0018a	e8 00 00 00 00	 call	 __security_check_cookie
  0018f	4c 8d 9c 24 d0
	00 00 00	 lea	 r11, QWORD PTR [rsp+208]
  00197	49 8b 5b 10	 mov	 rbx, QWORD PTR [r11+16]
  0019b	49 8b 73 20	 mov	 rsi, QWORD PTR [r11+32]
  0019f	49 8b e3	 mov	 rsp, r11
  001a2	5f		 pop	 rdi
  001a3	c3		 ret	 0
?unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ ENDP	; gfxu::MatrixStack::unstack
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
stack2$ = 32
$T1 = 72
$T2 = 80
$T3 = 104
$T4 = 128
__$ArrayPad$ = 192
this$dead$ = 224
__$ReturnUdt$ = 232
?dtor$0@?0??unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ@4HA PROC ; `gfxu::MatrixStack::unstack'::`1'::dtor$0
  00000	48 8d 8a 20 00
	00 00		 lea	 rcx, QWORD PTR stack2$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
?dtor$0@?0??unstack@MatrixStack@gfxu@@AEAA?AVMatrix@geom@@XZ@4HA ENDP ; `gfxu::MatrixStack::unstack'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?clear@MatrixStack@gfxu@@QEAAXXZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
__$ArrayPad$ = 96
this$ = 128
?clear@MatrixStack@gfxu@@QEAAXXZ PROC			; gfxu::MatrixStack::clear, COMDAT

; 532  : {

$LN75:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000a	55		 push	 rbp
  0000b	48 8b ec	 mov	 rbp, rsp
  0000e	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 45 f0	 mov	 QWORD PTR __$ArrayPad$[rbp-112], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  00020	33 ff		 xor	 edi, edi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 532  : {

  00022	48 8b d9	 mov	 rbx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  00025	48 39 79 20	 cmp	 QWORD PTR [rcx+32], rdi
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 533  : 	while(!stack.empty())

  00029	74 1b		 je	 SHORT $LN1@clear
  0002b	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  0002f	48 85 c0	 test	 rax, rax

; 1383 : 		}
; 1384 : 
; 1385 : 	allocator_type get_allocator() const _NOEXCEPT
; 1386 : 		{	// return allocator object for values
; 1387 : 		return (this->_Getal());
; 1388 : 		}
; 1389 : 
; 1390 : 	const_reference at(size_type _Pos) const
; 1391 : 		{	// subscript nonmutable sequence with checking
; 1392 : 		if (this->_Mysize <= _Pos)
; 1393 : 			_Xran();
; 1394 : 		return (*(begin() + _Pos));
; 1395 : 		}
; 1396 : 
; 1397 : 	reference at(size_type _Pos)
; 1398 : 		{	// subscript mutable sequence with checking
; 1399 : 		if (this->_Mysize <= _Pos)
; 1400 : 			_Xran();
; 1401 : 		return (*(begin() + _Pos));
; 1402 : 		}
; 1403 : 
; 1404 : 	const_reference operator[](size_type _Pos) const
; 1405 : 		{	// subscript nonmutable sequence
; 1406 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1407 : 		if (this->_Mysize <= _Pos)
; 1408 : 			_DEBUG_ERROR("deque subscript out of range");
; 1409 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1410 : 
; 1411 : 		return (*(begin() + _Pos));
; 1412 : 		}
; 1413 : 
; 1414 : 	reference operator[](size_type _Pos)
; 1415 : 		{	// subscript mutable sequence
; 1416 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1417 : 		if (this->_Mysize <= _Pos)
; 1418 : 			_DEBUG_ERROR("deque subscript out of range");
; 1419 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1420 : 
; 1421 : 		return (*(begin() + _Pos));
; 1422 : 		}
; 1423 : 
; 1424 : 	reference front()
; 1425 : 		{	// return first element of mutable sequence
; 1426 : 		return (*begin());
; 1427 : 		}
; 1428 : 
; 1429 : 	const_reference front() const
; 1430 : 		{	// return first element of nonmutable sequence
; 1431 : 		return (*begin());
; 1432 : 		}
; 1433 : 
; 1434 : 	reference back()
; 1435 : 		{	// return last element of mutable sequence
; 1436 : 		return (*(end() - 1));
; 1437 : 		}
; 1438 : 
; 1439 : 	const_reference back() const
; 1440 : 		{	// return last element of nonmutable sequence
; 1441 : 		return (*(end() - 1));
; 1442 : 		}
; 1443 : 
; 1444 : 	void push_front(const value_type& _Val)
; 1445 : 		{	// insert element at beginning
; 1446 : 		this->_Orphan_all();
; 1447 : 		_PUSH_FRONT_BEGIN;
; 1448 : 		this->_Getal().construct(
; 1449 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1450 : 		_PUSH_FRONT_END;
; 1451 : 		}
; 1452 : 
; 1453 : 	void pop_front()
; 1454 : 		{	// erase element at beginning
; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (empty())
; 1457 : 			_DEBUG_ERROR("deque empty before pop");
; 1458 : 		else
; 1459 : 			{	// something to erase, do it
; 1460 : 			_Orphan_off(this->_Myoff);
; 1461 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1462 : 			this->_Getal().destroy(
; 1463 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1464 : 			if (--this->_Mysize == 0)
; 1465 : 				this->_Myoff = 0;
; 1466 : 			else
; 1467 : 				++this->_Myoff;
; 1468 : 			}
; 1469 : 
; 1470 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 		if (!empty())
; 1472 : 			{	// something to erase, do it
; 1473 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1474 : 			this->_Getal().destroy(
; 1475 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1476 : 			if (--this->_Mysize == 0)
; 1477 : 				this->_Myoff = 0;
; 1478 : 			else
; 1479 : 				++this->_Myoff;
; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}
; 1483 : 
; 1484 : 	void push_back(const value_type& _Val)
; 1485 : 		{	// insert element at end
; 1486 : 		this->_Orphan_all();
; 1487 : 		_PUSH_BACK_BEGIN;
; 1488 : 		this->_Getal().construct(
; 1489 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1490 : 		_PUSH_BACK_END;
; 1491 : 		}
; 1492 : 
; 1493 : 	void pop_back()
; 1494 : 		{	// erase element at end
; 1495 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1496 : 		if (empty())
; 1497 : 			_DEBUG_ERROR("deque empty before pop");
; 1498 : 		else
; 1499 : 			{	// something to erase, do it
; 1500 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1501 : 			_Orphan_off(_Newoff);
; 1502 : 			size_type _Block = this->_Getblock(_Newoff);
; 1503 : 			this->_Getal().destroy(
; 1504 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1505 : 			if (--this->_Mysize == 0)
; 1506 : 				this->_Myoff = 0;
; 1507 : 			}
; 1508 : 
; 1509 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1510 : 		if (!empty())

  00032	74 0e		 je	 SHORT $LN71@clear
$LN73@clear:

; 1511 : 			{	// something to erase, do it
; 1512 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1513 : 			size_type _Block = this->_Getblock(_Newoff);
; 1514 : 			this->_Getal().destroy(
; 1515 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1516 : 			if (--this->_Mysize == 0)

  00034	48 ff c8	 dec	 rax
  00037	75 04		 jne	 SHORT $LN11@clear

; 1517 : 				this->_Myoff = 0;

  00039	48 89 79 18	 mov	 QWORD PTR [rcx+24], rdi
$LN11@clear:

; 1382 : 		return (this->_Mysize == 0);

  0003d	48 85 c0	 test	 rax, rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 533  : 	while(!stack.empty())

  00040	75 f2		 jne	 SHORT $LN73@clear
$LN71@clear:
  00042	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN1@clear:
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 143  : 		data[i] = 0.0f;

  00046	48 89 7d b0	 mov	 QWORD PTR $T2[rbp-112], rdi
  0004a	48 89 7d c0	 mov	 QWORD PTR $T2[rbp-96], rdi
  0004e	48 89 7d d8	 mov	 QWORD PTR $T2[rbp-72], rdi
  00052	48 89 7d e8	 mov	 QWORD PTR $T2[rbp-56], rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 107  : 		c.push_back(_STD move(_Val));

  00056	48 8d 55 b0	 lea	 rdx, QWORD PTR $T2[rbp-112]
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 143  : 		data[i] = 0.0f;

  0005a	48 89 7d b8	 mov	 QWORD PTR $T2[rbp-104], rdi
  0005e	48 89 7d c8	 mov	 QWORD PTR $T2[rbp-88], rdi
  00062	48 89 7d d0	 mov	 QWORD PTR $T2[rbp-80], rdi
  00066	48 89 7d e0	 mov	 QWORD PTR $T2[rbp-64], rdi

; 215  : 	}
; 216  : 
; 217  : 	return *this;
; 218  : }
; 219  : 
; 220  : Matrix Matrix::identity()
; 221  : {
; 222  : 	Matrix result;
; 223  : 	result[0] = 1.0f;

  0006a	c7 45 b0 00 00
	80 3f		 mov	 DWORD PTR $T2[rbp-112], 1065353216 ; 3f800000H

; 224  : 	result[5] = 1.0f;

  00071	c7 45 c4 00 00
	80 3f		 mov	 DWORD PTR $T2[rbp-92], 1065353216 ; 3f800000H

; 225  : 	result[10] = 1.0f;

  00078	c7 45 d8 00 00
	80 3f		 mov	 DWORD PTR $T2[rbp-72], 1065353216 ; 3f800000H

; 226  : 	result[15] = 1.0f;

  0007f	c7 45 ec 00 00
	80 3f		 mov	 DWORD PTR $T2[rbp-52], 1065353216 ; 3f800000H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 107  : 		c.push_back(_STD move(_Val));

  00086	e8 00 00 00 00	 call	 ?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAX$$QEAVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 143  : 		data[i] = 0.0f;

  0008b	48 89 7d b0	 mov	 QWORD PTR $T1[rbp-112], rdi
  0008f	48 89 7d c0	 mov	 QWORD PTR $T1[rbp-96], rdi
  00093	48 89 7d d8	 mov	 QWORD PTR $T1[rbp-72], rdi
  00097	48 89 7d e8	 mov	 QWORD PTR $T1[rbp-56], rdi

; 215  : 	}
; 216  : 
; 217  : 	return *this;
; 218  : }
; 219  : 
; 220  : Matrix Matrix::identity()
; 221  : {
; 222  : 	Matrix result;
; 223  : 	result[0] = 1.0f;

  0009b	c7 45 b0 00 00
	80 3f		 mov	 DWORD PTR $T1[rbp-112], 1065353216 ; 3f800000H

; 144  : 	}
; 145  : }
; 146  : 
; 147  : Matrix::Matrix(float* data)
; 148  : {
; 149  : 	for(int i = 0; i < 16; i++)
; 150  : 	{
; 151  : 		this->data[i] = data[i];
; 152  : 	}
; 153  : }
; 154  : 
; 155  : const float& Matrix::operator[](int index) const
; 156  : {
; 157  : 	return data[index];
; 158  : }
; 159  : 
; 160  : float& Matrix::operator[](int index)
; 161  : {
; 162  : 	return data[index];
; 163  : }
; 164  : 
; 165  : 
; 166  : Matrix Matrix::operator*(const Matrix& mat) const
; 167  : {
; 168  : 	Matrix result;
; 169  : 
; 170  : 	for(int i = 0; i < 4; i++)
; 171  : 	{
; 172  : 		for(int j = 0; j < 4; j++)
; 173  : 		{
; 174  : 			float value = 0.0f;
; 175  : 			for(int k = 0; k < 4; k++)
; 176  : 			{
; 177  : 				value += data[index(k, j)] * mat.data[index(i, k)];
; 178  : 			}
; 179  : 			result[index(i, j)] = value;
; 180  : 		}
; 181  : 	}
; 182  : 
; 183  : 	return result;
; 184  : }
; 185  : 
; 186  : Matrix Matrix::operator*(const float& scalar) const
; 187  : {
; 188  : 	Matrix result;
; 189  : 
; 190  : 	for(int i = 0; i < 16; i++)
; 191  : 	{
; 192  : 		result[i] = data[i] * scalar;
; 193  : 	}
; 194  : 
; 195  : 	return result;
; 196  : }
; 197  : 
; 198  : Vector Matrix::operator*(const Vector& vert) const
; 199  : {
; 200  : 	Vector result;
; 201  : 
; 202  : 	result.x = vert.x * data[0] + vert.y * data[1] + vert.z * data[2] + vert.w * data[3];
; 203  : 	result.y = vert.x * data[4] + vert.y * data[5] + vert.z * data[6] + vert.w * data[7];
; 204  : 	result.z = vert.x * data[8] + vert.y * data[9] + vert.z * data[10] + vert.w * data[11];
; 205  : 	result.w = vert.x * data[12] + vert.y * data[13] + vert.z * data[14] + vert.w * data[15];
; 206  : 
; 207  : 	return result;
; 208  : }
; 209  : 
; 210  : Matrix& Matrix::operator=(const Matrix& mat)
; 211  : {
; 212  : 	for(int i = 0; i < 16; i++)
; 213  : 	{
; 214  : 		data[i] = mat.data[i];

  000a2	48 8b 45 b0	 mov	 rax, QWORD PTR $T1[rbp-112]

; 224  : 	result[5] = 1.0f;

  000a6	c7 45 c4 00 00
	80 3f		 mov	 DWORD PTR $T1[rbp-92], 1065353216 ; 3f800000H

; 144  : 	}
; 145  : }
; 146  : 
; 147  : Matrix::Matrix(float* data)
; 148  : {
; 149  : 	for(int i = 0; i < 16; i++)
; 150  : 	{
; 151  : 		this->data[i] = data[i];
; 152  : 	}
; 153  : }
; 154  : 
; 155  : const float& Matrix::operator[](int index) const
; 156  : {
; 157  : 	return data[index];
; 158  : }
; 159  : 
; 160  : float& Matrix::operator[](int index)
; 161  : {
; 162  : 	return data[index];
; 163  : }
; 164  : 
; 165  : 
; 166  : Matrix Matrix::operator*(const Matrix& mat) const
; 167  : {
; 168  : 	Matrix result;
; 169  : 
; 170  : 	for(int i = 0; i < 4; i++)
; 171  : 	{
; 172  : 		for(int j = 0; j < 4; j++)
; 173  : 		{
; 174  : 			float value = 0.0f;
; 175  : 			for(int k = 0; k < 4; k++)
; 176  : 			{
; 177  : 				value += data[index(k, j)] * mat.data[index(i, k)];
; 178  : 			}
; 179  : 			result[index(i, j)] = value;
; 180  : 		}
; 181  : 	}
; 182  : 
; 183  : 	return result;
; 184  : }
; 185  : 
; 186  : Matrix Matrix::operator*(const float& scalar) const
; 187  : {
; 188  : 	Matrix result;
; 189  : 
; 190  : 	for(int i = 0; i < 16; i++)
; 191  : 	{
; 192  : 		result[i] = data[i] * scalar;
; 193  : 	}
; 194  : 
; 195  : 	return result;
; 196  : }
; 197  : 
; 198  : Vector Matrix::operator*(const Vector& vert) const
; 199  : {
; 200  : 	Vector result;
; 201  : 
; 202  : 	result.x = vert.x * data[0] + vert.y * data[1] + vert.z * data[2] + vert.w * data[3];
; 203  : 	result.y = vert.x * data[4] + vert.y * data[5] + vert.z * data[6] + vert.w * data[7];
; 204  : 	result.z = vert.x * data[8] + vert.y * data[9] + vert.z * data[10] + vert.w * data[11];
; 205  : 	result.w = vert.x * data[12] + vert.y * data[13] + vert.z * data[14] + vert.w * data[15];
; 206  : 
; 207  : 	return result;
; 208  : }
; 209  : 
; 210  : Matrix& Matrix::operator=(const Matrix& mat)
; 211  : {
; 212  : 	for(int i = 0; i < 16; i++)
; 213  : 	{
; 214  : 		data[i] = mat.data[i];

  000ad	48 89 43 28	 mov	 QWORD PTR [rbx+40], rax
  000b1	48 8b 45 c0	 mov	 rax, QWORD PTR $T1[rbp-96]
  000b5	48 89 7b 30	 mov	 QWORD PTR [rbx+48], rdi
  000b9	48 89 43 38	 mov	 QWORD PTR [rbx+56], rax
  000bd	48 89 7b 40	 mov	 QWORD PTR [rbx+64], rdi
  000c1	48 89 7b 48	 mov	 QWORD PTR [rbx+72], rdi

; 225  : 	result[10] = 1.0f;

  000c5	c7 45 d8 00 00
	80 3f		 mov	 DWORD PTR $T1[rbp-72], 1065353216 ; 3f800000H

; 144  : 	}
; 145  : }
; 146  : 
; 147  : Matrix::Matrix(float* data)
; 148  : {
; 149  : 	for(int i = 0; i < 16; i++)
; 150  : 	{
; 151  : 		this->data[i] = data[i];
; 152  : 	}
; 153  : }
; 154  : 
; 155  : const float& Matrix::operator[](int index) const
; 156  : {
; 157  : 	return data[index];
; 158  : }
; 159  : 
; 160  : float& Matrix::operator[](int index)
; 161  : {
; 162  : 	return data[index];
; 163  : }
; 164  : 
; 165  : 
; 166  : Matrix Matrix::operator*(const Matrix& mat) const
; 167  : {
; 168  : 	Matrix result;
; 169  : 
; 170  : 	for(int i = 0; i < 4; i++)
; 171  : 	{
; 172  : 		for(int j = 0; j < 4; j++)
; 173  : 		{
; 174  : 			float value = 0.0f;
; 175  : 			for(int k = 0; k < 4; k++)
; 176  : 			{
; 177  : 				value += data[index(k, j)] * mat.data[index(i, k)];
; 178  : 			}
; 179  : 			result[index(i, j)] = value;
; 180  : 		}
; 181  : 	}
; 182  : 
; 183  : 	return result;
; 184  : }
; 185  : 
; 186  : Matrix Matrix::operator*(const float& scalar) const
; 187  : {
; 188  : 	Matrix result;
; 189  : 
; 190  : 	for(int i = 0; i < 16; i++)
; 191  : 	{
; 192  : 		result[i] = data[i] * scalar;
; 193  : 	}
; 194  : 
; 195  : 	return result;
; 196  : }
; 197  : 
; 198  : Vector Matrix::operator*(const Vector& vert) const
; 199  : {
; 200  : 	Vector result;
; 201  : 
; 202  : 	result.x = vert.x * data[0] + vert.y * data[1] + vert.z * data[2] + vert.w * data[3];
; 203  : 	result.y = vert.x * data[4] + vert.y * data[5] + vert.z * data[6] + vert.w * data[7];
; 204  : 	result.z = vert.x * data[8] + vert.y * data[9] + vert.z * data[10] + vert.w * data[11];
; 205  : 	result.w = vert.x * data[12] + vert.y * data[13] + vert.z * data[14] + vert.w * data[15];
; 206  : 
; 207  : 	return result;
; 208  : }
; 209  : 
; 210  : Matrix& Matrix::operator=(const Matrix& mat)
; 211  : {
; 212  : 	for(int i = 0; i < 16; i++)
; 213  : 	{
; 214  : 		data[i] = mat.data[i];

  000cc	48 8b 45 d8	 mov	 rax, QWORD PTR $T1[rbp-72]

; 226  : 	result[15] = 1.0f;

  000d0	c7 45 ec 00 00
	80 3f		 mov	 DWORD PTR $T1[rbp-52], 1065353216 ; 3f800000H

; 144  : 	}
; 145  : }
; 146  : 
; 147  : Matrix::Matrix(float* data)
; 148  : {
; 149  : 	for(int i = 0; i < 16; i++)
; 150  : 	{
; 151  : 		this->data[i] = data[i];
; 152  : 	}
; 153  : }
; 154  : 
; 155  : const float& Matrix::operator[](int index) const
; 156  : {
; 157  : 	return data[index];
; 158  : }
; 159  : 
; 160  : float& Matrix::operator[](int index)
; 161  : {
; 162  : 	return data[index];
; 163  : }
; 164  : 
; 165  : 
; 166  : Matrix Matrix::operator*(const Matrix& mat) const
; 167  : {
; 168  : 	Matrix result;
; 169  : 
; 170  : 	for(int i = 0; i < 4; i++)
; 171  : 	{
; 172  : 		for(int j = 0; j < 4; j++)
; 173  : 		{
; 174  : 			float value = 0.0f;
; 175  : 			for(int k = 0; k < 4; k++)
; 176  : 			{
; 177  : 				value += data[index(k, j)] * mat.data[index(i, k)];
; 178  : 			}
; 179  : 			result[index(i, j)] = value;
; 180  : 		}
; 181  : 	}
; 182  : 
; 183  : 	return result;
; 184  : }
; 185  : 
; 186  : Matrix Matrix::operator*(const float& scalar) const
; 187  : {
; 188  : 	Matrix result;
; 189  : 
; 190  : 	for(int i = 0; i < 16; i++)
; 191  : 	{
; 192  : 		result[i] = data[i] * scalar;
; 193  : 	}
; 194  : 
; 195  : 	return result;
; 196  : }
; 197  : 
; 198  : Vector Matrix::operator*(const Vector& vert) const
; 199  : {
; 200  : 	Vector result;
; 201  : 
; 202  : 	result.x = vert.x * data[0] + vert.y * data[1] + vert.z * data[2] + vert.w * data[3];
; 203  : 	result.y = vert.x * data[4] + vert.y * data[5] + vert.z * data[6] + vert.w * data[7];
; 204  : 	result.z = vert.x * data[8] + vert.y * data[9] + vert.z * data[10] + vert.w * data[11];
; 205  : 	result.w = vert.x * data[12] + vert.y * data[13] + vert.z * data[14] + vert.w * data[15];
; 206  : 
; 207  : 	return result;
; 208  : }
; 209  : 
; 210  : Matrix& Matrix::operator=(const Matrix& mat)
; 211  : {
; 212  : 	for(int i = 0; i < 16; i++)
; 213  : 	{
; 214  : 		data[i] = mat.data[i];

  000d7	48 89 43 50	 mov	 QWORD PTR [rbx+80], rax
  000db	48 8b 45 e8	 mov	 rax, QWORD PTR $T1[rbp-56]
  000df	48 89 7b 58	 mov	 QWORD PTR [rbx+88], rdi
  000e3	48 89 43 60	 mov	 QWORD PTR [rbx+96], rax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 539  : 	changed = true;

  000e7	c6 43 68 01	 mov	 BYTE PTR [rbx+104], 1

; 540  : }

  000eb	48 8b 4d f0	 mov	 rcx, QWORD PTR __$ArrayPad$[rbp-112]
  000ef	48 33 cc	 xor	 rcx, rsp
  000f2	e8 00 00 00 00	 call	 __security_check_cookie
  000f7	4c 8d 5c 24 70	 lea	 r11, QWORD PTR [rsp+112]
  000fc	49 8b 5b 18	 mov	 rbx, QWORD PTR [r11+24]
  00100	49 8b 7b 20	 mov	 rdi, QWORD PTR [r11+32]
  00104	49 8b e3	 mov	 rsp, r11
  00107	5d		 pop	 rbp
  00108	c3		 ret	 0
?clear@MatrixStack@gfxu@@QEAAXXZ ENDP			; gfxu::MatrixStack::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?uploadChanges@Uniforms@gfxu@@SAXXZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 112
__$ArrayPad$ = 176
?uploadChanges@Uniforms@gfxu@@SAXXZ PROC		; gfxu::Uniforms::uploadChanges, COMDAT

; 560  : {

$LN28:
  00000	40 53		 push	 rbx
  00002	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 561  : 	if(forceUpload | (MMS.changed & (ShaderProgram::current->modelview >= 0)))

  0001b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ?current@ShaderProgram@gfxu@@2PEAV12@EA ; gfxu::ShaderProgram::current
  00022	0f b6 05 68 00
	00 00		 movzx	 eax, BYTE PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+104
  00029	44 0f b6 0d 00
	00 00 00	 movzx	 r9d, BYTE PTR ?forceUpload@Uniforms@gfxu@@0_NA ; gfxu::Uniforms::forceUpload
  00031	45 8b 50 20	 mov	 r10d, DWORD PTR [r8+32]
  00035	33 db		 xor	 ebx, ebx
  00037	45 85 d2	 test	 r10d, r10d
  0003a	8b cb		 mov	 ecx, ebx
  0003c	0f 99 c1	 setns	 cl
  0003f	23 c8		 and	 ecx, eax
  00041	41 0b c9	 or	 ecx, r9d
  00044	84 c9		 test	 cl, cl
  00046	74 59		 je	 SHORT $LN6@uploadChan

; 544  : 	return topmost;

  00048	0f 10 05 28 00
	00 00		 movups	 xmm0, XMMWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+40
  0004f	0f 10 0d 38 00
	00 00		 movups	 xmm1, XMMWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+56

; 562  : 	{
; 563  : 		glUniformMatrix4fv(ShaderProgram::current->modelview, 1, false, MMS.getTopmost().data);

  00056	4c 8d 4c 24 30	 lea	 r9, QWORD PTR $T1[rsp]
  0005b	8d 53 01	 lea	 edx, QWORD PTR [rbx+1]
  0005e	45 33 c0	 xor	 r8d, r8d
  00061	41 8b ca	 mov	 ecx, r10d

; 544  : 	return topmost;

  00064	0f 29 44 24 30	 movaps	 XMMWORD PTR $T1[rsp], xmm0
  00069	0f 29 4c 24 40	 movaps	 XMMWORD PTR $T1[rsp+16], xmm1
  0006e	0f 10 05 48 00
	00 00		 movups	 xmm0, XMMWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+72
  00075	0f 10 0d 58 00
	00 00		 movups	 xmm1, XMMWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+88
  0007c	0f 29 44 24 50	 movaps	 XMMWORD PTR $T1[rsp+32], xmm0
  00081	0f 29 4c 24 60	 movaps	 XMMWORD PTR $T1[rsp+48], xmm1

; 562  : 	{
; 563  : 		glUniformMatrix4fv(ShaderProgram::current->modelview, 1, false, MMS.getTopmost().data);

  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __glewUniformMatrix4fv

; 564  : 		MMS.changed = false;

  0008c	44 0f b6 0d 00
	00 00 00	 movzx	 r9d, BYTE PTR ?forceUpload@Uniforms@gfxu@@0_NA ; gfxu::Uniforms::forceUpload
  00094	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ?current@ShaderProgram@gfxu@@2PEAV12@EA ; gfxu::ShaderProgram::current
  0009b	88 1d 68 00 00
	00		 mov	 BYTE PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+104, bl
$LN6@uploadChan:

; 565  : 	}
; 566  : 
; 567  : 	if(forceUpload | (PMS.changed & (ShaderProgram::current->projection >= 0)))

  000a1	0f b6 05 68 00
	00 00		 movzx	 eax, BYTE PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+104
  000a8	45 8b 50 24	 mov	 r10d, DWORD PTR [r8+36]
  000ac	8b cb		 mov	 ecx, ebx
  000ae	45 85 d2	 test	 r10d, r10d
  000b1	0f 99 c1	 setns	 cl
  000b4	23 c8		 and	 ecx, eax
  000b6	41 0f b6 c1	 movzx	 eax, r9b
  000ba	0b c8		 or	 ecx, eax
  000bc	84 c9		 test	 cl, cl
  000be	74 63		 je	 SHORT $LN5@uploadChan

; 544  : 	return topmost;

  000c0	0f 10 05 28 00
	00 00		 movups	 xmm0, XMMWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+40
  000c7	0f 10 0d 38 00
	00 00		 movups	 xmm1, XMMWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+56

; 568  : 	{
; 569  : 		glUniformMatrix4fv(ShaderProgram::current->projection, 1, false, PMS.getTopmost().data);

  000ce	45 33 c0	 xor	 r8d, r8d
  000d1	4c 8d 4c 24 70	 lea	 r9, QWORD PTR $T2[rsp]
  000d6	41 8b ca	 mov	 ecx, r10d
  000d9	41 8d 50 01	 lea	 edx, QWORD PTR [r8+1]

; 544  : 	return topmost;

  000dd	0f 29 44 24 70	 movaps	 XMMWORD PTR $T2[rsp], xmm0
  000e2	0f 29 8c 24 80
	00 00 00	 movaps	 XMMWORD PTR $T2[rsp+16], xmm1
  000ea	0f 10 05 48 00
	00 00		 movups	 xmm0, XMMWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+72
  000f1	0f 10 0d 58 00
	00 00		 movups	 xmm1, XMMWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+88
  000f8	0f 29 84 24 90
	00 00 00	 movaps	 XMMWORD PTR $T2[rsp+32], xmm0
  00100	0f 29 8c 24 a0
	00 00 00	 movaps	 XMMWORD PTR $T2[rsp+48], xmm1

; 568  : 	{
; 569  : 		glUniformMatrix4fv(ShaderProgram::current->projection, 1, false, PMS.getTopmost().data);

  00108	ff 15 00 00 00
	00		 call	 QWORD PTR __glewUniformMatrix4fv

; 570  : 		PMS.changed = false;

  0010e	44 0f b6 0d 00
	00 00 00	 movzx	 r9d, BYTE PTR ?forceUpload@Uniforms@gfxu@@0_NA ; gfxu::Uniforms::forceUpload
  00116	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ?current@ShaderProgram@gfxu@@2PEAV12@EA ; gfxu::ShaderProgram::current
  0011d	88 1d 68 00 00
	00		 mov	 BYTE PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+104, bl
$LN5@uploadChan:

; 571  : 	}
; 572  : 
; 573  : 	if(forceUpload | (color.changed & (ShaderProgram::current->const_color >= 0)))

  00123	0f b6 05 10 00
	00 00		 movzx	 eax, BYTE PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+16
  0012a	41 8b 48 28	 mov	 ecx, DWORD PTR [r8+40]
  0012e	8b d3		 mov	 edx, ebx
  00130	85 c9		 test	 ecx, ecx
  00132	0f 99 c2	 setns	 dl
  00135	23 d0		 and	 edx, eax
  00137	41 0f b6 c1	 movzx	 eax, r9b
  0013b	0b d0		 or	 edx, eax
  0013d	84 d2		 test	 dl, dl
  0013f	74 3b		 je	 SHORT $LN4@uploadChan
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 10   : {

  00141	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+12
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 576  : 		glUniform4f(ShaderProgram::current->const_color, vec.x, vec.y, vec.z, vec.w);

  00149	f3 0f 10 1d 08
	00 00 00	 movss	 xmm3, DWORD PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+8
  00151	f3 0f 10 15 04
	00 00 00	 movss	 xmm2, DWORD PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+4
  00159	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?color@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A
  00161	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00167	ff 15 00 00 00
	00		 call	 QWORD PTR __glewUniform4f
  0016d	44 0f b6 0d 00
	00 00 00	 movzx	 r9d, BYTE PTR ?forceUpload@Uniforms@gfxu@@0_NA ; gfxu::Uniforms::forceUpload
  00175	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ?current@ShaderProgram@gfxu@@2PEAV12@EA ; gfxu::ShaderProgram::current
$LN4@uploadChan:

; 577  : 	}
; 578  : 
; 579  : 	if(forceUpload | (camPos.changed & (ShaderProgram::current->cam_pos >= 0)))

  0017c	0f b6 05 10 00
	00 00		 movzx	 eax, BYTE PTR ?camPos@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+16
  00183	41 8b 48 2c	 mov	 ecx, DWORD PTR [r8+44]
  00187	8b d3		 mov	 edx, ebx
  00189	85 c9		 test	 ecx, ecx
  0018b	0f 99 c2	 setns	 dl
  0018e	23 d0		 and	 edx, eax
  00190	41 0f b6 c1	 movzx	 eax, r9b
  00194	0b d0		 or	 edx, eax
  00196	84 d2		 test	 dl, dl
  00198	74 3b		 je	 SHORT $LN3@uploadChan
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 10   : {

  0019a	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?camPos@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+12
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 582  : 		glUniform4f(ShaderProgram::current->cam_pos, vec.x, vec.y, vec.z, vec.w);

  001a2	f3 0f 10 1d 08
	00 00 00	 movss	 xmm3, DWORD PTR ?camPos@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+8
  001aa	f3 0f 10 15 04
	00 00 00	 movss	 xmm2, DWORD PTR ?camPos@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+4
  001b2	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?camPos@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A
  001ba	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  001c0	ff 15 00 00 00
	00		 call	 QWORD PTR __glewUniform4f
  001c6	44 0f b6 0d 00
	00 00 00	 movzx	 r9d, BYTE PTR ?forceUpload@Uniforms@gfxu@@0_NA ; gfxu::Uniforms::forceUpload
  001ce	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ?current@ShaderProgram@gfxu@@2PEAV12@EA ; gfxu::ShaderProgram::current
$LN3@uploadChan:

; 583  : 	}
; 584  : 
; 585  : 	if(forceUpload | (fogColor.changed & (ShaderProgram::current->fog_color >= 0)))

  001d5	0f b6 05 10 00
	00 00		 movzx	 eax, BYTE PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+16
  001dc	41 8b 48 30	 mov	 ecx, DWORD PTR [r8+48]
  001e0	8b d3		 mov	 edx, ebx
  001e2	85 c9		 test	 ecx, ecx
  001e4	0f 99 c2	 setns	 dl
  001e7	23 d0		 and	 edx, eax
  001e9	41 0f b6 c1	 movzx	 eax, r9b
  001ed	0b d0		 or	 edx, eax
  001ef	84 d2		 test	 dl, dl
  001f1	74 3b		 je	 SHORT $LN2@uploadChan
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 10   : {

  001f3	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+12
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 588  : 		glUniform4f(ShaderProgram::current->fog_color, vec.x, vec.y, vec.z, vec.w);

  001fb	f3 0f 10 1d 08
	00 00 00	 movss	 xmm3, DWORD PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+8
  00203	f3 0f 10 15 04
	00 00 00	 movss	 xmm2, DWORD PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A+4
  0020b	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?fogColor@Uniforms@gfxu@@2V?$Uniform@VVector@geom@@@2@A
  00213	f3 0f 11 44 24
	20		 movss	 DWORD PTR [rsp+32], xmm0
  00219	ff 15 00 00 00
	00		 call	 QWORD PTR __glewUniform4f
  0021f	44 0f b6 0d 00
	00 00 00	 movzx	 r9d, BYTE PTR ?forceUpload@Uniforms@gfxu@@0_NA ; gfxu::Uniforms::forceUpload
  00227	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ?current@ShaderProgram@gfxu@@2PEAV12@EA ; gfxu::ShaderProgram::current
$LN2@uploadChan:

; 589  : 	}
; 590  : 
; 591  : 	if(forceUpload | (fogDist.changed & (ShaderProgram::current->fog_dist >= 0)))

  0022e	0f b6 05 04 00
	00 00		 movzx	 eax, BYTE PTR ?fogDist@Uniforms@gfxu@@2V?$Uniform@M@2@A+4
  00235	41 8b 48 34	 mov	 ecx, DWORD PTR [r8+52]
  00239	85 c9		 test	 ecx, ecx
  0023b	0f 99 c3	 setns	 bl
  0023e	23 d8		 and	 ebx, eax
  00240	41 0f b6 c1	 movzx	 eax, r9b
  00244	0b d8		 or	 ebx, eax
  00246	84 db		 test	 bl, bl
  00248	74 0e		 je	 SHORT $LN1@uploadChan

; 592  : 	{
; 593  : 		glUniform1f(ShaderProgram::current->fog_dist, fogDist.get());

  0024a	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?fogDist@Uniforms@gfxu@@2V?$Uniform@M@2@A
  00252	ff 15 00 00 00
	00		 call	 QWORD PTR __glewUniform1f
$LN1@uploadChan:

; 594  : 	}
; 595  : }

  00258	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00260	48 33 cc	 xor	 rcx, rsp
  00263	e8 00 00 00 00	 call	 __security_check_cookie
  00268	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0026f	5b		 pop	 rbx
  00270	c3		 ret	 0
?uploadChanges@Uniforms@gfxu@@SAXXZ ENDP		; gfxu::Uniforms::uploadChanges
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?setForceUpload@Uniforms@gfxu@@SAXXZ
_TEXT	SEGMENT
?setForceUpload@Uniforms@gfxu@@SAXXZ PROC		; gfxu::Uniforms::setForceUpload, COMDAT

; 605  : 	MMS.changed = PMS.changed = true;

  00000	c6 05 68 00 00
	00 01		 mov	 BYTE PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+104, 1
  00007	c6 05 68 00 00
	00 01		 mov	 BYTE PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+104, 1

; 606  : }

  0000e	c3		 ret	 0
?setForceUpload@Uniforms@gfxu@@SAXXZ ENDP		; gfxu::Uniforms::setForceUpload
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
text$yc	SEGMENT
$T1 = 32
_Alproxy$2 = 64
??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ PROC	; `dynamic initializer for 'gfxu::Uniforms::MMS'', COMDAT

; 609  : MatrixStack Uniforms::MMS;

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 899  : 			_Alproxy;

  0000d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _Alproxy$2[rsp]
  00012	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00017	b9 10 00 00 00	 mov	 ecx, 16
  0001c	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00021	48 85 c0	 test	 rax, rax
  00024	75 06		 jne	 SHORT $LN27@MMS

; 29   : 		_Xbad_alloc();	// report no memory

  00026	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  0002b	cc		 int	 3
$LN27@MMS:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 900  : 		this->_Myproxy = _Alproxy.allocate(1);

  0002c	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A, rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 67   : 		{	// construct from pointers

  00033	33 d2		 xor	 edx, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00035	48 89 10	 mov	 QWORD PTR [rax], rdx
  00038	48 89 50 08	 mov	 QWORD PTR [rax+8], rdx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 902  : 		this->_Myproxy->_Mycont = this;

  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?MMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::MMS
  00043	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A
  0004a	48 89 08	 mov	 QWORD PTR [rax], rcx
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 143  : 		data[i] = 0.0f;

  0004d	48 89 15 28 00
	00 00		 mov	 QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+40, rdx
  00054	48 89 15 30 00
	00 00		 mov	 QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+48, rdx
  0005b	48 89 15 38 00
	00 00		 mov	 QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+56, rdx
  00062	48 89 15 40 00
	00 00		 mov	 QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+64, rdx
  00069	48 89 15 48 00
	00 00		 mov	 QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+72, rdx
  00070	48 89 15 50 00
	00 00		 mov	 QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+80, rdx
  00077	48 89 15 58 00
	00 00		 mov	 QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+88, rdx
  0007e	48 89 15 60 00
	00 00		 mov	 QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A+96, rdx
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 487  : 	clear();

  00085	e8 00 00 00 00	 call	 ?clear@MatrixStack@gfxu@@QEAAXXZ ; gfxu::MatrixStack::clear
  0008a	90		 npad	 1

; 609  : MatrixStack Uniforms::MMS;

  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__F?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ; `dynamic atexit destructor for 'gfxu::Uniforms::MMS''
  00092	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00096	e9 00 00 00 00	 jmp	 atexit
$LN66@MMS:
??__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ENDP	; `dynamic initializer for 'gfxu::Uniforms::MMS''
text$yc	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
_Alproxy$2 = 64
?dtor$0@?0???__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ@4HA PROC ; ``dynamic initializer for 'gfxu::Uniforms::MMS'''::`1'::dtor$0
  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?MMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::MMS
  00007	e9 00 00 00 00	 jmp	 ??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
?dtor$0@?0???__E?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ@4HA ENDP ; ``dynamic initializer for 'gfxu::Uniforms::MMS'''::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??__F?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
text$yd	SEGMENT
_Alproxy$1 = 48
??__F?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ PROC	; `dynamic atexit destructor for 'gfxu::Uniforms::MMS'', COMDAT
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1222 : 		_Tidy();

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?MMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::MMS
  0000b	e8 00 00 00 00	 call	 ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy

; 886  : 
; 887  : 	void _Change_alloc(const _Alty&)
; 888  : 		{	// replace old allocator
; 889  : 		}
; 890  : 
; 891  : 	void _Swap_alloc(_Myt& _Right)
; 892  : 		{	// swap allocators
; 893  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 894  : 		}
; 895  : 
; 896  : 	void _Alloc_proxy()
; 897  : 		{	// construct proxy from _Alval
; 898  : 		typename _Alty::template rebind<_Container_proxy>::other
; 899  : 			_Alproxy;
; 900  : 		this->_Myproxy = _Alproxy.allocate(1);
; 901  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 902  : 		this->_Myproxy->_Mycont = this;
; 903  : 		}
; 904  : 
; 905  : 	void _Free_proxy()
; 906  : 		{	// destroy proxy
; 907  : 		typename _Alty::template rebind<_Container_proxy>::other
; 908  : 			_Alproxy;

  00010	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Alproxy$1[rsp]
  00015	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >

; 909  : 		this->_Orphan_all();
; 910  : 		_Alproxy.destroy(this->_Myproxy);

  0001a	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A
  00026	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 912  : 		this->_Myproxy = 0;

  0002b	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR ?MMS@Uniforms@gfxu@@2VMatrixStack@2@A, 0
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 885  : 		}

  0003a	e9 00 00 00 00	 jmp	 ??1?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QEAA@XZ
??__F?MMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ENDP	; `dynamic atexit destructor for 'gfxu::Uniforms::MMS''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??1MatrixStack@gfxu@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1MatrixStack@gfxu@@QEAA@XZ PROC			; gfxu::MatrixStack::~MatrixStack, COMDAT
$LN18:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1222 : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0000e	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00011	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 912  : 		this->_Myproxy = 0;

  00016	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0
  0001d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00021	5b		 pop	 rbx
  00022	c3		 ret	 0
??1MatrixStack@gfxu@@QEAA@XZ ENDP			; gfxu::MatrixStack::~MatrixStack
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
text$yc	SEGMENT
$T1 = 32
_Alproxy$2 = 64
??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ PROC	; `dynamic initializer for 'gfxu::Uniforms::PMS'', COMDAT

; 610  : MatrixStack Uniforms::PMS;

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 899  : 			_Alproxy;

  0000d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _Alproxy$2[rsp]
  00012	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00017	b9 10 00 00 00	 mov	 ecx, 16
  0001c	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00021	48 85 c0	 test	 rax, rax
  00024	75 06		 jne	 SHORT $LN27@PMS

; 29   : 		_Xbad_alloc();	// report no memory

  00026	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  0002b	cc		 int	 3
$LN27@PMS:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 900  : 		this->_Myproxy = _Alproxy.allocate(1);

  0002c	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A, rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 67   : 		{	// construct from pointers

  00033	33 d2		 xor	 edx, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00035	48 89 10	 mov	 QWORD PTR [rax], rdx
  00038	48 89 50 08	 mov	 QWORD PTR [rax+8], rdx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 902  : 		this->_Myproxy->_Mycont = this;

  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?PMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::PMS
  00043	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A
  0004a	48 89 08	 mov	 QWORD PTR [rax], rcx
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 143  : 		data[i] = 0.0f;

  0004d	48 89 15 28 00
	00 00		 mov	 QWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+40, rdx
  00054	48 89 15 30 00
	00 00		 mov	 QWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+48, rdx
  0005b	48 89 15 38 00
	00 00		 mov	 QWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+56, rdx
  00062	48 89 15 40 00
	00 00		 mov	 QWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+64, rdx
  00069	48 89 15 48 00
	00 00		 mov	 QWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+72, rdx
  00070	48 89 15 50 00
	00 00		 mov	 QWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+80, rdx
  00077	48 89 15 58 00
	00 00		 mov	 QWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+88, rdx
  0007e	48 89 15 60 00
	00 00		 mov	 QWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A+96, rdx
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 487  : 	clear();

  00085	e8 00 00 00 00	 call	 ?clear@MatrixStack@gfxu@@QEAAXXZ ; gfxu::MatrixStack::clear
  0008a	90		 npad	 1

; 610  : MatrixStack Uniforms::PMS;

  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__F?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ; `dynamic atexit destructor for 'gfxu::Uniforms::PMS''
  00092	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00096	e9 00 00 00 00	 jmp	 atexit
$LN66@PMS:
??__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ENDP	; `dynamic initializer for 'gfxu::Uniforms::PMS''
text$yc	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
_Alproxy$2 = 64
?dtor$0@?0???__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ@4HA PROC ; ``dynamic initializer for 'gfxu::Uniforms::PMS'''::`1'::dtor$0
  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?PMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::PMS
  00007	e9 00 00 00 00	 jmp	 ??1?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
?dtor$0@?0???__E?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ@4HA ENDP ; ``dynamic initializer for 'gfxu::Uniforms::PMS'''::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??__F?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ
text$yd	SEGMENT
_Alproxy$1 = 48
??__F?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ PROC	; `dynamic atexit destructor for 'gfxu::Uniforms::PMS'', COMDAT
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1222 : 		_Tidy();

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?PMS@Uniforms@gfxu@@2VMatrixStack@2@A ; gfxu::Uniforms::PMS
  0000b	e8 00 00 00 00	 call	 ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy

; 886  : 
; 887  : 	void _Change_alloc(const _Alty&)
; 888  : 		{	// replace old allocator
; 889  : 		}
; 890  : 
; 891  : 	void _Swap_alloc(_Myt& _Right)
; 892  : 		{	// swap allocators
; 893  : 		_Swap_adl(this->_Myproxy, _Right._Myproxy);
; 894  : 		}
; 895  : 
; 896  : 	void _Alloc_proxy()
; 897  : 		{	// construct proxy from _Alval
; 898  : 		typename _Alty::template rebind<_Container_proxy>::other
; 899  : 			_Alproxy;
; 900  : 		this->_Myproxy = _Alproxy.allocate(1);
; 901  : 		_Alproxy.construct(this->_Myproxy, _Container_proxy());
; 902  : 		this->_Myproxy->_Mycont = this;
; 903  : 		}
; 904  : 
; 905  : 	void _Free_proxy()
; 906  : 		{	// destroy proxy
; 907  : 		typename _Alty::template rebind<_Container_proxy>::other
; 908  : 			_Alproxy;

  00010	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Alproxy$1[rsp]
  00015	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> >

; 909  : 		this->_Orphan_all();
; 910  : 		_Alproxy.destroy(this->_Myproxy);

  0001a	e8 00 00 00 00	 call	 ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAAXPEAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A
  00026	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 912  : 		this->_Myproxy = 0;

  0002b	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR ?PMS@Uniforms@gfxu@@2VMatrixStack@2@A, 0
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H

; 885  : 		}

  0003a	e9 00 00 00 00	 jmp	 ??1?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QEAA@XZ
??__F?PMS@Uniforms@gfxu@@2VMatrixStack@2@A@@YAXXZ ENDP	; `dynamic atexit destructor for 'gfxu::Uniforms::PMS''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
_TEXT	SEGMENT
$T1 = 32
fileName$GSCopy$ = 72
__$ArrayPad$ = 80
this$ = 112
fileName$ = 120
?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; gfxu::Texture2D::init, COMDAT

; 658  : {

$LN83:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	57		 push	 rdi
  00004	48 83 ec 60	 sub	 rsp, 96			; 00000060H
  00008	49 c7 43 d8 fe
	ff ff ff	 mov	 QWORD PTR [r11-40], -2
  00010	49 89 5b 18	 mov	 QWORD PTR [r11+24], rbx
  00014	49 89 73 20	 mov	 QWORD PTR [r11+32], rsi
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00027	48 8b fa	 mov	 rdi, rdx
  0002a	48 8b d9	 mov	 rbx, rcx
  0002d	49 89 53 e0	 mov	 QWORD PTR [r11-32], rdx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00031	49 c7 43 d0 07
	00 00 00	 mov	 QWORD PTR [r11-48], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00039	33 f6		 xor	 esi, esi
  0003b	49 89 73 c8	 mov	 QWORD PTR [r11-56], rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0003f	66 89 74 24 20	 mov	 WORD PTR $T1[rsp], si
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 735  : 		assign(_Right, 0, npos);

  00044	49 83 c9 ff	 or	 r9, -1
  00048	45 33 c0	 xor	 r8d, r8d
  0004b	49 8d 4b b8	 lea	 rcx, QWORD PTR [r11-72]
  0004f	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 659  : 	data = IOUtil::readPNG(fileName, width, height);

  00054	4c 8d 43 24	 lea	 r8, QWORD PTR [rbx+36]
  00058	48 8d 53 20	 lea	 rdx, QWORD PTR [rbx+32]
  0005c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00061	e8 00 00 00 00	 call	 ?readPNG@IOUtil@@YAPEAEV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEAI1@Z ; IOUtil::readPNG
  00066	48 89 43 18	 mov	 QWORD PTR [rbx+24], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)

  0006a	48 83 7f 18 08	 cmp	 QWORD PTR [rdi+24], 8
  0006f	72 08		 jb	 SHORT $LN71@init
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00071	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00074	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN71@init:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00079	48 c7 47 18 07
	00 00 00	 mov	 QWORD PTR [rdi+24], 7

; 736  : 		}
; 737  : 
; 738  :  #if _HAS_CPP0X
; 739  : 	basic_string(const _Myt& _Right, const _Alloc& _Al)
; 740  : 		: _Mybase(_Al)
; 741  : 		{	// construct by copying with allocator
; 742  : 		_Tidy();
; 743  : 		assign(_Right, 0, npos);
; 744  : 		}
; 745  :  #endif /* _HAS_CPP0X */
; 746  : 
; 747  : 	basic_string()
; 748  : 		: _Mybase()
; 749  : 		{	// construct empty string
; 750  : 		_Tidy();
; 751  : 		}
; 752  : 
; 753  : 	explicit basic_string(const _Alloc& _Al)
; 754  : 		: _Mybase(_Al)
; 755  : 		{	// construct empty string with allocator
; 756  : 		_Tidy();
; 757  : 		}
; 758  : 
; 759  : 	basic_string(const _Myt& _Right, size_type _Roff,
; 760  : 		size_type _Count = npos)
; 761  : 		: _Mybase(_Right._Getal())
; 762  : 		{	// construct from _Right [_Roff, _Roff + _Count)
; 763  : 		_Tidy();
; 764  : 		assign(_Right, _Roff, _Count);
; 765  : 		}
; 766  : 
; 767  : 	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
; 768  : 		const _Alloc& _Al)
; 769  : 		: _Mybase(_Al)
; 770  : 		{	// construct from _Right [_Roff, _Roff + _Count) with allocator
; 771  : 		_Tidy();
; 772  : 		assign(_Right, _Roff, _Count);
; 773  : 		}
; 774  : 
; 775  : 	basic_string(const _Elem *_Ptr, size_type _Count)
; 776  : 		: _Mybase()
; 777  : 		{	// construct from [_Ptr, _Ptr + _Count)
; 778  : 		_Tidy();
; 779  : 		assign(_Ptr, _Count);
; 780  : 		}
; 781  : 
; 782  : 	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
; 783  : 		: _Mybase(_Al)
; 784  : 		{	// construct from [_Ptr, _Ptr + _Count) with allocator
; 785  : 		_Tidy();
; 786  : 		assign(_Ptr, _Count);
; 787  : 		}
; 788  : 
; 789  : 	basic_string(const _Elem *_Ptr)
; 790  : 		: _Mybase()
; 791  : 		{	// construct from [_Ptr, <null>)
; 792  : 		_Tidy();
; 793  : 		assign(_Ptr);
; 794  : 		}
; 795  : 
; 796  : 	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
; 797  : 		: _Mybase(_Al)
; 798  : 		{	// construct from [_Ptr, <null>) with allocator
; 799  : 		_Tidy();
; 800  : 		assign(_Ptr);
; 801  : 		}
; 802  : 
; 803  : 	basic_string(size_type _Count, _Elem _Ch)
; 804  : 		: _Mybase()
; 805  : 		{	// construct from _Count * _Ch
; 806  : 		_Tidy();
; 807  : 		assign(_Count, _Ch);
; 808  : 		}
; 809  : 
; 810  : 	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
; 811  : 		: _Mybase(_Al)
; 812  : 		{	// construct from _Count * _Ch with allocator
; 813  : 		_Tidy();
; 814  : 		assign(_Count, _Ch);
; 815  : 		}
; 816  : 
; 817  : 	template<class _Iter>
; 818  : 		basic_string(_Iter _First, _Iter _Last,
; 819  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 820  : 				void>::type ** = 0)
; 821  : 		: _Mybase()
; 822  : 		{	// construct from [_First, _Last)
; 823  : 		_Tidy();
; 824  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 825  : 		}
; 826  : 
; 827  : 	template<class _Iter>
; 828  : 		basic_string(_Iter _First, _Iter _Last, const _Alloc& _Al,
; 829  : 			typename enable_if<_Is_iterator<_Iter>::value,
; 830  : 				void>::type ** = 0)
; 831  : 		: _Mybase(_Al)
; 832  : 		{	// construct from [_First, _Last) with allocator
; 833  : 		_Tidy();
; 834  : 		_Construct(_First, _Last, _Iter_cat(_First));
; 835  : 		}
; 836  : 
; 837  : 	template<class _Iter>
; 838  : 		void _Construct(_Iter _First,
; 839  : 			_Iter _Last, input_iterator_tag)
; 840  : 		{	// initialize from [_First, _Last), input iterators
; 841  : 		_TRY_BEGIN
; 842  : 		for (; _First != _Last; ++_First)
; 843  : 			append((size_type)1, (_Elem)*_First);
; 844  : 		_CATCH_ALL
; 845  : 		_Tidy(true);
; 846  : 		_RERAISE;
; 847  : 		_CATCH_END
; 848  : 		}
; 849  : 
; 850  : 	template<class _Iter>
; 851  : 		void _Construct(_Iter _First,
; 852  : 			_Iter _Last, forward_iterator_tag)
; 853  : 		{	// initialize from [_First, _Last), forward iterators
; 854  : 		_DEBUG_RANGE(_First, _Last);
; 855  : 		size_type _Count = 0;
; 856  : 		_Distance(_First, _Last, _Count);
; 857  : 		reserve(_Count);
; 858  : 
; 859  : 		_TRY_BEGIN
; 860  : 		for (; _First != _Last; ++_First)
; 861  : 			append((size_type)1, (_Elem)*_First);
; 862  : 		_CATCH_ALL
; 863  : 		_Tidy(true);
; 864  : 		_RERAISE;
; 865  : 		_CATCH_END
; 866  : 		}
; 867  : 
; 868  : 	basic_string(const_pointer _First, const_pointer _Last)
; 869  : 		: _Mybase()
; 870  : 		{	// construct from [_First, _Last), const pointers
; 871  : 		_DEBUG_RANGE(_First, _Last);
; 872  : 		_Tidy();
; 873  : 		if (_First != _Last)
; 874  : 			assign(&*_First, _Last - _First);
; 875  : 		}
; 876  : 
; 877  : 	basic_string(const_pointer _First, const_pointer _Last,
; 878  : 		const _Alloc& _Al)
; 879  : 		: _Mybase(_Al)
; 880  : 		{	// construct from [_First, _Last), const pointers
; 881  : 		_DEBUG_RANGE(_First, _Last);
; 882  : 		_Tidy();
; 883  : 		if (_First != _Last)
; 884  : 			assign(&*_First, _Last - _First);
; 885  : 		}
; 886  : 
; 887  : 	basic_string(const_iterator _First, const_iterator _Last)
; 888  : 		: _Mybase()
; 889  : 		{	// construct from [_First, _Last), const_iterators
; 890  : 		_DEBUG_RANGE(_First, _Last);
; 891  : 		_Tidy();
; 892  : 		if (_First != _Last)
; 893  : 			assign(&*_First, _Last - _First);
; 894  : 		}
; 895  : 
; 896  : 	basic_string(_Myt&& _Right) _NOEXCEPT
; 897  : 		: _Mybase(_Right._Getal())
; 898  : 		{	// construct by moving _Right
; 899  : 		_Tidy();
; 900  : 		_Assign_rv(_STD forward<_Myt>(_Right));
; 901  : 		}
; 902  : 
; 903  : 	basic_string(_Myt&& _Right, const _Alloc& _Al)
; 904  : 		: _Mybase(_Al)
; 905  : 		{	// construct by moving _Right, allocator
; 906  : 		if (this->_Getal() != _Right._Getal())
; 907  : 			assign(_Right.begin(), _Right.end());
; 908  : 		else
; 909  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 910  : 		}
; 911  : 
; 912  : 	_Myt& operator=(_Myt&& _Right) _NOEXCEPT
; 913  : 		{	// assign by moving _Right
; 914  : 		if (this != &_Right)
; 915  : 			{	// different, assign it
; 916  : 			_Tidy(true);
; 917  : 
; 918  :  #if _HAS_CPP0X
; 919  : 			if (this->_Getal() != _Right._Getal()
; 920  : 				&& _Alty::propagate_on_container_move_assignment::value)
; 921  : 				this->_Change_alloc(_Right._Getal());
; 922  :  #endif /* _HAS_CPP0X */
; 923  : 
; 924  : 			if (this->_Getal() != _Right._Getal())
; 925  : 				assign(_Right.begin(), _Right.end());
; 926  : 			else
; 927  : 				_Assign_rv(_STD forward<_Myt>(_Right));
; 928  : 			}
; 929  : 		return (*this);
; 930  : 		}
; 931  : 
; 932  : 	_Myt& assign(_Myt&& _Right) _NOEXCEPT
; 933  : 		{	// assign by moving _Right
; 934  : 		if (this == &_Right)
; 935  : 			;
; 936  : 		else if (get_allocator() != _Right.get_allocator()
; 937  : 			&& this->_BUF_SIZE <= _Right._Myres)
; 938  : 			*this = _Right;
; 939  : 		else
; 940  : 			{	// not same, clear this and steal from _Right
; 941  : 			_Tidy(true);
; 942  : 			_Assign_rv(_STD forward<_Myt>(_Right));
; 943  : 			}
; 944  : 		return (*this);
; 945  : 		}
; 946  : 
; 947  : 	void _Assign_rv(_Myt&& _Right)
; 948  : 		{	// assign by moving _Right
; 949  : 		if (_Right._Myres < this->_BUF_SIZE)
; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);
; 952  : 		else
; 953  : 			{	// copy pointer
; 954  : 			this->_Getal().construct(&this->_Bx._Ptr, _Right._Bx._Ptr);
; 955  : 			_Right._Bx._Ptr = pointer();
; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;
; 958  : 		this->_Myres = _Right._Myres;
; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00081	48 89 77 10	 mov	 QWORD PTR [rdi+16], rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00085	66 89 37	 mov	 WORD PTR [rdi], si
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 660  : }

  00088	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0008d	48 33 cc	 xor	 rcx, rsp
  00090	e8 00 00 00 00	 call	 __security_check_cookie
  00095	4c 8d 5c 24 60	 lea	 r11, QWORD PTR [rsp+96]
  0009a	49 8b 5b 20	 mov	 rbx, QWORD PTR [r11+32]
  0009e	49 8b 73 28	 mov	 rsi, QWORD PTR [r11+40]
  000a2	49 8b e3	 mov	 rsp, r11
  000a5	5f		 pop	 rdi
  000a6	c3		 ret	 0
?init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; gfxu::Texture2D::init
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
fileName$GSCopy$ = 72
__$ArrayPad$ = 80
this$ = 112
fileName$ = 120
?dtor$0@?0??init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z@4HA PROC ; `gfxu::Texture2D::init'::`1'::dtor$0
  00000	48 8b 8a 48 00
	00 00		 mov	 rcx, QWORD PTR fileName$GSCopy$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
?dtor$0@?0??init@Texture2D@gfxu@@AEAAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z@4HA ENDP ; `gfxu::Texture2D::init'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
;	COMDAT ?upload@Texture2D@gfxu@@QEAA_NXZ
_TEXT	SEGMENT
this$ = 96
?upload@Texture2D@gfxu@@QEAA_NXZ PROC			; gfxu::Texture2D::upload, COMDAT

; 676  : {

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  00006	48 8b d9	 mov	 rbx, rcx

; 677  : 	glGenTextures(1, &object);

  00009	48 8b d1	 mov	 rdx, rcx
  0000c	b9 01 00 00 00	 mov	 ecx, 1
  00011	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glGenTextures

; 678  : 	glBindTexture(GL_TEXTURE_2D, object);

  00017	8b 13		 mov	 edx, DWORD PTR [rbx]
  00019	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glBindTexture

; 679  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, minFilter);

  00024	44 8b 43 08	 mov	 r8d, DWORD PTR [rbx+8]
  00028	ba 01 28 00 00	 mov	 edx, 10241		; 00002801H
  0002d	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 680  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, magFilter);

  00038	44 8b 43 04	 mov	 r8d, DWORD PTR [rbx+4]
  0003c	ba 00 28 00 00	 mov	 edx, 10240		; 00002800H
  00041	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 681  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, wrap);

  0004c	44 8b 43 0c	 mov	 r8d, DWORD PTR [rbx+12]
  00050	ba 02 28 00 00	 mov	 edx, 10242		; 00002802H
  00055	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 682  : 	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, wrap);

  00060	44 8b 43 0c	 mov	 r8d, DWORD PTR [rbx+12]
  00064	ba 03 28 00 00	 mov	 edx, 10243		; 00002803H
  00069	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexParameteri

; 683  : 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);

  00074	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00078	44 8b 4b 20	 mov	 r9d, DWORD PTR [rbx+32]
  0007c	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00081	8b 43 24	 mov	 eax, DWORD PTR [rbx+36]
  00084	c7 44 24 38 01
	14 00 00	 mov	 DWORD PTR [rsp+56], 5121 ; 00001401H
  0008c	c7 44 24 30 08
	19 00 00	 mov	 DWORD PTR [rsp+48], 6408 ; 00001908H
  00094	33 d2		 xor	 edx, edx
  00096	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  0009b	41 b8 08 19 00
	00		 mov	 r8d, 6408		; 00001908H
  000a1	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  000a9	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_glTexImage2D

; 684  : 	if(mipmapped)

  000b3	80 7b 10 00	 cmp	 BYTE PTR [rbx+16], 0
  000b7	74 0b		 je	 SHORT $LN4@upload

; 685  : 	{
; 686  : 		glGenerateMipmap(GL_TEXTURE_2D);

  000b9	b9 e1 0d 00 00	 mov	 ecx, 3553		; 00000de1H
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __glewGenerateMipmap
$LN4@upload:

; 690  : 
; 691  : 	return true;

  000c4	b0 01		 mov	 al, 1

; 687  : 	}
; 688  : 
; 689  : 	uploaded = true;

  000c6	88 43 11	 mov	 BYTE PTR [rbx+17], al

; 692  : }

  000c9	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000cd	5b		 pop	 rbx
  000ce	c3		 ret	 0
?upload@Texture2D@gfxu@@QEAA_NXZ ENDP			; gfxu::Texture2D::upload
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT

; 1728 : 		return (this->_Mysize);

  00000	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]

; 1729 : 		}

  00004	c3		 ret	 0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >, COMDAT

; 486  : 		_Myfirst = pointer();

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax

; 487  : 		_Mylast = pointer();

  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 488  : 		_Myend = pointer();

  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 686  : 		}

  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??0?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??1?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::~vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >, COMDAT

; 899  : 		{	// destroy the object

$LN15:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 902  : 
; 903  : 	_Myt& operator=(const _Myt& _Right)
; 904  : 		{	// assign _Right
; 905  : 		if (this != &_Right)
; 906  : 			{	// different, assign it
; 907  :  #if _HAS_CPP0X
; 908  : 			if (this->_Getal() != _Right._Getal()
; 909  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 910  : 				{	// change allocator before copying
; 911  : 				_Tidy();
; 912  : 				this->_Change_alloc(_Right._Getal());
; 913  : 				}
; 914  :  #endif /* _HAS_CPP0X */
; 915  : 
; 916  : 			this->_Orphan_all();
; 917  : 
; 918  : 			if (_Right.empty())
; 919  : 				clear();	// new sequence empty, erase existing sequence
; 920  : 			else if (_Right.size() <= size())
; 921  : 				{	// enough elements, copy new and destroy old
; 922  : 				pointer _Ptr = _Copy_impl(_Right._Myfirst,
; 923  : 					_Right._Mylast, this->_Myfirst);	// copy new
; 924  : 				_Destroy(_Ptr, this->_Mylast);	// destroy old
; 925  : 				this->_Mylast = this->_Myfirst + _Right.size();
; 926  : 				}
; 927  : 			else if (_Right.size() <= capacity())
; 928  : 				{	// enough room, copy and construct new
; 929  : 				pointer _Ptr = _Right._Myfirst + size();
; 930  : 				_Copy_impl(_Right._Myfirst,
; 931  : 					_Ptr, this->_Myfirst);
; 932  : 				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
; 933  : 				}
; 934  : 			else
; 935  : 				{	// not enough room, allocate new array and construct new
; 936  : 				if (this->_Myfirst != pointer())
; 937  : 					{	// discard old array
; 938  : 					_Destroy(this->_Myfirst, this->_Mylast);
; 939  : 					this->_Getal().deallocate(this->_Myfirst,
; 940  : 						this->_Myend - this->_Myfirst);
; 941  : 					}
; 942  : 				if (_Buy(_Right.size()))
; 943  : 					_TRY_BEGIN
; 944  : 					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
; 945  : 						this->_Myfirst);
; 946  : 					_CATCH_ALL
; 947  : 					_Tidy();
; 948  : 					_RERAISE;
; 949  : 					_CATCH_END
; 950  : 				}
; 951  : 			}
; 952  : 		return (*this);
; 953  : 		}
; 954  : 
; 955  : 	void reserve(size_type _Count)
; 956  : 		{	// determine new minimum length of allocated storage
; 957  : 		if (capacity() < _Count)
; 958  : 			{	// something to do, check and reallocate
; 959  : 			if (max_size() < _Count)
; 960  : 				_Xlen();
; 961  : 			_Reallocate(_Count);
; 962  : 			}
; 963  : 		}
; 964  : 
; 965  : 	size_type capacity() const _NOEXCEPT
; 966  : 		{	// return current length of allocated storage
; 967  : 		return (this->_Myend - this->_Myfirst);
; 968  : 		}
; 969  : 
; 970  : 	size_type _Unused_capacity() const _NOEXCEPT
; 971  : 		{	// micro-optimization for capacity() - size()
; 972  : 		return (this->_Myend - this->_Mylast);
; 973  : 		}
; 974  : 
; 975  : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 976  : 		{	// micro-optimization for capacity() != size()
; 977  : 		return (this->_Myend != this->_Mylast);
; 978  : 		}
; 979  : 
; 980  : 	iterator begin() _NOEXCEPT
; 981  : 		{	// return iterator for beginning of mutable sequence
; 982  : 		return (iterator(this->_Myfirst, this));
; 983  : 		}
; 984  : 
; 985  : 	const_iterator begin() const _NOEXCEPT
; 986  : 		{	// return iterator for beginning of nonmutable sequence
; 987  : 		return (const_iterator(this->_Myfirst, this));
; 988  : 		}
; 989  : 
; 990  : 	iterator end() _NOEXCEPT
; 991  : 		{	// return iterator for end of mutable sequence
; 992  : 		return (iterator(this->_Mylast, this));
; 993  : 		}
; 994  : 
; 995  : 	const_iterator end() const _NOEXCEPT
; 996  : 		{	// return iterator for end of nonmutable sequence
; 997  : 		return (const_iterator(this->_Mylast, this));
; 998  : 		}
; 999  : 
; 1000 : 	iterator _Make_iter(const_iterator _Where) const
; 1001 : 		{	// make iterator from const_iterator
; 1002 : 		return (iterator(_Where._Ptr, this));
; 1003 : 		}
; 1004 : 
; 1005 : 	reverse_iterator rbegin() _NOEXCEPT
; 1006 : 		{	// return iterator for beginning of reversed mutable sequence
; 1007 : 		return (reverse_iterator(end()));
; 1008 : 		}
; 1009 : 
; 1010 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1011 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1012 : 		return (const_reverse_iterator(end()));
; 1013 : 		}
; 1014 : 
; 1015 : 	reverse_iterator rend() _NOEXCEPT
; 1016 : 		{	// return iterator for end of reversed mutable sequence
; 1017 : 		return (reverse_iterator(begin()));
; 1018 : 		}
; 1019 : 
; 1020 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1021 : 		{	// return iterator for end of reversed nonmutable sequence
; 1022 : 		return (const_reverse_iterator(begin()));
; 1023 : 		}
; 1024 : 
; 1025 :  #if _HAS_CPP0X
; 1026 : 	const_iterator cbegin() const _NOEXCEPT
; 1027 : 		{	// return iterator for beginning of nonmutable sequence
; 1028 : 		return (((const _Myt *)this)->begin());
; 1029 : 		}
; 1030 : 
; 1031 : 	const_iterator cend() const _NOEXCEPT
; 1032 : 		{	// return iterator for end of nonmutable sequence
; 1033 : 		return (((const _Myt *)this)->end());
; 1034 : 		}
; 1035 : 
; 1036 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1037 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1038 : 		return (((const _Myt *)this)->rbegin());
; 1039 : 		}
; 1040 : 
; 1041 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1042 : 		{	// return iterator for end of reversed nonmutable sequence
; 1043 : 		return (((const _Myt *)this)->rend());
; 1044 : 		}
; 1045 : 
; 1046 : 	void shrink_to_fit()
; 1047 : 		{	// reduce capacity
; 1048 : 		if (_Has_unused_capacity())
; 1049 : 			{	// worth shrinking, do it
; 1050 : 			if (empty())
; 1051 : 				_Tidy();
; 1052 : 			else
; 1053 : 				_Reallocate(size());
; 1054 : 			}
; 1055 : 		}
; 1056 :  #endif /* _HAS_CPP0X */
; 1057 : 
; 1058 : 	void resize(size_type _Newsize)
; 1059 : 		{	// determine new length, padding as needed
; 1060 : 		if (_Newsize < size())
; 1061 : 			erase(begin() + _Newsize, end());
; 1062 : 		else if (size() < _Newsize)
; 1063 : 			{	// pad as needed
; 1064 : 			_Alty _Alval(this->_Getal());
; 1065 : 			_Reserve(_Newsize - size());
; 1066 : 			_TRY_BEGIN
; 1067 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1068 : 				_Alval);
; 1069 : 			_CATCH_ALL
; 1070 : 			_Tidy();
; 1071 : 			_RERAISE;
; 1072 : 			_CATCH_END
; 1073 : 			this->_Mylast += _Newsize - size();
; 1074 : 			}
; 1075 : 		}
; 1076 : 
; 1077 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1078 : 		{	// determine new length, padding with _Val elements as needed
; 1079 : 		if (_Newsize < size())
; 1080 : 			erase(begin() + _Newsize, end());
; 1081 : 		else if (size() < _Newsize)
; 1082 : 			_Insert_n(end(), _Newsize - size(), _Val);
; 1083 : 		}
; 1084 : 
; 1085 : 	size_type size() const _NOEXCEPT
; 1086 : 		{	// return length of sequence
; 1087 : 		return (this->_Mylast - this->_Myfirst);
; 1088 : 		}
; 1089 : 
; 1090 : 	size_type max_size() const _NOEXCEPT
; 1091 : 		{	// return maximum possible length of sequence
; 1092 : 		return (this->_Getal().max_size());
; 1093 : 		}
; 1094 : 
; 1095 : 	bool empty() const _NOEXCEPT
; 1096 : 		{	// test if sequence is empty
; 1097 : 		return (this->_Myfirst == this->_Mylast);
; 1098 : 		}
; 1099 : 
; 1100 : 	_Alloc get_allocator() const _NOEXCEPT
; 1101 : 		{	// return allocator object for values
; 1102 : 		return (this->_Getal());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_reference at(size_type _Pos) const
; 1106 : 		{	// subscript nonmutable sequence with checking
; 1107 : 		if (size() <= _Pos)
; 1108 : 			_Xran();
; 1109 : 		return (*(this->_Myfirst + _Pos));
; 1110 : 		}
; 1111 : 
; 1112 : 	reference at(size_type _Pos)
; 1113 : 		{	// subscript mutable sequence with checking
; 1114 : 		if (size() <= _Pos)
; 1115 : 			_Xran();
; 1116 : 		return (*(this->_Myfirst + _Pos));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_reference operator[](size_type _Pos) const
; 1120 : 		{	// subscript nonmutable sequence
; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));
; 1133 : 		}
; 1134 : 
; 1135 : 	reference operator[](size_type _Pos)
; 1136 : 		{	// subscript mutable sequence
; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));
; 1149 : 		}
; 1150 : 
; 1151 :  #if _HAS_CPP0X
; 1152 : 	pointer data() _NOEXCEPT
; 1153 : 		{	// return address of first element
; 1154 : 		return (this->_Myfirst);
; 1155 : 		}
; 1156 : 
; 1157 : 	const_pointer data() const _NOEXCEPT
; 1158 : 		{	// return address of first element
; 1159 : 		return (this->_Myfirst);
; 1160 : 		}
; 1161 :  #endif /* _HAS_CPP0X */
; 1162 : 
; 1163 : 	reference front()
; 1164 : 		{	// return first element of mutable sequence
; 1165 : 		return (*begin());
; 1166 : 		}
; 1167 : 
; 1168 : 	const_reference front() const
; 1169 : 		{	// return first element of nonmutable sequence
; 1170 : 		return (*begin());
; 1171 : 		}
; 1172 : 
; 1173 : 	reference back()
; 1174 : 		{	// return last element of mutable sequence
; 1175 : 		return (*(end() - 1));
; 1176 : 		}
; 1177 : 
; 1178 : 	const_reference back() const
; 1179 : 		{	// return last element of nonmutable sequence
; 1180 : 		return (*(end() - 1));
; 1181 : 		}
; 1182 : 
; 1183 : 	void push_back(const value_type& _Val)
; 1184 : 		{	// insert element at end
; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1188 : 			if (this->_Mylast == this->_Myend)
; 1189 : 				_Reserve(1);
; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);
; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)
; 1198 : 				_Reserve(1);
; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);
; 1202 : 			++this->_Mylast;
; 1203 : 			}
; 1204 : 		}
; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1489 : 		if (_Capacity < _Count)
; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);
; 1492 : 		}
; 1493 : 
; 1494 : 	bool _Inside(const value_type *_Ptr) const
; 1495 : 		{	// test if _Ptr points inside vector
; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1497 : 		}
; 1498 : 
; 1499 : 	void _Reallocate(size_type _Count)
; 1500 : 		{	// move to array of exactly _Count elements
; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1502 : 
; 1503 : 		_TRY_BEGIN
; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1507 : 		_RERAISE;
; 1508 : 		_CATCH_END
; 1509 : 
; 1510 : 		size_type _Size = size();
; 1511 : 		if (this->_Myfirst != pointer())
; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);
; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();
; 1519 : 		this->_Myend = _Ptr + _Count;
; 1520 : 		this->_Mylast = _Ptr + _Size;
; 1521 : 		this->_Myfirst = _Ptr;
; 1522 : 		}
; 1523 : 
; 1524 : 	void _Reserve(size_type _Count)
; 1525 : 		{	// ensure room for _Count new elements, grow exponentially
; 1526 : 		if (_Unused_capacity() < _Count)
; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)
; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));
; 1531 : 			}
; 1532 : 		}
; 1533 : 
; 1534 : 	void _Tidy()
; 1535 : 		{	// free all storage
; 1536 : 		if (this->_Myfirst != pointer())

  00009	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0000c	48 85 c9	 test	 rcx, rcx
  0000f	74 12		 je	 SHORT $LN3@vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00011	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1542 : 			this->_Myfirst = pointer();

  00016	33 c0		 xor	 eax, eax
  00018	48 89 03	 mov	 QWORD PTR [rbx], rax

; 1543 : 			this->_Mylast = pointer();

  0001b	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 1544 : 			this->_Myend = pointer();

  0001f	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
$LN3@vector:

; 900  : 		_Tidy();
; 901  : 		}

  00023	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
??1?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::~vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 8
_Count$dead$ = 16
?reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAX_K@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::reserve, COMDAT

; 964  : 
; 965  : 	size_type capacity() const _NOEXCEPT
; 966  : 		{	// return current length of allocated storage
; 967  : 		return (this->_Myend - this->_Myfirst);

  00000	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  00004	48 b8 ab aa aa
	aa aa aa aa 2a	 mov	 rax, 3074457345618258603 ; 2aaaaaaaaaaaaaabH
  0000e	48 2b 11	 sub	 rdx, QWORD PTR [rcx]
  00011	48 f7 ea	 imul	 rdx
  00014	48 c1 fa 02	 sar	 rdx, 2
  00018	48 8b c2	 mov	 rax, rdx
  0001b	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  0001f	48 03 d0	 add	 rdx, rax

; 957  : 		if (capacity() < _Count)

  00022	48 81 fa 00 20
	00 00		 cmp	 rdx, 8192		; 00002000H
  00029	73 0a		 jae	 SHORT $LN2@reserve

; 958  : 			{	// something to do, check and reallocate
; 959  : 			if (max_size() < _Count)
; 960  : 				_Xlen();
; 961  : 			_Reallocate(_Count);

  0002b	ba 00 20 00 00	 mov	 edx, 8192		; 00002000H
  00030	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
$LN2@reserve:

; 962  : 			}
; 963  : 		}

  00035	f3 c3		 fatret	 0
?reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAX_K@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?shrink_to_fit@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?shrink_to_fit@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::shrink_to_fit, COMDAT

; 1047 : 		{	// reduce capacity

$LN24:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 977  : 		return (this->_Myend != this->_Mylast);

  00009	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0000d	48 39 4b 10	 cmp	 QWORD PTR [rbx+16], rcx

; 1048 : 		if (_Has_unused_capacity())

  00011	74 53		 je	 SHORT $LN1@shrink_to_

; 1088 : 		}
; 1089 : 
; 1090 : 	size_type max_size() const _NOEXCEPT
; 1091 : 		{	// return maximum possible length of sequence
; 1092 : 		return (this->_Getal().max_size());
; 1093 : 		}
; 1094 : 
; 1095 : 	bool empty() const _NOEXCEPT
; 1096 : 		{	// test if sequence is empty
; 1097 : 		return (this->_Myfirst == this->_Mylast);

  00013	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00016	48 3b c1	 cmp	 rax, rcx

; 1049 : 			{	// worth shrinking, do it
; 1050 : 			if (empty())

  00019	75 20		 jne	 SHORT $LN2@shrink_to_

; 1098 : 		}
; 1099 : 
; 1100 : 	_Alloc get_allocator() const _NOEXCEPT
; 1101 : 		{	// return allocator object for values
; 1102 : 		return (this->_Getal());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_reference at(size_type _Pos) const
; 1106 : 		{	// subscript nonmutable sequence with checking
; 1107 : 		if (size() <= _Pos)
; 1108 : 			_Xran();
; 1109 : 		return (*(this->_Myfirst + _Pos));
; 1110 : 		}
; 1111 : 
; 1112 : 	reference at(size_type _Pos)
; 1113 : 		{	// subscript mutable sequence with checking
; 1114 : 		if (size() <= _Pos)
; 1115 : 			_Xran();
; 1116 : 		return (*(this->_Myfirst + _Pos));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_reference operator[](size_type _Pos) const
; 1120 : 		{	// subscript nonmutable sequence
; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));
; 1133 : 		}
; 1134 : 
; 1135 : 	reference operator[](size_type _Pos)
; 1136 : 		{	// subscript mutable sequence
; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));
; 1149 : 		}
; 1150 : 
; 1151 :  #if _HAS_CPP0X
; 1152 : 	pointer data() _NOEXCEPT
; 1153 : 		{	// return address of first element
; 1154 : 		return (this->_Myfirst);
; 1155 : 		}
; 1156 : 
; 1157 : 	const_pointer data() const _NOEXCEPT
; 1158 : 		{	// return address of first element
; 1159 : 		return (this->_Myfirst);
; 1160 : 		}
; 1161 :  #endif /* _HAS_CPP0X */
; 1162 : 
; 1163 : 	reference front()
; 1164 : 		{	// return first element of mutable sequence
; 1165 : 		return (*begin());
; 1166 : 		}
; 1167 : 
; 1168 : 	const_reference front() const
; 1169 : 		{	// return first element of nonmutable sequence
; 1170 : 		return (*begin());
; 1171 : 		}
; 1172 : 
; 1173 : 	reference back()
; 1174 : 		{	// return last element of mutable sequence
; 1175 : 		return (*(end() - 1));
; 1176 : 		}
; 1177 : 
; 1178 : 	const_reference back() const
; 1179 : 		{	// return last element of nonmutable sequence
; 1180 : 		return (*(end() - 1));
; 1181 : 		}
; 1182 : 
; 1183 : 	void push_back(const value_type& _Val)
; 1184 : 		{	// insert element at end
; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1188 : 			if (this->_Mylast == this->_Myend)
; 1189 : 				_Reserve(1);
; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);
; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)
; 1198 : 				_Reserve(1);
; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);
; 1202 : 			++this->_Mylast;
; 1203 : 			}
; 1204 : 		}
; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1489 : 		if (_Capacity < _Count)
; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);
; 1492 : 		}
; 1493 : 
; 1494 : 	bool _Inside(const value_type *_Ptr) const
; 1495 : 		{	// test if _Ptr points inside vector
; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
; 1497 : 		}
; 1498 : 
; 1499 : 	void _Reallocate(size_type _Count)
; 1500 : 		{	// move to array of exactly _Count elements
; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1502 : 
; 1503 : 		_TRY_BEGIN
; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1507 : 		_RERAISE;
; 1508 : 		_CATCH_END
; 1509 : 
; 1510 : 		size_type _Size = size();
; 1511 : 		if (this->_Myfirst != pointer())
; 1512 : 			{	// destroy and deallocate old array
; 1513 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1514 : 			this->_Getal().deallocate(this->_Myfirst,
; 1515 : 				this->_Myend - this->_Myfirst);
; 1516 : 			}
; 1517 : 
; 1518 : 		this->_Orphan_all();
; 1519 : 		this->_Myend = _Ptr + _Count;
; 1520 : 		this->_Mylast = _Ptr + _Size;
; 1521 : 		this->_Myfirst = _Ptr;
; 1522 : 		}
; 1523 : 
; 1524 : 	void _Reserve(size_type _Count)
; 1525 : 		{	// ensure room for _Count new elements, grow exponentially
; 1526 : 		if (_Unused_capacity() < _Count)
; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)
; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));
; 1531 : 			}
; 1532 : 		}
; 1533 : 
; 1534 : 	void _Tidy()
; 1535 : 		{	// free all storage
; 1536 : 		if (this->_Myfirst != pointer())

  0001b	48 85 c0	 test	 rax, rax
  0001e	74 46		 je	 SHORT $LN1@shrink_to_
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00020	48 8b c8	 mov	 rcx, rax
  00023	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1542 : 			this->_Myfirst = pointer();

  00028	33 c0		 xor	 eax, eax
  0002a	48 89 03	 mov	 QWORD PTR [rbx], rax

; 1543 : 			this->_Mylast = pointer();

  0002d	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 1544 : 			this->_Myend = pointer();

  00031	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 1054 : 			}
; 1055 : 		}

  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5b		 pop	 rbx
  0003a	c3		 ret	 0
$LN2@shrink_to_:

; 1056 :  #endif /* _HAS_CPP0X */
; 1057 : 
; 1058 : 	void resize(size_type _Newsize)
; 1059 : 		{	// determine new length, padding as needed
; 1060 : 		if (_Newsize < size())
; 1061 : 			erase(begin() + _Newsize, end());
; 1062 : 		else if (size() < _Newsize)
; 1063 : 			{	// pad as needed
; 1064 : 			_Alty _Alval(this->_Getal());
; 1065 : 			_Reserve(_Newsize - size());
; 1066 : 			_TRY_BEGIN
; 1067 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1068 : 				_Alval);
; 1069 : 			_CATCH_ALL
; 1070 : 			_Tidy();
; 1071 : 			_RERAISE;
; 1072 : 			_CATCH_END
; 1073 : 			this->_Mylast += _Newsize - size();
; 1074 : 			}
; 1075 : 		}
; 1076 : 
; 1077 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1078 : 		{	// determine new length, padding with _Val elements as needed
; 1079 : 		if (_Newsize < size())
; 1080 : 			erase(begin() + _Newsize, end());
; 1081 : 		else if (size() < _Newsize)
; 1082 : 			_Insert_n(end(), _Newsize - size(), _Val);
; 1083 : 		}
; 1084 : 
; 1085 : 	size_type size() const _NOEXCEPT
; 1086 : 		{	// return length of sequence
; 1087 : 		return (this->_Mylast - this->_Myfirst);

  0003b	48 2b c8	 sub	 rcx, rax
  0003e	48 b8 ab aa aa
	aa aa aa aa 2a	 mov	 rax, 3074457345618258603 ; 2aaaaaaaaaaaaaabH
  00048	48 f7 e9	 imul	 rcx

; 1051 : 				_Tidy();
; 1052 : 			else
; 1053 : 				_Reallocate(size());

  0004b	48 8b cb	 mov	 rcx, rbx

; 1056 :  #endif /* _HAS_CPP0X */
; 1057 : 
; 1058 : 	void resize(size_type _Newsize)
; 1059 : 		{	// determine new length, padding as needed
; 1060 : 		if (_Newsize < size())
; 1061 : 			erase(begin() + _Newsize, end());
; 1062 : 		else if (size() < _Newsize)
; 1063 : 			{	// pad as needed
; 1064 : 			_Alty _Alval(this->_Getal());
; 1065 : 			_Reserve(_Newsize - size());
; 1066 : 			_TRY_BEGIN
; 1067 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1068 : 				_Alval);
; 1069 : 			_CATCH_ALL
; 1070 : 			_Tidy();
; 1071 : 			_RERAISE;
; 1072 : 			_CATCH_END
; 1073 : 			this->_Mylast += _Newsize - size();
; 1074 : 			}
; 1075 : 		}
; 1076 : 
; 1077 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1078 : 		{	// determine new length, padding with _Val elements as needed
; 1079 : 		if (_Newsize < size())
; 1080 : 			erase(begin() + _Newsize, end());
; 1081 : 		else if (size() < _Newsize)
; 1082 : 			_Insert_n(end(), _Newsize - size(), _Val);
; 1083 : 		}
; 1084 : 
; 1085 : 	size_type size() const _NOEXCEPT
; 1086 : 		{	// return length of sequence
; 1087 : 		return (this->_Mylast - this->_Myfirst);

  0004e	48 c1 fa 02	 sar	 rdx, 2
  00052	48 8b c2	 mov	 rax, rdx
  00055	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  00059	48 03 d0	 add	 rdx, rax

; 1054 : 			}
; 1055 : 		}

  0005c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00060	5b		 pop	 rbx

; 1051 : 				_Tidy();
; 1052 : 			else
; 1053 : 				_Reallocate(size());

  00061	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
$LN1@shrink_to_:

; 1054 : 			}
; 1055 : 		}

  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5b		 pop	 rbx
  0006b	c3		 ret	 0
?shrink_to_fit@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::shrink_to_fit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::size, COMDAT

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00000	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  00004	48 b8 ab aa aa
	aa aa aa aa 2a	 mov	 rax, 3074457345618258603 ; 2aaaaaaaaaaaaaabH
  0000e	48 2b 11	 sub	 rdx, QWORD PTR [rcx]
  00011	48 f7 ea	 imul	 rdx
  00014	48 c1 fa 02	 sar	 rdx, 2
  00018	48 8b c2	 mov	 rax, rdx
  0001b	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  0001f	48 03 c2	 add	 rax, rdx

; 1088 : 		}

  00022	c3		 ret	 0
?size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??A?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAAEAVVertexUVRGBA@gfxu@@_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$dead$ = 16
??A?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAAEAVVertexUVRGBA@gfxu@@_K@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::operator[], COMDAT

; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 1149 : 		}

  00003	c3		 ret	 0
??A?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAAEAVVertexUVRGBA@gfxu@@_K@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back, COMDAT

; 1184 : 		{	// insert element at end

$LN60:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b d9	 mov	 rbx, rcx

; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1489 : 		if (_Capacity < _Count)
; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);
; 1492 : 		}
; 1493 : 
; 1494 : 	bool _Inside(const value_type *_Ptr) const
; 1495 : 		{	// test if _Ptr points inside vector
; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  0000d	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]

; 1184 : 		{	// insert element at end

  00011	48 8b fa	 mov	 rdi, rdx

; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1489 : 		if (_Capacity < _Count)
; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);
; 1492 : 		}
; 1493 : 
; 1494 : 	bool _Inside(const value_type *_Ptr) const
; 1495 : 		{	// test if _Ptr points inside vector
; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00014	48 3b d1	 cmp	 rdx, rcx
  00017	0f 83 a9 00 00
	00		 jae	 $LN4@push_back
  0001d	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00020	48 3b c2	 cmp	 rax, rdx
  00023	0f 87 9d 00 00
	00		 ja	 $LN4@push_back

; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;

  00029	48 2b f8	 sub	 rdi, rax
  0002c	48 b8 ab aa aa
	aa aa aa aa 2a	 mov	 rax, 3074457345618258603 ; 2aaaaaaaaaaaaaabH
  00036	48 f7 ef	 imul	 rdi
  00039	48 8b fa	 mov	 rdi, rdx
  0003c	48 c1 ff 02	 sar	 rdi, 2
  00040	48 8b c7	 mov	 rax, rdi
  00043	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  00047	48 03 f8	 add	 rdi, rax

; 1188 : 			if (this->_Mylast == this->_Myend)

  0004a	48 3b 4b 10	 cmp	 rcx, QWORD PTR [rbx+16]
  0004e	75 08		 jne	 SHORT $LN3@push_back

; 1189 : 				_Reserve(1);

  00050	48 8b cb	 mov	 rcx, rbx
  00053	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reserve
$LN3@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00058	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1192 : 				this->_Myfirst[_Idx]);

  0005c	4c 8b 03	 mov	 r8, QWORD PTR [rbx]
  0005f	48 8d 14 7f	 lea	 rdx, QWORD PTR [rdi+rdi*2]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00063	48 85 c9	 test	 rcx, rcx
  00066	0f 84 a9 00 00
	00		 je	 $LN51@push_back
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  0006c	41 8b 04 d0	 mov	 eax, DWORD PTR [r8+rdx*8]
  00070	89 01		 mov	 DWORD PTR [rcx], eax
  00072	41 8b 44 d0 04	 mov	 eax, DWORD PTR [r8+rdx*8+4]
  00077	89 41 04	 mov	 DWORD PTR [rcx+4], eax
  0007a	41 8b 44 d0 08	 mov	 eax, DWORD PTR [r8+rdx*8+8]
  0007f	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  00082	41 8b 44 d0 0c	 mov	 eax, DWORD PTR [r8+rdx*8+12]
  00087	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  0008a	41 8b 44 d0 10	 mov	 eax, DWORD PTR [r8+rdx*8+16]
  0008f	89 41 10	 mov	 DWORD PTR [rcx+16], eax
  00092	41 0f b6 44 d0
	14		 movzx	 eax, BYTE PTR [r8+rdx*8+20]
  00098	88 41 14	 mov	 BYTE PTR [rcx+20], al
  0009b	41 0f b6 44 d0
	15		 movzx	 eax, BYTE PTR [r8+rdx*8+21]
  000a1	88 41 15	 mov	 BYTE PTR [rcx+21], al
  000a4	41 0f b6 44 d0
	16		 movzx	 eax, BYTE PTR [r8+rdx*8+22]
  000aa	88 41 16	 mov	 BYTE PTR [rcx+22], al
  000ad	41 0f b6 44 d0
	17		 movzx	 eax, BYTE PTR [r8+rdx*8+23]
  000b3	88 41 17	 mov	 BYTE PTR [rcx+23], al
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1202 : 			++this->_Mylast;

  000b6	48 83 43 08 18	 add	 QWORD PTR [rbx+8], 24

; 1203 : 			}
; 1204 : 		}

  000bb	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c0	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c4	5f		 pop	 rdi
  000c5	c3		 ret	 0
$LN4@push_back:

; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)

  000c6	48 3b 4b 10	 cmp	 rcx, QWORD PTR [rbx+16]
  000ca	75 08		 jne	 SHORT $LN1@push_back

; 1198 : 				_Reserve(1);

  000cc	48 8b cb	 mov	 rcx, rbx
  000cf	e8 00 00 00 00	 call	 ?_Reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reserve
$LN1@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  000d4	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  000d8	48 85 c9	 test	 rcx, rcx
  000db	74 38		 je	 SHORT $LN51@push_back
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  000dd	8b 07		 mov	 eax, DWORD PTR [rdi]
  000df	89 01		 mov	 DWORD PTR [rcx], eax
  000e1	8b 47 04	 mov	 eax, DWORD PTR [rdi+4]
  000e4	89 41 04	 mov	 DWORD PTR [rcx+4], eax
  000e7	8b 47 08	 mov	 eax, DWORD PTR [rdi+8]
  000ea	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  000ed	8b 47 0c	 mov	 eax, DWORD PTR [rdi+12]
  000f0	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  000f3	8b 47 10	 mov	 eax, DWORD PTR [rdi+16]
  000f6	89 41 10	 mov	 DWORD PTR [rcx+16], eax
  000f9	0f b6 47 14	 movzx	 eax, BYTE PTR [rdi+20]
  000fd	88 41 14	 mov	 BYTE PTR [rcx+20], al
  00100	0f b6 47 15	 movzx	 eax, BYTE PTR [rdi+21]
  00104	88 41 15	 mov	 BYTE PTR [rcx+21], al
  00107	0f b6 47 16	 movzx	 eax, BYTE PTR [rdi+22]
  0010b	88 41 16	 mov	 BYTE PTR [rcx+22], al
  0010e	0f b6 47 17	 movzx	 eax, BYTE PTR [rdi+23]
  00112	88 41 17	 mov	 BYTE PTR [rcx+23], al
$LN51@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1202 : 			++this->_Mylast;

  00115	48 83 43 08 18	 add	 QWORD PTR [rbx+8], 24

; 1203 : 			}
; 1204 : 		}

  0011a	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0011f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00123	5f		 pop	 rdi
  00124	c3		 ret	 0
?push_back@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXAEBVVertexUVRGBA@gfxu@@@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\wchar.h
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 898  : 		{	// construct by moving _Right

$LN104:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0000f	33 f6		 xor	 esi, esi

; 2219 : 		}
; 2220 : 
; 2221 : 	bool _Grow(size_type _Newsize,
; 2222 : 		bool _Trim = false)
; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2224 : 		if (max_size() < _Newsize)
; 2225 : 			_Xlen();	// result too long
; 2226 : 		if (this->_Myres < _Newsize)
; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow
; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2231 : 		else if (_Newsize == 0)
; 2232 : 			_Eos(0);	// new size is zero, just null terminate
; 2233 : 		return (0 < _Newsize);	// return true only if more work to do
; 2234 : 		}
; 2235 : 
; 2236 : 	bool _Inside(const _Elem *_Ptr)
; 2237 : 		{	// test if _Ptr points inside string
; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)
; 2240 : 			return (false);	// don't ask
; 2241 : 		else
; 2242 : 			return (true);
; 2243 : 		}
; 2244 : 
; 2245 : 	static size_type _Pdif(const_iterator _P2,
; 2246 : 		const_iterator _P1)
; 2247 : 		{	// compute safe iterator difference
; 2248 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2249 : 		}
; 2250 : 
; 2251 : 	void _Tidy(bool _Built = false,
; 2252 : 		size_type _Newsize = 0)
; 2253 : 		{	// initialize buffer, deallocating any storage
; 2254 : 		if (!_Built)
; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)
; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00011	48 c7 41 18 07
	00 00 00	 mov	 QWORD PTR [rcx+24], 7

; 898  : 		{	// construct by moving _Right

  00019	48 8b da	 mov	 rbx, rdx

; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0001c	48 89 71 10	 mov	 QWORD PTR [rcx+16], rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00020	66 89 31	 mov	 WORD PTR [rcx], si
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 949  : 		if (_Right._Myres < this->_BUF_SIZE)

  00023	48 83 7a 18 08	 cmp	 QWORD PTR [rdx+24], 8

; 898  : 		{	// construct by moving _Right

  00028	48 8b f9	 mov	 rdi, rcx

; 949  : 		if (_Right._Myres < this->_BUF_SIZE)

  0002b	73 13		 jae	 SHORT $LN44@basic_stri

; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);

  0002d	4c 8b 42 10	 mov	 r8, QWORD PTR [rdx+16]
  00031	49 ff c0	 inc	 r8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 336  : 			: (_Elem *)_CSTD wmemmove(_First1, _First2, _Count));

  00034	74 13		 je	 SHORT $LN43@basic_stri
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\wchar.h

; 1267 :             return (wchar_t *)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00036	4d 03 c0	 add	 r8, r8
  00039	e8 00 00 00 00	 call	 memmove
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 952  : 		else

  0003e	eb 09		 jmp	 SHORT $LN43@basic_stri
$LN44@basic_stri:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00040	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00043	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 955  : 			_Right._Bx._Ptr = pointer();

  00046	48 89 32	 mov	 QWORD PTR [rdx], rsi
$LN43@basic_stri:

; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;

  00049	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0004d	48 89 47 10	 mov	 QWORD PTR [rdi+16], rax

; 958  : 		this->_Myres = _Right._Myres;

  00051	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00055	48 89 47 18	 mov	 QWORD PTR [rdi+24], rax

; 959  : 		_Right._Tidy();
; 960  : 		}
; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  00059	48 89 73 10	 mov	 QWORD PTR [rbx+16], rsi

; 2219 : 		}
; 2220 : 
; 2221 : 	bool _Grow(size_type _Newsize,
; 2222 : 		bool _Trim = false)
; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2224 : 		if (max_size() < _Newsize)
; 2225 : 			_Xlen();	// result too long
; 2226 : 		if (this->_Myres < _Newsize)
; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow
; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2231 : 		else if (_Newsize == 0)
; 2232 : 			_Eos(0);	// new size is zero, just null terminate
; 2233 : 		return (0 < _Newsize);	// return true only if more work to do
; 2234 : 		}
; 2235 : 
; 2236 : 	bool _Inside(const _Elem *_Ptr)
; 2237 : 		{	// test if _Ptr points inside string
; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)
; 2240 : 			return (false);	// don't ask
; 2241 : 		else
; 2242 : 			return (true);
; 2243 : 		}
; 2244 : 
; 2245 : 	static size_type _Pdif(const_iterator _P2,
; 2246 : 		const_iterator _P1)
; 2247 : 		{	// compute safe iterator difference
; 2248 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2249 : 		}
; 2250 : 
; 2251 : 	void _Tidy(bool _Built = false,
; 2252 : 		size_type _Newsize = 0)
; 2253 : 		{	// initialize buffer, deallocating any storage
; 2254 : 		if (!_Built)
; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)
; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  0005d	48 c7 43 18 07
	00 00 00	 mov	 QWORD PTR [rbx+24], 7
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  00065	66 89 33	 mov	 WORD PTR [rbx], si
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 901  : 		}

  00068	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0006d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00072	48 8b c7	 mov	 rax, rdi
  00075	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00079	5f		 pop	 rdi
  0007a	c3		 ret	 0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAA@$$QEAV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
;	COMDAT ??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >, COMDAT

; 28   : 		{	// construct with empty container

$LN54:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 79   : 		{	// construct childless container

  0000a	33 ff		 xor	 edi, edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 28   : 		{	// construct with empty container

  0000c	48 8b d9	 mov	 rbx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 79   : 		{	// construct childless container

  0000f	48 89 39	 mov	 QWORD PTR [rcx], rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 778  : 		_Map = _Mapptr();

  00012	48 89 79 08	 mov	 QWORD PTR [rcx+8], rdi

; 779  : 		_Mapsize = 0;

  00016	48 89 79 10	 mov	 QWORD PTR [rcx+16], rdi

; 780  : 		_Myoff = 0;

  0001a	48 89 79 18	 mov	 QWORD PTR [rcx+24], rdi

; 781  : 		_Mysize = 0;

  0001e	48 89 79 20	 mov	 QWORD PTR [rcx+32], rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00022	8d 4f 10	 lea	 ecx, QWORD PTR [rdi+16]
  00025	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0002a	48 85 c0	 test	 rax, rax
  0002d	74 1e		 je	 SHORT $LN52@stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 900  : 		this->_Myproxy = _Alproxy.allocate(1);

  0002f	48 89 03	 mov	 QWORD PTR [rbx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00032	48 89 38	 mov	 QWORD PTR [rax], rdi
  00035	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 902  : 		this->_Myproxy->_Mycont = this;

  00039	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0003c	48 89 18	 mov	 QWORD PTR [rax], rbx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 29   : 		}

  0003f	48 8b c3	 mov	 rax, rbx
  00042	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
$LN52@stack:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0004d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00052	cc		 int	 3
$LN51@stack:
??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
;	COMDAT ??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >, COMDAT

; 33   : 		{	// construct by copying _Right

$LN5:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
  00009	e8 00 00 00 00	 call	 ??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >

; 34   : 		}

  0000e	48 8b c3	 mov	 rax, rbx
  00011	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00015	5b		 pop	 rbx
  00016	c3		 ret	 0
??0?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
;	COMDAT ?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAX$$QEAVMatrix@geom@@@Z
_TEXT	SEGMENT
this$ = 8
_Val$ = 16
?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAX$$QEAVMatrix@geom@@@Z PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::push, COMDAT

; 107  : 		c.push_back(_STD move(_Val));

  00000	e9 00 00 00 00	 jmp	 ?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAX$$QEAVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAX$$QEAVMatrix@geom@@@Z ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::push
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
;	COMDAT ?empty@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?empty@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEBA_NXZ PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::empty, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	48 39 41 20	 cmp	 QWORD PTR [rcx+32], rax
  00006	0f 94 c0	 sete	 al
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 124  : 		}

  00009	c3		 ret	 0
?empty@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEBA_NXZ ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
;	COMDAT ?top@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAVMatrix@geom@@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 56
this$ = 96
?top@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAVMatrix@geom@@XZ PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::top, COMDAT

; 132  : 		{	// return last element of mutable stack

$LN16:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1436 : 		return (*(end() - 1));

  00004	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00009	e8 00 00 00 00	 call	 ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
  0000e	48 8d 54 24 38	 lea	 rdx, QWORD PTR $T2[rsp]
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
  0001b	48 8b d0	 mov	 rdx, rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0001e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00021	48 85 c0	 test	 rax, rax
  00024	74 03		 je	 SHORT $LN12@top
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN12@top:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00029	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 133  : 		return (c.back());

  0002d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00031	48 ff c9	 dec	 rcx
  00034	48 23 4a 10	 and	 rcx, QWORD PTR [rdx+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 133  : 		return (c.back());

  00038	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]

; 134  : 		}

  0003c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00040	c3		 ret	 0
?top@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAVMatrix@geom@@XZ ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::top
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
;	COMDAT ?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z
_TEXT	SEGMENT
this$ = 8
_Val$ = 16
?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::push, COMDAT

; 143  : 		c.push_back(_Val);

  00000	e9 00 00 00 00	 jmp	 ?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
?push@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::push
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack
;	COMDAT ?pop@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?pop@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ PROC ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::pop, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1382 : 		return (this->_Mysize == 0);

  00000	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00004	48 85 c0	 test	 rax, rax

; 1383 : 		}
; 1384 : 
; 1385 : 	allocator_type get_allocator() const _NOEXCEPT
; 1386 : 		{	// return allocator object for values
; 1387 : 		return (this->_Getal());
; 1388 : 		}
; 1389 : 
; 1390 : 	const_reference at(size_type _Pos) const
; 1391 : 		{	// subscript nonmutable sequence with checking
; 1392 : 		if (this->_Mysize <= _Pos)
; 1393 : 			_Xran();
; 1394 : 		return (*(begin() + _Pos));
; 1395 : 		}
; 1396 : 
; 1397 : 	reference at(size_type _Pos)
; 1398 : 		{	// subscript mutable sequence with checking
; 1399 : 		if (this->_Mysize <= _Pos)
; 1400 : 			_Xran();
; 1401 : 		return (*(begin() + _Pos));
; 1402 : 		}
; 1403 : 
; 1404 : 	const_reference operator[](size_type _Pos) const
; 1405 : 		{	// subscript nonmutable sequence
; 1406 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1407 : 		if (this->_Mysize <= _Pos)
; 1408 : 			_DEBUG_ERROR("deque subscript out of range");
; 1409 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1410 : 
; 1411 : 		return (*(begin() + _Pos));
; 1412 : 		}
; 1413 : 
; 1414 : 	reference operator[](size_type _Pos)
; 1415 : 		{	// subscript mutable sequence
; 1416 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1417 : 		if (this->_Mysize <= _Pos)
; 1418 : 			_DEBUG_ERROR("deque subscript out of range");
; 1419 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1420 : 
; 1421 : 		return (*(begin() + _Pos));
; 1422 : 		}
; 1423 : 
; 1424 : 	reference front()
; 1425 : 		{	// return first element of mutable sequence
; 1426 : 		return (*begin());
; 1427 : 		}
; 1428 : 
; 1429 : 	const_reference front() const
; 1430 : 		{	// return first element of nonmutable sequence
; 1431 : 		return (*begin());
; 1432 : 		}
; 1433 : 
; 1434 : 	reference back()
; 1435 : 		{	// return last element of mutable sequence
; 1436 : 		return (*(end() - 1));
; 1437 : 		}
; 1438 : 
; 1439 : 	const_reference back() const
; 1440 : 		{	// return last element of nonmutable sequence
; 1441 : 		return (*(end() - 1));
; 1442 : 		}
; 1443 : 
; 1444 : 	void push_front(const value_type& _Val)
; 1445 : 		{	// insert element at beginning
; 1446 : 		this->_Orphan_all();
; 1447 : 		_PUSH_FRONT_BEGIN;
; 1448 : 		this->_Getal().construct(
; 1449 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1450 : 		_PUSH_FRONT_END;
; 1451 : 		}
; 1452 : 
; 1453 : 	void pop_front()
; 1454 : 		{	// erase element at beginning
; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (empty())
; 1457 : 			_DEBUG_ERROR("deque empty before pop");
; 1458 : 		else
; 1459 : 			{	// something to erase, do it
; 1460 : 			_Orphan_off(this->_Myoff);
; 1461 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1462 : 			this->_Getal().destroy(
; 1463 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1464 : 			if (--this->_Mysize == 0)
; 1465 : 				this->_Myoff = 0;
; 1466 : 			else
; 1467 : 				++this->_Myoff;
; 1468 : 			}
; 1469 : 
; 1470 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 		if (!empty())
; 1472 : 			{	// something to erase, do it
; 1473 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1474 : 			this->_Getal().destroy(
; 1475 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1476 : 			if (--this->_Mysize == 0)
; 1477 : 				this->_Myoff = 0;
; 1478 : 			else
; 1479 : 				++this->_Myoff;
; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}
; 1483 : 
; 1484 : 	void push_back(const value_type& _Val)
; 1485 : 		{	// insert element at end
; 1486 : 		this->_Orphan_all();
; 1487 : 		_PUSH_BACK_BEGIN;
; 1488 : 		this->_Getal().construct(
; 1489 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1490 : 		_PUSH_BACK_END;
; 1491 : 		}
; 1492 : 
; 1493 : 	void pop_back()
; 1494 : 		{	// erase element at end
; 1495 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1496 : 		if (empty())
; 1497 : 			_DEBUG_ERROR("deque empty before pop");
; 1498 : 		else
; 1499 : 			{	// something to erase, do it
; 1500 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1501 : 			_Orphan_off(_Newoff);
; 1502 : 			size_type _Block = this->_Getblock(_Newoff);
; 1503 : 			this->_Getal().destroy(
; 1504 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1505 : 			if (--this->_Mysize == 0)
; 1506 : 				this->_Myoff = 0;
; 1507 : 			}
; 1508 : 
; 1509 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1510 : 		if (!empty())

  00007	74 11		 je	 SHORT $LN3@pop

; 1511 : 			{	// something to erase, do it
; 1512 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1513 : 			size_type _Block = this->_Getblock(_Newoff);
; 1514 : 			this->_Getal().destroy(
; 1515 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1516 : 			if (--this->_Mysize == 0)

  00009	48 ff c8	 dec	 rax
  0000c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  00010	75 08		 jne	 SHORT $LN3@pop

; 1517 : 				this->_Myoff = 0;

  00012	48 c7 41 18 00
	00 00 00	 mov	 QWORD PTR [rcx+24], 0
$LN3@pop:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\stack

; 149  : 		}

  0001a	f3 c3		 fatret	 0
?pop@?$stack@VMatrix@geom@@V?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ ENDP ; std::stack<geom::Matrix,std::deque<geom::Matrix,std::allocator<geom::Matrix> > >::pop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??1?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::~deque<geom::Matrix,std::allocator<geom::Matrix> >, COMDAT

; 1221 : 		{	// destroy the deque

$LN14:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1222 : 		_Tidy();

  00009	e8 00 00 00 00	 call	 ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0000e	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00011	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 912  : 		this->_Myproxy = 0;

  00016	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0

; 1223 : 		}

  0001d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00021	5b		 pop	 rbx
  00022	c3		 ret	 0
??1?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::~deque<geom::Matrix,std::allocator<geom::Matrix> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
;	COMDAT ??0?$Uniform@VVector@geom@@@gfxu@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$Uniform@VVector@geom@@@gfxu@@QEAA@XZ PROC		; gfxu::Uniform<geom::Vector>::Uniform<geom::Vector>, COMDAT
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 16   : {

  00000	33 c0		 xor	 eax, eax
  00002	c7 41 0c 00 00
	80 3f		 mov	 DWORD PTR [rcx+12], 1065353216 ; 3f800000H
  00009	48 89 01	 mov	 QWORD PTR [rcx], rax
  0000c	89 41 08	 mov	 DWORD PTR [rcx+8], eax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h

; 241  : 		{

  0000f	c6 41 10 01	 mov	 BYTE PTR [rcx+16], 1

; 242  : 
; 243  : 		}

  00013	48 8b c1	 mov	 rax, rcx
  00016	c3		 ret	 0
??0?$Uniform@VVector@geom@@@gfxu@@QEAA@XZ ENDP		; gfxu::Uniform<geom::Vector>::Uniform<geom::Vector>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
;	COMDAT ?get@?$Uniform@VVector@geom@@@gfxu@@QEAA?AVVector@geom@@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?get@?$Uniform@VVector@geom@@@gfxu@@QEAA?AVVector@geom@@XZ PROC ; gfxu::Uniform<geom::Vector>::get, COMDAT
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 10   : {

  00000	8b 01		 mov	 eax, DWORD PTR [rcx]
  00002	89 02		 mov	 DWORD PTR [rdx], eax
  00004	8b 41 04	 mov	 eax, DWORD PTR [rcx+4]
  00007	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  0000a	8b 41 08	 mov	 eax, DWORD PTR [rcx+8]
  0000d	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00010	8b 41 0c	 mov	 eax, DWORD PTR [rcx+12]
  00013	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h

; 251  : 			return val;

  00016	48 8b c2	 mov	 rax, rdx

; 252  : 		}

  00019	c3		 ret	 0
?get@?$Uniform@VVector@geom@@@gfxu@@QEAA?AVVector@geom@@XZ ENDP ; gfxu::Uniform<geom::Vector>::get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
;	COMDAT ??0?$Uniform@M@gfxu@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??0?$Uniform@M@gfxu@@QEAA@XZ PROC			; gfxu::Uniform<float>::Uniform<float>, COMDAT

; 241  : 		{

  00000	c6 05 04 00 00
	00 01		 mov	 BYTE PTR ?fogDist@Uniforms@gfxu@@2V?$Uniform@M@2@A+4, 1

; 242  : 
; 243  : 		}

  00007	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?fogDist@Uniforms@gfxu@@2V?$Uniform@M@2@A ; gfxu::Uniforms::fogDist
  0000e	c3		 ret	 0
??0?$Uniform@M@gfxu@@QEAA@XZ ENDP			; gfxu::Uniform<float>::Uniform<float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.h
;	COMDAT ?get@?$Uniform@M@gfxu@@QEAAMXZ
_TEXT	SEGMENT
this$ = 8
?get@?$Uniform@M@gfxu@@QEAAMXZ PROC			; gfxu::Uniform<float>::get, COMDAT

; 251  : 			return val;

  00000	f3 0f 10 01	 movss	 xmm0, DWORD PTR [rcx]

; 252  : 		}

  00004	c3		 ret	 0
?get@?$Uniform@M@gfxu@@QEAAMXZ ENDP			; gfxu::Uniform<float>::get
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::capacity, COMDAT

; 967  : 		return (this->_Myend - this->_Myfirst);

  00000	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  00004	48 b8 ab aa aa
	aa aa aa aa 2a	 mov	 rax, 3074457345618258603 ; 2aaaaaaaaaaaaaabH
  0000e	48 2b 11	 sub	 rdx, QWORD PTR [rcx]
  00011	48 f7 ea	 imul	 rdx
  00014	48 c1 fa 02	 sar	 rdx, 2
  00018	48 8b c2	 mov	 rax, rdx
  0001b	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  0001f	48 03 c2	 add	 rax, rdx

; 968  : 		}

  00022	c3		 ret	 0
?capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?_Has_unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Has_unused_capacity, COMDAT

; 977  : 		return (this->_Myend != this->_Mylast);

  00000	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  00004	33 c0		 xor	 eax, eax
  00006	48 39 51 10	 cmp	 QWORD PTR [rcx+16], rdx
  0000a	0f 95 c0	 setne	 al

; 978  : 		}

  0000d	c3		 ret	 0
?_Has_unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?max_size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::max_size, COMDAT

; 1092 : 		return (this->_Getal().max_size());

  00000	48 b8 aa aa aa
	aa aa aa aa 0a	 mov	 rax, 768614336404564650	; 0aaaaaaaaaaaaaaaH

; 1093 : 		}

  0000a	c3		 ret	 0
?max_size@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?empty@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?empty@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_NXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::empty, COMDAT

; 1097 : 		return (this->_Myfirst == this->_Mylast);

  00000	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  00004	48 39 11	 cmp	 QWORD PTR [rcx], rdx
  00007	0f 94 c0	 sete	 al

; 1098 : 		}

  0000a	c3		 ret	 0
?empty@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_NXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAXPEAVVertexUVRGBA@gfxu@@0@Z
_TEXT	SEGMENT
this$dead$ = 8
_First$dead$ = 16
_Last$dead$ = 24
?_Destroy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAXPEAVVertexUVRGBA@gfxu@@0@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Destroy, COMDAT

; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}

  00000	c2 00 00	 ret	 0
?_Destroy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAXPEAVVertexUVRGBA@gfxu@@0@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBA_NPEBVVertexUVRGBA@gfxu@@@Z
_TEXT	SEGMENT
this$ = 8
_Ptr$ = 16
?_Inside@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBA_NPEBVVertexUVRGBA@gfxu@@@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Inside, COMDAT

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  00000	48 3b 51 08	 cmp	 rdx, QWORD PTR [rcx+8]
  00004	73 08		 jae	 SHORT $LN3@Inside
  00006	48 39 11	 cmp	 QWORD PTR [rcx], rdx
  00009	77 03		 ja	 SHORT $LN3@Inside
  0000b	b0 01		 mov	 al, 1

; 1497 : 		}

  0000d	c3		 ret	 0
$LN3@Inside:

; 1496 : 		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);

  0000e	32 c0		 xor	 al, al

; 1497 : 		}

  00010	c3		 ret	 0
?_Inside@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBA_NPEBVVertexUVRGBA@gfxu@@@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
this$ = 64
_Count$ = 72
?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate, COMDAT

; 1500 : 		{	// move to array of exactly _Count elements

$LN51:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 23   : 	void *_Ptr = 0;

  0000f	33 ff		 xor	 edi, edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1500 : 		{	// move to array of exactly _Count elements

  00011	48 8b da	 mov	 rbx, rdx
  00014	48 8b f1	 mov	 rsi, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  00017	48 85 d2	 test	 rdx, rdx
  0001a	74 28		 je	 SHORT $LN16@Reallocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0001c	48 b8 aa aa aa
	aa aa aa aa 0a	 mov	 rax, 768614336404564650	; 0aaaaaaaaaaaaaaaH
  00026	48 3b d0	 cmp	 rdx, rax
  00029	0f 87 8b 00 00
	00		 ja	 $LN49@Reallocate
  0002f	48 8d 0c 52	 lea	 rcx, QWORD PTR [rdx+rdx*2]
  00033	48 c1 e1 03	 shl	 rcx, 3
  00037	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0003c	48 8b f8	 mov	 rdi, rax
  0003f	48 85 c0	 test	 rax, rax
  00042	74 76		 je	 SHORT $LN49@Reallocate
$LN16@Reallocate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00044	48 8b 56 08	 mov	 rdx, QWORD PTR [rsi+8]
  00048	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0004b	4c 8b c7	 mov	 r8, rdi
  0004e	4c 89 74 24 40	 mov	 QWORD PTR [rsp+64], r14
  00053	e8 00 00 00 00	 call	 ??$_Uninit_move@PEAVVertexUVRGBA@gfxu@@PEAV12@V?$allocator@VVertexUVRGBA@gfxu@@@std@@V12@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@00AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<gfxu::VertexUVRGBA * __ptr64,gfxu::VertexUVRGBA * __ptr64,std::allocator<gfxu::VertexUVRGBA>,gfxu::VertexUVRGBA>
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1087 : 		return (this->_Mylast - this->_Myfirst);

  00058	48 8b 0e	 mov	 rcx, QWORD PTR [rsi]
  0005b	48 8b 56 08	 mov	 rdx, QWORD PTR [rsi+8]
  0005f	48 b8 ab aa aa
	aa aa aa aa 2a	 mov	 rax, 3074457345618258603 ; 2aaaaaaaaaaaaaabH
  00069	48 2b d1	 sub	 rdx, rcx
  0006c	48 f7 ea	 imul	 rdx
  0006f	4c 8b f2	 mov	 r14, rdx
  00072	49 c1 fe 02	 sar	 r14, 2
  00076	49 8b c6	 mov	 rax, r14
  00079	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  0007d	4c 03 f0	 add	 r14, rax

; 1501 : 		pointer _Ptr = this->_Getal().allocate(_Count);
; 1502 : 
; 1503 : 		_TRY_BEGIN
; 1504 : 		_Umove(this->_Myfirst, this->_Mylast, _Ptr);
; 1505 : 		_CATCH_ALL
; 1506 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1507 : 		_RERAISE;
; 1508 : 		_CATCH_END
; 1509 : 
; 1510 : 		size_type _Size = size();
; 1511 : 		if (this->_Myfirst != pointer())

  00080	48 85 c9	 test	 rcx, rcx
  00083	74 05		 je	 SHORT $LN44@Reallocate
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00085	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN44@Reallocate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1519 : 		this->_Myend = _Ptr + _Count;

  0008a	48 8d 04 5b	 lea	 rax, QWORD PTR [rbx+rbx*2]

; 1522 : 		}

  0008e	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00093	48 89 3e	 mov	 QWORD PTR [rsi], rdi
  00096	48 8d 0c c7	 lea	 rcx, QWORD PTR [rdi+rax*8]
  0009a	4b 8d 04 76	 lea	 rax, QWORD PTR [r14+r14*2]
  0009e	4c 8b 74 24 40	 mov	 r14, QWORD PTR [rsp+64]
  000a3	48 89 4e 10	 mov	 QWORD PTR [rsi+16], rcx
  000a7	48 8d 0c c7	 lea	 rcx, QWORD PTR [rdi+rax*8]
  000ab	48 89 4e 08	 mov	 QWORD PTR [rsi+8], rcx
  000af	48 8b 74 24 50	 mov	 rsi, QWORD PTR [rsp+80]
  000b4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b8	5f		 pop	 rdi
  000b9	c3		 ret	 0
$LN49@Reallocate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  000ba	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  000bf	cc		 int	 3
$LN48@Reallocate:
?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$dead$ = 56
?_Reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reserve, COMDAT

; 1525 : 		{	// ensure room for _Count new elements, grow exponentially

$LN44:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 968  : 		}
; 969  : 
; 970  : 	size_type _Unused_capacity() const _NOEXCEPT
; 971  : 		{	// micro-optimization for capacity() - size()
; 972  : 		return (this->_Myend - this->_Mylast);

  00006	4c 8b 49 10	 mov	 r9, QWORD PTR [rcx+16]
  0000a	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  0000e	48 bb ab aa aa
	aa aa aa aa 2a	 mov	 rbx, 3074457345618258603 ; 2aaaaaaaaaaaaaabH
  00018	49 8b d1	 mov	 rdx, r9
  0001b	48 8b c3	 mov	 rax, rbx
  0001e	49 2b d0	 sub	 rdx, r8
  00021	48 f7 ea	 imul	 rdx
  00024	48 c1 fa 02	 sar	 rdx, 2
  00028	48 8b c2	 mov	 rax, rdx
  0002b	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  0002f	48 03 d0	 add	 rdx, rax

; 1526 : 		if (_Unused_capacity() < _Count)

  00032	48 83 fa 01	 cmp	 rdx, 1
  00036	0f 83 80 00 00
	00		 jae	 $LN2@Reserve

; 973  : 		}
; 974  : 
; 975  : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 976  : 		{	// micro-optimization for capacity() != size()
; 977  : 		return (this->_Myend != this->_Mylast);
; 978  : 		}
; 979  : 
; 980  : 	iterator begin() _NOEXCEPT
; 981  : 		{	// return iterator for beginning of mutable sequence
; 982  : 		return (iterator(this->_Myfirst, this));
; 983  : 		}
; 984  : 
; 985  : 	const_iterator begin() const _NOEXCEPT
; 986  : 		{	// return iterator for beginning of nonmutable sequence
; 987  : 		return (const_iterator(this->_Myfirst, this));
; 988  : 		}
; 989  : 
; 990  : 	iterator end() _NOEXCEPT
; 991  : 		{	// return iterator for end of mutable sequence
; 992  : 		return (iterator(this->_Mylast, this));
; 993  : 		}
; 994  : 
; 995  : 	const_iterator end() const _NOEXCEPT
; 996  : 		{	// return iterator for end of nonmutable sequence
; 997  : 		return (const_iterator(this->_Mylast, this));
; 998  : 		}
; 999  : 
; 1000 : 	iterator _Make_iter(const_iterator _Where) const
; 1001 : 		{	// make iterator from const_iterator
; 1002 : 		return (iterator(_Where._Ptr, this));
; 1003 : 		}
; 1004 : 
; 1005 : 	reverse_iterator rbegin() _NOEXCEPT
; 1006 : 		{	// return iterator for beginning of reversed mutable sequence
; 1007 : 		return (reverse_iterator(end()));
; 1008 : 		}
; 1009 : 
; 1010 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1011 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1012 : 		return (const_reverse_iterator(end()));
; 1013 : 		}
; 1014 : 
; 1015 : 	reverse_iterator rend() _NOEXCEPT
; 1016 : 		{	// return iterator for end of reversed mutable sequence
; 1017 : 		return (reverse_iterator(begin()));
; 1018 : 		}
; 1019 : 
; 1020 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1021 : 		{	// return iterator for end of reversed nonmutable sequence
; 1022 : 		return (const_reverse_iterator(begin()));
; 1023 : 		}
; 1024 : 
; 1025 :  #if _HAS_CPP0X
; 1026 : 	const_iterator cbegin() const _NOEXCEPT
; 1027 : 		{	// return iterator for beginning of nonmutable sequence
; 1028 : 		return (((const _Myt *)this)->begin());
; 1029 : 		}
; 1030 : 
; 1031 : 	const_iterator cend() const _NOEXCEPT
; 1032 : 		{	// return iterator for end of nonmutable sequence
; 1033 : 		return (((const _Myt *)this)->end());
; 1034 : 		}
; 1035 : 
; 1036 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1037 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1038 : 		return (((const _Myt *)this)->rbegin());
; 1039 : 		}
; 1040 : 
; 1041 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1042 : 		{	// return iterator for end of reversed nonmutable sequence
; 1043 : 		return (((const _Myt *)this)->rend());
; 1044 : 		}
; 1045 : 
; 1046 : 	void shrink_to_fit()
; 1047 : 		{	// reduce capacity
; 1048 : 		if (_Has_unused_capacity())
; 1049 : 			{	// worth shrinking, do it
; 1050 : 			if (empty())
; 1051 : 				_Tidy();
; 1052 : 			else
; 1053 : 				_Reallocate(size());
; 1054 : 			}
; 1055 : 		}
; 1056 :  #endif /* _HAS_CPP0X */
; 1057 : 
; 1058 : 	void resize(size_type _Newsize)
; 1059 : 		{	// determine new length, padding as needed
; 1060 : 		if (_Newsize < size())
; 1061 : 			erase(begin() + _Newsize, end());
; 1062 : 		else if (size() < _Newsize)
; 1063 : 			{	// pad as needed
; 1064 : 			_Alty _Alval(this->_Getal());
; 1065 : 			_Reserve(_Newsize - size());
; 1066 : 			_TRY_BEGIN
; 1067 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1068 : 				_Alval);
; 1069 : 			_CATCH_ALL
; 1070 : 			_Tidy();
; 1071 : 			_RERAISE;
; 1072 : 			_CATCH_END
; 1073 : 			this->_Mylast += _Newsize - size();
; 1074 : 			}
; 1075 : 		}
; 1076 : 
; 1077 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1078 : 		{	// determine new length, padding with _Val elements as needed
; 1079 : 		if (_Newsize < size())
; 1080 : 			erase(begin() + _Newsize, end());
; 1081 : 		else if (size() < _Newsize)
; 1082 : 			_Insert_n(end(), _Newsize - size(), _Val);
; 1083 : 		}
; 1084 : 
; 1085 : 	size_type size() const _NOEXCEPT
; 1086 : 		{	// return length of sequence
; 1087 : 		return (this->_Mylast - this->_Myfirst);

  0003c	4c 8b 19	 mov	 r11, QWORD PTR [rcx]
  0003f	48 8b c3	 mov	 rax, rbx

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

  00042	49 ba aa aa aa
	aa aa aa aa 0a	 mov	 r10, 768614336404564650	; 0aaaaaaaaaaaaaaaH

; 973  : 		}
; 974  : 
; 975  : 	size_type _Has_unused_capacity() const _NOEXCEPT
; 976  : 		{	// micro-optimization for capacity() != size()
; 977  : 		return (this->_Myend != this->_Mylast);
; 978  : 		}
; 979  : 
; 980  : 	iterator begin() _NOEXCEPT
; 981  : 		{	// return iterator for beginning of mutable sequence
; 982  : 		return (iterator(this->_Myfirst, this));
; 983  : 		}
; 984  : 
; 985  : 	const_iterator begin() const _NOEXCEPT
; 986  : 		{	// return iterator for beginning of nonmutable sequence
; 987  : 		return (const_iterator(this->_Myfirst, this));
; 988  : 		}
; 989  : 
; 990  : 	iterator end() _NOEXCEPT
; 991  : 		{	// return iterator for end of mutable sequence
; 992  : 		return (iterator(this->_Mylast, this));
; 993  : 		}
; 994  : 
; 995  : 	const_iterator end() const _NOEXCEPT
; 996  : 		{	// return iterator for end of nonmutable sequence
; 997  : 		return (const_iterator(this->_Mylast, this));
; 998  : 		}
; 999  : 
; 1000 : 	iterator _Make_iter(const_iterator _Where) const
; 1001 : 		{	// make iterator from const_iterator
; 1002 : 		return (iterator(_Where._Ptr, this));
; 1003 : 		}
; 1004 : 
; 1005 : 	reverse_iterator rbegin() _NOEXCEPT
; 1006 : 		{	// return iterator for beginning of reversed mutable sequence
; 1007 : 		return (reverse_iterator(end()));
; 1008 : 		}
; 1009 : 
; 1010 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1011 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1012 : 		return (const_reverse_iterator(end()));
; 1013 : 		}
; 1014 : 
; 1015 : 	reverse_iterator rend() _NOEXCEPT
; 1016 : 		{	// return iterator for end of reversed mutable sequence
; 1017 : 		return (reverse_iterator(begin()));
; 1018 : 		}
; 1019 : 
; 1020 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1021 : 		{	// return iterator for end of reversed nonmutable sequence
; 1022 : 		return (const_reverse_iterator(begin()));
; 1023 : 		}
; 1024 : 
; 1025 :  #if _HAS_CPP0X
; 1026 : 	const_iterator cbegin() const _NOEXCEPT
; 1027 : 		{	// return iterator for beginning of nonmutable sequence
; 1028 : 		return (((const _Myt *)this)->begin());
; 1029 : 		}
; 1030 : 
; 1031 : 	const_iterator cend() const _NOEXCEPT
; 1032 : 		{	// return iterator for end of nonmutable sequence
; 1033 : 		return (((const _Myt *)this)->end());
; 1034 : 		}
; 1035 : 
; 1036 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1037 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1038 : 		return (((const _Myt *)this)->rbegin());
; 1039 : 		}
; 1040 : 
; 1041 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1042 : 		{	// return iterator for end of reversed nonmutable sequence
; 1043 : 		return (((const _Myt *)this)->rend());
; 1044 : 		}
; 1045 : 
; 1046 : 	void shrink_to_fit()
; 1047 : 		{	// reduce capacity
; 1048 : 		if (_Has_unused_capacity())
; 1049 : 			{	// worth shrinking, do it
; 1050 : 			if (empty())
; 1051 : 				_Tidy();
; 1052 : 			else
; 1053 : 				_Reallocate(size());
; 1054 : 			}
; 1055 : 		}
; 1056 :  #endif /* _HAS_CPP0X */
; 1057 : 
; 1058 : 	void resize(size_type _Newsize)
; 1059 : 		{	// determine new length, padding as needed
; 1060 : 		if (_Newsize < size())
; 1061 : 			erase(begin() + _Newsize, end());
; 1062 : 		else if (size() < _Newsize)
; 1063 : 			{	// pad as needed
; 1064 : 			_Alty _Alval(this->_Getal());
; 1065 : 			_Reserve(_Newsize - size());
; 1066 : 			_TRY_BEGIN
; 1067 : 			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
; 1068 : 				_Alval);
; 1069 : 			_CATCH_ALL
; 1070 : 			_Tidy();
; 1071 : 			_RERAISE;
; 1072 : 			_CATCH_END
; 1073 : 			this->_Mylast += _Newsize - size();
; 1074 : 			}
; 1075 : 		}
; 1076 : 
; 1077 : 	void resize(size_type _Newsize, const value_type& _Val)
; 1078 : 		{	// determine new length, padding with _Val elements as needed
; 1079 : 		if (_Newsize < size())
; 1080 : 			erase(begin() + _Newsize, end());
; 1081 : 		else if (size() < _Newsize)
; 1082 : 			_Insert_n(end(), _Newsize - size(), _Val);
; 1083 : 		}
; 1084 : 
; 1085 : 	size_type size() const _NOEXCEPT
; 1086 : 		{	// return length of sequence
; 1087 : 		return (this->_Mylast - this->_Myfirst);

  0004c	4d 2b c3	 sub	 r8, r11
  0004f	49 f7 e8	 imul	 r8
  00052	48 c1 fa 02	 sar	 rdx, 2
  00056	48 8b c2	 mov	 rax, rdx
  00059	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  0005d	48 03 d0	 add	 rdx, rax

; 1527 : 			{	// need more room, try to get it
; 1528 : 			if (max_size() - size() < _Count)

  00060	49 8b c2	 mov	 rax, r10
  00063	48 2b c2	 sub	 rax, rdx
  00066	48 83 f8 01	 cmp	 rax, 1
  0006a	72 56		 jb	 SHORT $LN42@Reserve

; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

  0006c	4c 8d 42 01	 lea	 r8, QWORD PTR [rdx+1]

; 967  : 		return (this->_Myend - this->_Myfirst);

  00070	4d 2b cb	 sub	 r9, r11
  00073	48 8b c3	 mov	 rax, rbx
  00076	49 f7 e9	 imul	 r9
  00079	48 c1 fa 02	 sar	 rdx, 2
  0007d	48 8b c2	 mov	 rax, rdx
  00080	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  00084	48 03 d0	 add	 rdx, rax

; 1088 : 		}
; 1089 : 
; 1090 : 	size_type max_size() const _NOEXCEPT
; 1091 : 		{	// return maximum possible length of sequence
; 1092 : 		return (this->_Getal().max_size());
; 1093 : 		}
; 1094 : 
; 1095 : 	bool empty() const _NOEXCEPT
; 1096 : 		{	// test if sequence is empty
; 1097 : 		return (this->_Myfirst == this->_Mylast);
; 1098 : 		}
; 1099 : 
; 1100 : 	_Alloc get_allocator() const _NOEXCEPT
; 1101 : 		{	// return allocator object for values
; 1102 : 		return (this->_Getal());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_reference at(size_type _Pos) const
; 1106 : 		{	// subscript nonmutable sequence with checking
; 1107 : 		if (size() <= _Pos)
; 1108 : 			_Xran();
; 1109 : 		return (*(this->_Myfirst + _Pos));
; 1110 : 		}
; 1111 : 
; 1112 : 	reference at(size_type _Pos)
; 1113 : 		{	// subscript mutable sequence with checking
; 1114 : 		if (size() <= _Pos)
; 1115 : 			_Xran();
; 1116 : 		return (*(this->_Myfirst + _Pos));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_reference operator[](size_type _Pos) const
; 1120 : 		{	// subscript nonmutable sequence
; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));
; 1133 : 		}
; 1134 : 
; 1135 : 	reference operator[](size_type _Pos)
; 1136 : 		{	// subscript mutable sequence
; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));
; 1149 : 		}
; 1150 : 
; 1151 :  #if _HAS_CPP0X
; 1152 : 	pointer data() _NOEXCEPT
; 1153 : 		{	// return address of first element
; 1154 : 		return (this->_Myfirst);
; 1155 : 		}
; 1156 : 
; 1157 : 	const_pointer data() const _NOEXCEPT
; 1158 : 		{	// return address of first element
; 1159 : 		return (this->_Myfirst);
; 1160 : 		}
; 1161 :  #endif /* _HAS_CPP0X */
; 1162 : 
; 1163 : 	reference front()
; 1164 : 		{	// return first element of mutable sequence
; 1165 : 		return (*begin());
; 1166 : 		}
; 1167 : 
; 1168 : 	const_reference front() const
; 1169 : 		{	// return first element of nonmutable sequence
; 1170 : 		return (*begin());
; 1171 : 		}
; 1172 : 
; 1173 : 	reference back()
; 1174 : 		{	// return last element of mutable sequence
; 1175 : 		return (*(end() - 1));
; 1176 : 		}
; 1177 : 
; 1178 : 	const_reference back() const
; 1179 : 		{	// return last element of nonmutable sequence
; 1180 : 		return (*(end() - 1));
; 1181 : 		}
; 1182 : 
; 1183 : 	void push_back(const value_type& _Val)
; 1184 : 		{	// insert element at end
; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1188 : 			if (this->_Mylast == this->_Myend)
; 1189 : 				_Reserve(1);
; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);
; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)
; 1198 : 				_Reserve(1);
; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);
; 1202 : 			++this->_Mylast;
; 1203 : 			}
; 1204 : 		}
; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00087	48 8b c2	 mov	 rax, rdx
  0008a	48 d1 e8	 shr	 rax, 1
  0008d	4c 2b d0	 sub	 r10, rax
  00090	4c 3b d2	 cmp	 r10, rdx
  00093	73 13		 jae	 SHORT $LN27@Reserve
  00095	33 d2		 xor	 edx, edx

; 1489 : 		if (_Capacity < _Count)

  00097	49 3b d0	 cmp	 rdx, r8
  0009a	49 0f 42 d0	 cmovb	 rdx, r8

; 1531 : 			}
; 1532 : 		}

  0009e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a2	5b		 pop	 rbx

; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

  000a3	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
$LN27@Reserve:

; 1088 : 		}
; 1089 : 
; 1090 : 	size_type max_size() const _NOEXCEPT
; 1091 : 		{	// return maximum possible length of sequence
; 1092 : 		return (this->_Getal().max_size());
; 1093 : 		}
; 1094 : 
; 1095 : 	bool empty() const _NOEXCEPT
; 1096 : 		{	// test if sequence is empty
; 1097 : 		return (this->_Myfirst == this->_Mylast);
; 1098 : 		}
; 1099 : 
; 1100 : 	_Alloc get_allocator() const _NOEXCEPT
; 1101 : 		{	// return allocator object for values
; 1102 : 		return (this->_Getal());
; 1103 : 		}
; 1104 : 
; 1105 : 	const_reference at(size_type _Pos) const
; 1106 : 		{	// subscript nonmutable sequence with checking
; 1107 : 		if (size() <= _Pos)
; 1108 : 			_Xran();
; 1109 : 		return (*(this->_Myfirst + _Pos));
; 1110 : 		}
; 1111 : 
; 1112 : 	reference at(size_type _Pos)
; 1113 : 		{	// subscript mutable sequence with checking
; 1114 : 		if (size() <= _Pos)
; 1115 : 			_Xran();
; 1116 : 		return (*(this->_Myfirst + _Pos));
; 1117 : 		}
; 1118 : 
; 1119 : 	const_reference operator[](size_type _Pos) const
; 1120 : 		{	// subscript nonmutable sequence
; 1121 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1122 : 		if (size() <= _Pos)
; 1123 : 			{	// report error
; 1124 : 			_DEBUG_ERROR("vector subscript out of range");
; 1125 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1126 : 			}
; 1127 : 
; 1128 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1129 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1130 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1131 : 
; 1132 : 		return (*(this->_Myfirst + _Pos));
; 1133 : 		}
; 1134 : 
; 1135 : 	reference operator[](size_type _Pos)
; 1136 : 		{	// subscript mutable sequence
; 1137 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1138 : 		if (size() <= _Pos)
; 1139 : 			{	// report error
; 1140 : 			_DEBUG_ERROR("vector subscript out of range");
; 1141 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1142 : 			}
; 1143 : 
; 1144 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1145 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1146 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1147 : 
; 1148 : 		return (*(this->_Myfirst + _Pos));
; 1149 : 		}
; 1150 : 
; 1151 :  #if _HAS_CPP0X
; 1152 : 	pointer data() _NOEXCEPT
; 1153 : 		{	// return address of first element
; 1154 : 		return (this->_Myfirst);
; 1155 : 		}
; 1156 : 
; 1157 : 	const_pointer data() const _NOEXCEPT
; 1158 : 		{	// return address of first element
; 1159 : 		return (this->_Myfirst);
; 1160 : 		}
; 1161 :  #endif /* _HAS_CPP0X */
; 1162 : 
; 1163 : 	reference front()
; 1164 : 		{	// return first element of mutable sequence
; 1165 : 		return (*begin());
; 1166 : 		}
; 1167 : 
; 1168 : 	const_reference front() const
; 1169 : 		{	// return first element of nonmutable sequence
; 1170 : 		return (*begin());
; 1171 : 		}
; 1172 : 
; 1173 : 	reference back()
; 1174 : 		{	// return last element of mutable sequence
; 1175 : 		return (*(end() - 1));
; 1176 : 		}
; 1177 : 
; 1178 : 	const_reference back() const
; 1179 : 		{	// return last element of nonmutable sequence
; 1180 : 		return (*(end() - 1));
; 1181 : 		}
; 1182 : 
; 1183 : 	void push_back(const value_type& _Val)
; 1184 : 		{	// insert element at end
; 1185 : 		if (_Inside(_STD addressof(_Val)))
; 1186 : 			{	// push back an element
; 1187 : 			size_type _Idx = _STD addressof(_Val) - this->_Myfirst;
; 1188 : 			if (this->_Mylast == this->_Myend)
; 1189 : 				_Reserve(1);
; 1190 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1191 : 			this->_Getal().construct(this->_Mylast,
; 1192 : 				this->_Myfirst[_Idx]);
; 1193 : 			++this->_Mylast;
; 1194 : 			}
; 1195 : 		else
; 1196 : 			{	// push back a non-element
; 1197 : 			if (this->_Mylast == this->_Myend)
; 1198 : 				_Reserve(1);
; 1199 : 			_Orphan_range(this->_Mylast, this->_Mylast);
; 1200 : 			this->_Getal().construct(this->_Mylast,
; 1201 : 				_Val);
; 1202 : 			++this->_Mylast;
; 1203 : 			}
; 1204 : 		}
; 1205 : 
; 1206 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1207 : 	void pop_back()
; 1208 : 		{	// erase element at end
; 1209 : 		if (empty())
; 1210 : 			_DEBUG_ERROR("vector empty before pop");
; 1211 : 		else
; 1212 : 			{	// erase last element
; 1213 : 			_Orphan_range(this->_Mylast - 1, this->_Mylast);
; 1214 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1215 : 			--this->_Mylast;
; 1216 : 			}
; 1217 : 		}
; 1218 : 
; 1219 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1220 : 	void pop_back()
; 1221 : 		{	// erase element at end
; 1222 : 		if (!empty())
; 1223 : 			{	// erase last element
; 1224 : 			this->_Getal().destroy(this->_Mylast - 1);
; 1225 : 			--this->_Mylast;
; 1226 : 			}
; 1227 : 		}
; 1228 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1229 : 
; 1230 : 	template<class _Iter>
; 1231 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1232 : 			void>::type
; 1233 : 		assign(_Iter _First, _Iter _Last)
; 1234 : 		{	// assign [_First, _Last), input iterators
; 1235 : 		erase(begin(), end());
; 1236 : 		insert(begin(), _First, _Last);
; 1237 : 		}
; 1238 : 
; 1239 : 	void assign(size_type _Count, const value_type& _Val)
; 1240 : 		{	// assign _Count * _Val
; 1241 : 		_Assign_n(_Count, _Val);
; 1242 : 		}
; 1243 : 
; 1244 : 	iterator insert(const_iterator _Where, const _Ty& _Val)
; 1245 : 		{	// insert _Val at _Where
; 1246 : 		return (_Insert_n(_Where, (size_type)1, _Val));
; 1247 : 		}
; 1248 : 
; 1249 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1250 : 		const _Ty& _Val)
; 1251 : 		{	// insert _Count * _Val at _Where
; 1252 : 		return (_Insert_n(_Where, _Count, _Val));
; 1253 : 		}
; 1254 : 
; 1255 : 	template<class _Iter>
; 1256 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1257 : 			iterator>::type
; 1258 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1259 : 		{	// insert [_First, _Last) at _Where
; 1260 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1261 : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));
; 1262 : 		return (begin() + _Off);
; 1263 : 		}
; 1264 : 
; 1265 : 	template<class _Iter>
; 1266 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1267 : 			input_iterator_tag)
; 1268 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1269 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1270 : 
; 1271 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1272 : 		if (size() < _Off)
; 1273 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1274 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1275 : 
; 1276 : 		if (_First != _Last)
; 1277 : 			{	// worth doing, gather at end and rotate into place
; 1278 : 			size_type _Oldsize = size();
; 1279 : 
; 1280 : 			_TRY_BEGIN
; 1281 : 			for (; _First != _Last; ++_First)
; 1282 : 				push_back(*_First);	// append
; 1283 : 
; 1284 : 			_CATCH_ALL
; 1285 : 			erase(begin() + _Oldsize, end());
; 1286 : 			_RERAISE;
; 1287 : 			_CATCH_END
; 1288 : 
; 1289 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());
; 1290 : 			}
; 1291 : 		}
; 1292 : 
; 1293 : 	template<class _Iter>
; 1294 : 		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
; 1295 : 			forward_iterator_tag)
; 1296 : 		{	// insert [_First, _Last) at _Where, forward iterators
; 1297 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1298 : 		if (_VICONT(_Where) != this
; 1299 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1300 : 			|| this->_Mylast < _VIPTR(_Where))
; 1301 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1302 : 		_DEBUG_RANGE(_First, _Last);
; 1303 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1304 : 
; 1305 : 		size_type _Count = 0;
; 1306 : 		_Distance(_First, _Last, _Count);
; 1307 : 
; 1308 : 		if (_Count == 0)
; 1309 : 			;
; 1310 : 		else if (_Unused_capacity() < _Count)
; 1311 : 			{	// not enough room, reallocate
; 1312 : 			if (max_size() - size() < _Count)
; 1313 : 				_Xlen();	// result too long
; 1314 : 
; 1315 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1316 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1317 : 			pointer _Ptr = _Newvec;
; 1318 : 
; 1319 : 			_TRY_BEGIN
; 1320 : 			_Ptr = _Umove(this->_Myfirst, _VIPTR(_Where),
; 1321 : 				_Newvec);	// copy prefix
; 1322 : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff
; 1323 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1324 : 				_Ptr);	// copy suffix
; 1325 : 			_CATCH_ALL
; 1326 : 			_Destroy(_Newvec, _Ptr);
; 1327 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1328 : 			_RERAISE;
; 1329 : 			_CATCH_END
; 1330 : 
; 1331 : 			_Count += size();
; 1332 : 			if (this->_Myfirst != pointer())
; 1333 : 				{	// destroy and deallocate old array
; 1334 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1335 : 				this->_Getal().deallocate(this->_Myfirst,
; 1336 : 					this->_Myend - this->_Myfirst);
; 1337 : 				}
; 1338 : 
; 1339 : 			this->_Orphan_all();
; 1340 : 			this->_Myend = _Newvec + _Capacity;
; 1341 : 			this->_Mylast = _Newvec + _Count;
; 1342 : 			this->_Myfirst = _Newvec;
; 1343 : 			}
; 1344 : 		else
; 1345 : 			{	// new stuff fits, append and rotate into place
; 1346 : 			_Ucopy(_First, _Last, this->_Mylast);
; 1347 : 			_STD rotate(_VIPTR(_Where), this->_Mylast,
; 1348 : 				this->_Mylast + _Count);
; 1349 : 			this->_Mylast += _Count;
; 1350 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1351 : 			}
; 1352 : 		}
; 1353 : 
; 1354 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1355 : 	iterator erase(const_iterator _Where)
; 1356 : 		{	// erase element at where
; 1357 : 		if (_VICONT(_Where) != this
; 1358 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1359 : 			|| this->_Mylast <= _VIPTR(_Where))
; 1360 : 			_DEBUG_ERROR("vector erase iterator outside range");
; 1361 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast, _VIPTR(_Where));
; 1362 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1363 : 		_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1364 : 		--this->_Mylast;
; 1365 : 		return (_Make_iter(_Where));
; 1366 : 		}
; 1367 : 
; 1368 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1369 : 	iterator erase(const_iterator _Where)
; 1370 : 		{	// erase element at where
; 1371 : 		_Move(_VIPTR(_Where) + 1, this->_Mylast,
; 1372 : 			_VIPTR(_Where));
; 1373 : 		_Destroy(this->_Mylast - 1, this->_Mylast);
; 1374 : 		--this->_Mylast;
; 1375 : 		return (_Make_iter(_Where));
; 1376 : 		}
; 1377 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1378 : 
; 1379 : 	iterator erase(const_iterator _First_arg,
; 1380 : 		const_iterator _Last_arg)
; 1381 : 		{	// erase [_First, _Last)
; 1382 : 		if (_First_arg == begin() && _Last_arg == end())
; 1383 : 			clear();
; 1384 : 		else if (_First_arg != _Last_arg)
; 1385 : 			{	// clear partial
; 1386 : 			iterator _First = _Make_iter(_First_arg);
; 1387 : 			iterator _Last = _Make_iter(_Last_arg);
; 1388 : 
; 1389 : 			if (_First != _Last)
; 1390 : 				{	// worth doing, copy down over hole
; 1391 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1392 : 				if (_Last < _First || _VICONT(_First) != this
; 1393 : 					|| _VIPTR(_First) < this->_Myfirst
; 1394 : 					|| this->_Mylast < _VIPTR(_Last))
; 1395 : 					_DEBUG_ERROR("vector erase iterator outside range");
; 1396 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1397 : 					_VIPTR(_First));
; 1398 : 				_Orphan_range(_VIPTR(_First), this->_Mylast);
; 1399 : 
; 1400 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1401 : 				pointer _Ptr = _Move(_VIPTR(_Last), this->_Mylast,
; 1402 : 					_VIPTR(_First));
; 1403 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1404 : 
; 1405 : 				_Destroy(_Ptr, this->_Mylast);
; 1406 : 				this->_Mylast = _Ptr;
; 1407 : 				}
; 1408 : 			}
; 1409 : 		return (_Make_iter(_First_arg));
; 1410 : 		}
; 1411 : 
; 1412 : 	void clear() _NOEXCEPT
; 1413 : 		{	// erase all
; 1414 : 		this->_Orphan_all();
; 1415 : 		_Destroy(this->_Myfirst, this->_Mylast);
; 1416 : 		this->_Mylast = this->_Myfirst;
; 1417 : 		}
; 1418 : 
; 1419 : 	void swap(_Myt& _Right)
; 1420 : 		{	// exchange contents with _Right
; 1421 : 		if (this == &_Right)
; 1422 : 			;	// same object, do nothing
; 1423 : 		else if (this->_Getal() == _Right._Getal())
; 1424 : 			{	// same allocator, swap control information
; 1425 : 			this->_Swap_all(_Right);
; 1426 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1427 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1428 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1429 : 			}
; 1430 : 
; 1431 :  #if _HAS_CPP0X
; 1432 : 		else if (_Alty::propagate_on_container_swap::value)
; 1433 : 			{	// swap allocators and control information
; 1434 : 			this->_Swap_alloc(_Right);
; 1435 : 			_Swap_adl(this->_Myfirst, _Right._Myfirst);
; 1436 : 			_Swap_adl(this->_Mylast, _Right._Mylast);
; 1437 : 			_Swap_adl(this->_Myend, _Right._Myend);
; 1438 : 			}
; 1439 :  #endif /* _HAS_CPP0X */
; 1440 : 
; 1441 : 		else
; 1442 : 			{	// different allocator, do multiple moves
; 1443 : 			_Myt _Ts = _Move(*this);
; 1444 : 
; 1445 : 			*this = _Move(_Right);
; 1446 : 			_Right = _Move(_Ts);
; 1447 : 			}
; 1448 : 		}
; 1449 : 
; 1450 : protected:
; 1451 : 	void _Assign_n(size_type _Count, const value_type& _Val)
; 1452 : 		{	// assign _Count * _Val
; 1453 : 		value_type _Tmp = _Val;	// in case _Val is in sequence
; 1454 : 		erase(begin(), end());
; 1455 : 		insert(begin(), _Count, _Tmp);
; 1456 : 		}
; 1457 : 
; 1458 : 	bool _Buy(size_type _Capacity)
; 1459 : 		{	// allocate array with _Capacity elements
; 1460 : 		this->_Myfirst = pointer();
; 1461 : 		this->_Mylast = pointer();
; 1462 : 		this->_Myend = pointer();
; 1463 : 
; 1464 : 		if (_Capacity == 0)
; 1465 : 			return (false);
; 1466 : 		else if (max_size() < _Capacity)
; 1467 : 			_Xlen();	// result too long
; 1468 : 		else
; 1469 : 			{	// nonempty array, allocate storage
; 1470 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);
; 1471 : 			this->_Mylast = this->_Myfirst;
; 1472 : 			this->_Myend = this->_Myfirst + _Capacity;
; 1473 : 			}
; 1474 : 		return (true);
; 1475 : 		}
; 1476 : 
; 1477 : 	void _Destroy(pointer _First, pointer _Last)
; 1478 : 		{	// destroy [_First, _Last) using allocator
; 1479 : 		_Alty _Alval(this->_Getal());
; 1480 : 		_Destroy_range(_First, _Last, _Alval);
; 1481 : 		}
; 1482 : 
; 1483 : 	size_type _Grow_to(size_type _Count) const
; 1484 : 		{	// grow by 50% or at least to _Count
; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  000a8	48 03 d0	 add	 rdx, rax

; 1489 : 		if (_Capacity < _Count)

  000ab	49 3b d0	 cmp	 rdx, r8
  000ae	49 0f 42 d0	 cmovb	 rdx, r8

; 1531 : 			}
; 1532 : 		}

  000b2	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b6	5b		 pop	 rbx

; 1529 : 				_Xlen();
; 1530 : 			_Reallocate(_Grow_to(size() + _Count));

  000b7	e9 00 00 00 00	 jmp	 ?_Reallocate@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reallocate
$LN2@Reserve:

; 1531 : 			}
; 1532 : 		}

  000bc	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c0	5b		 pop	 rbx
  000c1	c3		 ret	 0
$LN42@Reserve:

; 1533 : 
; 1534 : 	void _Tidy()
; 1535 : 		{	// free all storage
; 1536 : 		if (this->_Myfirst != pointer())
; 1537 : 			{	// something to free, destroy and deallocate it
; 1538 : 			this->_Orphan_all();
; 1539 : 			_Destroy(this->_Myfirst, this->_Mylast);
; 1540 : 			this->_Getal().deallocate(this->_Myfirst,
; 1541 : 				this->_Myend - this->_Myfirst);
; 1542 : 			this->_Myfirst = pointer();
; 1543 : 			this->_Mylast = pointer();
; 1544 : 			this->_Myend = pointer();
; 1545 : 			}
; 1546 : 		}
; 1547 : 
; 1548 : 	template<class _Iter>
; 1549 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
; 1550 : 		{	// copy initializing [_First, _Last), using allocator
; 1551 : 		_Alty _Alval(this->_Getal());
; 1552 : 		return (_Uninitialized_copy(_First, _Last,
; 1553 : 			_Ptr, _Alval));
; 1554 : 		}
; 1555 : 
; 1556 : 	template<class _Iter>
; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
; 1558 : 		{	// move initializing [_First, _Last), using allocator
; 1559 : 		_Alty _Alval(this->_Getal());
; 1560 : 		return (_Uninitialized_move(_First, _Last,
; 1561 : 			_Ptr, _Alval));
; 1562 : 		}
; 1563 : 
; 1564 : 	iterator _Insert_n(const_iterator _Where,
; 1565 : 		size_type _Count, const value_type& _Val)
; 1566 : 		{	// insert _Count * _Val at _Where
; 1567 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1568 : 		if (_VICONT(_Where) != this
; 1569 : 			|| _VIPTR(_Where) < this->_Myfirst
; 1570 : 			|| this->_Mylast < _VIPTR(_Where))
; 1571 : 			_DEBUG_ERROR("vector insert iterator outside range");
; 1572 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1573 : 
; 1574 : 		size_type _Off = _VIPTR(_Where) - this->_Myfirst;
; 1575 : 		if (_Count == 0)
; 1576 : 			;
; 1577 : 		else if (_Unused_capacity() < _Count)
; 1578 : 			{	// not enough room, reallocate
; 1579 : 			if (max_size() - size() < _Count)
; 1580 : 				_Xlen();	// result too long
; 1581 : 
; 1582 : 			size_type _Capacity = _Grow_to(size() + _Count);
; 1583 : 			pointer _Newvec = this->_Getal().allocate(_Capacity);
; 1584 : 			size_type _Whereoff = _VIPTR(_Where) - this->_Myfirst;
; 1585 : 			int _Ncopied = 0;
; 1586 : 
; 1587 : 			_TRY_BEGIN
; 1588 : 			_Ufill(_Newvec + _Whereoff, _Count,
; 1589 : 				_STD addressof(_Val));	// add new stuff
; 1590 : 			++_Ncopied;
; 1591 : 			_Umove(this->_Myfirst, _VIPTR(_Where),
; 1592 : 				_Newvec);	// copy prefix
; 1593 : 			++_Ncopied;
; 1594 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1595 : 				_Newvec + (_Whereoff + _Count));	// copy suffix
; 1596 : 			_CATCH_ALL
; 1597 : 			if (1 < _Ncopied)
; 1598 : 				_Destroy(_Newvec, _Newvec + _Whereoff);
; 1599 : 			if (0 < _Ncopied)
; 1600 : 				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
; 1601 : 			this->_Getal().deallocate(_Newvec, _Capacity);
; 1602 : 			_RERAISE;
; 1603 : 			_CATCH_END
; 1604 : 
; 1605 : 			_Count += size();
; 1606 : 			if (this->_Myfirst != pointer())
; 1607 : 				{	// destroy and deallocate old array
; 1608 : 				_Destroy(this->_Myfirst, this->_Mylast);
; 1609 : 				this->_Getal().deallocate(this->_Myfirst,
; 1610 : 					this->_Myend - this->_Myfirst);
; 1611 : 				}
; 1612 : 
; 1613 : 			this->_Orphan_all();
; 1614 : 			this->_Myend = _Newvec + _Capacity;
; 1615 : 			this->_Mylast = _Newvec + _Count;
; 1616 : 			this->_Myfirst = _Newvec;
; 1617 : 			}
; 1618 : 		else if ((size_type)(this->_Mylast - _VIPTR(_Where))
; 1619 : 			< _Count)
; 1620 : 			{	// new stuff spills off end
; 1621 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1622 : 
; 1623 : 			_Umove(_VIPTR(_Where), this->_Mylast,
; 1624 : 				_VIPTR(_Where) + _Count);	// copy suffix
; 1625 : 
; 1626 : 			_TRY_BEGIN
; 1627 : 			_Ufill(this->_Mylast,
; 1628 : 				_Count - (this->_Mylast - _VIPTR(_Where)),
; 1629 : 				_STD addressof(_Tmp));	// insert new stuff off end
; 1630 : 			_CATCH_ALL
; 1631 : 			_Destroy(_VIPTR(_Where) + _Count,
; 1632 : 				this->_Mylast + _Count);
; 1633 : 			_RERAISE;
; 1634 : 			_CATCH_END
; 1635 : 
; 1636 : 			this->_Mylast += _Count;
; 1637 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1638 : 			_STD fill(_VIPTR(_Where), this->_Mylast - _Count,
; 1639 : 				_Tmp);	// insert up to old end
; 1640 : 			}
; 1641 : 		else
; 1642 : 			{	// new stuff can all be assigned
; 1643 : 			value_type _Tmp = _Val;	// in case _Val is in sequence
; 1644 : 
; 1645 : 			pointer _Oldend = this->_Mylast;
; 1646 : 			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
; 1647 : 				this->_Mylast);	// copy suffix
; 1648 : 
; 1649 : 			_Orphan_range(_VIPTR(_Where), this->_Mylast);
; 1650 : 			_Copy_backward(_VIPTR(_Where), _Oldend - _Count,
; 1651 : 				_Oldend);	// copy hole
; 1652 : 			_STD fill(_VIPTR(_Where),
; 1653 : 				_VIPTR(_Where) + _Count, _Tmp);	// insert into hole
; 1654 : 			}
; 1655 : 		return (begin() + _Off);
; 1656 : 		}
; 1657 : 
; 1658 : 	pointer _Ufill(pointer _Ptr, size_type _Count, const value_type *_Pval)
; 1659 : 		{	// copy initializing _Count * _Val, using allocator
; 1660 : 		_Alty _Alval(this->_Getal());
; 1661 : 		_Uninitialized_fill_n(_Ptr, _Count, _Pval, _Alval);
; 1662 : 		return (_Ptr + _Count);
; 1663 : 		}
; 1664 : 
; 1665 : 	__declspec(noreturn) void _Xlen() const
; 1666 : 		{	// report a length_error
; 1667 : 		_Xlength_error("vector<T> too long");

  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  000c9	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
  000ce	cc		 int	 3
$LN41@Reserve:
?_Reserve@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAX_K@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Tidy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAXXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Tidy, COMDAT

; 1535 : 		{	// free all storage

$LN13:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 1536 : 		if (this->_Myfirst != pointer())

  00009	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0000c	48 85 c9	 test	 rcx, rcx
  0000f	74 12		 je	 SHORT $LN1@Tidy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00011	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1542 : 			this->_Myfirst = pointer();

  00016	33 c0		 xor	 eax, eax
  00018	48 89 03	 mov	 QWORD PTR [rbx], rax

; 1543 : 			this->_Mylast = pointer();

  0001b	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 1544 : 			this->_Myend = pointer();

  0001f	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
$LN1@Tidy:

; 1545 : 			}
; 1546 : 		}

  00023	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00027	5b		 pop	 rbx
  00028	c3		 ret	 0
?_Tidy@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAXXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBAXXZ
_TEXT	SEGMENT
this$dead$ = 48
?_Xlen@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBAXXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Xlen, COMDAT

; 1666 : 		{	// report a length_error

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1667 : 		_Xlength_error("vector<T> too long");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0000b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
  00010	cc		 int	 3
$LN3@Xlen:
?_Xlen@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBAXXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBAXPEAVVertexUVRGBA@gfxu@@0@Z
_TEXT	SEGMENT
this$dead$ = 8
__formal$dead$ = 16
__formal$dead$ = 24
?_Orphan_range@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBAXPEAVVertexUVRGBA@gfxu@@0@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Orphan_range, COMDAT

; 1694 : 		}

  00000	c2 00 00	 ret	 0
?_Orphan_range@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBAXPEAVVertexUVRGBA@gfxu@@0@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAA@XZ PROC	; std::allocator<gfxu::VertexUVRGBA>::allocator<gfxu::VertexUVRGBA>, COMDAT

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAA@XZ ENDP	; std::allocator<gfxu::VertexUVRGBA>::allocator<gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QEAA@AEBV?$allocator@VVertexUVRGBA@gfxu@@@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QEAA@AEBV?$allocator@VVertexUVRGBA@gfxu@@@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >, COMDAT

; 486  : 		_Myfirst = pointer();

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax

; 487  : 		_Mylast = pointer();

  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 488  : 		_Myend = pointer();

  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 594  : 		{	// construct allocator from _Al
; 595  : 		}

  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QEAA@AEBV?$allocator@VVertexUVRGBA@gfxu@@@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QEBA?AU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@2@XZ
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QEBA?AU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >::_Getal, COMDAT

; 647  : 		return (_Alty());

  00000	48 8b c2	 mov	 rax, rdx

; 648  : 		}

  00003	c3		 ret	 0
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@QEBA?AU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\wchar.h
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring
;	COMDAT ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX$$QEAV12@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX$$QEAV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv, COMDAT

; 948  : 		{	// assign by moving _Right

$LN62:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 949  : 		if (_Right._Myres < this->_BUF_SIZE)

  0000f	33 f6		 xor	 esi, esi
  00011	48 83 7a 18 08	 cmp	 QWORD PTR [rdx+24], 8
  00016	48 8b da	 mov	 rbx, rdx
  00019	48 8b f9	 mov	 rdi, rcx
  0001c	73 13		 jae	 SHORT $LN2@Assign_rv

; 950  : 			_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
; 951  : 				_Right._Mysize + 1);

  0001e	4c 8b 42 10	 mov	 r8, QWORD PTR [rdx+16]
  00022	49 ff c0	 inc	 r8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 336  : 			: (_Elem *)_CSTD wmemmove(_First1, _First2, _Count));

  00025	74 18		 je	 SHORT $LN1@Assign_rv
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\wchar.h

; 1267 :             return (wchar_t *)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00027	4d 03 c0	 add	 r8, r8
  0002a	e8 00 00 00 00	 call	 memmove
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 952  : 		else

  0002f	eb 0e		 jmp	 SHORT $LN1@Assign_rv
$LN2@Assign_rv:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00031	48 85 c9	 test	 rcx, rcx
  00034	74 06		 je	 SHORT $LN23@Assign_rv
  00036	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00039	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN23@Assign_rv:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 955  : 			_Right._Bx._Ptr = pointer();

  0003c	48 89 32	 mov	 QWORD PTR [rdx], rsi
$LN1@Assign_rv:

; 956  : 			}
; 957  : 		this->_Mysize = _Right._Mysize;

  0003f	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00043	48 89 47 10	 mov	 QWORD PTR [rdi+16], rax

; 958  : 		this->_Myres = _Right._Myres;

  00047	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  0004b	48 89 47 18	 mov	 QWORD PTR [rdi+24], rax

; 961  : 
; 962  : 	~basic_string() _NOEXCEPT
; 963  : 		{	// destroy the string
; 964  : 		_Tidy(true);
; 965  : 		}
; 966  : 
; 967  : 	_PGLOBAL static const size_type npos;	// bad/missing length/position
; 968  : 
; 969  : 	_Myt& operator=(const _Myt& _Right)
; 970  : 		{	// assign _Right
; 971  : 		if (this != &_Right)
; 972  : 			{	// different, assign it
; 973  :  #if _HAS_CPP0X
; 974  : 			if (this->_Getal() != _Right._Getal()
; 975  : 				&& _Alty::propagate_on_container_copy_assignment::value)
; 976  : 				{	// change allocator before copying
; 977  : 				_Tidy(true);
; 978  : 				this->_Change_alloc(_Right._Getal());
; 979  : 				}
; 980  :  #endif /* _HAS_CPP0X */
; 981  : 
; 982  : 			assign(_Right);
; 983  : 			}
; 984  : 		return (*this);
; 985  : 		}
; 986  : 
; 987  : 	_Myt& operator=(const _Elem *_Ptr)
; 988  : 		{	// assign [_Ptr, <null>)
; 989  : 		return (assign(_Ptr));
; 990  : 		}
; 991  : 
; 992  : 	_Myt& operator=(_Elem _Ch)
; 993  : 		{	// assign 1 * _Ch
; 994  : 		return (assign(1, _Ch));
; 995  : 		}
; 996  : 
; 997  : 	_Myt& operator+=(const _Myt& _Right)
; 998  : 		{	// append _Right
; 999  : 		return (append(_Right));
; 1000 : 		}
; 1001 : 
; 1002 : 	_Myt& operator+=(const _Elem *_Ptr)
; 1003 : 		{	// append [_Ptr, <null>)
; 1004 : 		return (append(_Ptr));
; 1005 : 		}
; 1006 : 
; 1007 : 	_Myt& operator+=(_Elem _Ch)
; 1008 : 		{	// append 1 * _Ch
; 1009 : 		return (append((size_type)1, _Ch));
; 1010 : 		}
; 1011 : 
; 1012 : 	_Myt& append(const _Myt& _Right)
; 1013 : 		{	// append _Right
; 1014 : 		return (append(_Right, 0, npos));
; 1015 : 		}
; 1016 : 
; 1017 : 	_Myt& append(const _Myt& _Right,
; 1018 : 		size_type _Roff, size_type _Count)
; 1019 : 		{	// append _Right [_Roff, _Roff + _Count)
; 1020 : 		if (_Right.size() < _Roff)
; 1021 : 			_Xran();	// _Roff off end
; 1022 : 		size_type _Num = _Right.size() - _Roff;
; 1023 : 		if (_Num < _Count)
; 1024 : 			_Count = _Num;	// trim _Count to size
; 1025 : 		if (npos - this->_Mysize <= _Count)
; 1026 : 			_Xlen();	// result too long
; 1027 : 
; 1028 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1029 : 			{	// make room and append new stuff
; 1030 : 			_Traits::copy(this->_Myptr() + this->_Mysize,
; 1031 : 				_Right._Myptr() + _Roff, _Count);
; 1032 : 			_Eos(_Num);
; 1033 : 			}
; 1034 : 		return (*this);
; 1035 : 		}
; 1036 : 
; 1037 : 	_Myt& append(const _Elem *_Ptr, size_type _Count)
; 1038 : 		{	// append [_Ptr, _Ptr + _Count)
; 1039 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1040 : 		if (_Count != 0)
; 1041 : 			_DEBUG_POINTER(_Ptr);
; 1042 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1043 : 
; 1044 : 		if (_Inside(_Ptr))
; 1045 : 			return (append(*this,
; 1046 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1047 : 		if (npos - this->_Mysize <= _Count)
; 1048 : 			_Xlen();	// result too long
; 1049 : 
; 1050 : 		size_type _Num;
; 1051 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1052 : 			{	// make room and append new stuff
; 1053 : 			_Traits::copy(this->_Myptr() + this->_Mysize, _Ptr, _Count);
; 1054 : 			_Eos(_Num);
; 1055 : 			}
; 1056 : 		return (*this);
; 1057 : 		}
; 1058 : 
; 1059 : 	_Myt& append(const _Elem *_Ptr)
; 1060 : 		{	// append [_Ptr, <null>)
; 1061 : 		_DEBUG_POINTER(_Ptr);
; 1062 : 		return (append(_Ptr, _Traits::length(_Ptr)));
; 1063 : 		}
; 1064 : 
; 1065 : 	_Myt& append(size_type _Count, _Elem _Ch)
; 1066 : 		{	// append _Count * _Ch
; 1067 : 		if (npos - this->_Mysize <= _Count)
; 1068 : 			_Xlen();	// result too long
; 1069 : 
; 1070 : 		size_type _Num;
; 1071 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1072 : 			{	// make room and append new stuff using assign
; 1073 : 			_Chassign(this->_Mysize, _Count, _Ch);
; 1074 : 			_Eos(_Num);
; 1075 : 			}
; 1076 : 		return (*this);
; 1077 : 		}
; 1078 : 
; 1079 : 	template<class _Iter>
; 1080 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1081 : 			_Myt&>::type
; 1082 : 		append(_Iter _First, _Iter _Last)
; 1083 : 		{	// append [_First, _Last), input iterators
; 1084 : 		return (replace(end(), end(), _First, _Last));
; 1085 : 		}
; 1086 : 
; 1087 : 	_Myt& append(const_pointer _First, const_pointer _Last)
; 1088 : 		{	// append [_First, _Last), const pointers
; 1089 : 		return (replace(end(), end(), _First, _Last));
; 1090 : 		}
; 1091 : 
; 1092 : 	_Myt& append(const_iterator _First, const_iterator _Last)
; 1093 : 		{	// append [_First, _Last), const_iterators
; 1094 : 		return (replace(end(), end(), _First, _Last));
; 1095 : 		}
; 1096 : 
; 1097 : 	_Myt& assign(const _Myt& _Right)
; 1098 : 		{	// assign _Right
; 1099 : 		return (assign(_Right, 0, npos));
; 1100 : 		}
; 1101 : 
; 1102 : 	_Myt& assign(const _Myt& _Right,
; 1103 : 		size_type _Roff, size_type _Count)
; 1104 : 		{	// assign _Right [_Roff, _Roff + _Count)
; 1105 : 		if (_Right.size() < _Roff)
; 1106 : 			_Xran();	// _Roff off end
; 1107 : 		size_type _Num = _Right.size() - _Roff;
; 1108 : 		if (_Count < _Num)
; 1109 : 			_Num = _Count;	// trim _Num to size
; 1110 : 
; 1111 : 		if (this == &_Right)
; 1112 : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring
; 1113 : 		else if (_Grow(_Num))
; 1114 : 			{	// make room and assign new stuff
; 1115 : 			_Traits::copy(this->_Myptr(),
; 1116 : 				_Right._Myptr() + _Roff, _Num);
; 1117 : 			_Eos(_Num);
; 1118 : 			}
; 1119 : 		return (*this);
; 1120 : 		}
; 1121 : 
; 1122 : 	_Myt& assign(const _Elem *_Ptr, size_type _Count)
; 1123 : 		{	// assign [_Ptr, _Ptr + _Count)
; 1124 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1125 : 		if (_Count != 0)
; 1126 : 			_DEBUG_POINTER(_Ptr);
; 1127 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1128 : 
; 1129 : 		if (_Inside(_Ptr))
; 1130 : 			return (assign(*this,
; 1131 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1132 : 
; 1133 : 		if (_Grow(_Count))
; 1134 : 			{	// make room and assign new stuff
; 1135 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);
; 1136 : 			_Eos(_Count);
; 1137 : 			}
; 1138 : 		return (*this);
; 1139 : 		}
; 1140 : 
; 1141 : 	_Myt& assign(const _Elem *_Ptr)
; 1142 : 		{	// assign [_Ptr, <null>)
; 1143 : 		_DEBUG_POINTER(_Ptr);
; 1144 : 		return (assign(_Ptr, _Traits::length(_Ptr)));
; 1145 : 		}
; 1146 : 
; 1147 : 	_Myt& assign(size_type _Count, _Elem _Ch)
; 1148 : 		{	// assign _Count * _Ch
; 1149 : 		if (_Count == npos)
; 1150 : 			_Xlen();	// result too long
; 1151 : 
; 1152 : 		if (_Grow(_Count))
; 1153 : 			{	// make room and assign new stuff
; 1154 : 			_Chassign(0, _Count, _Ch);
; 1155 : 			_Eos(_Count);
; 1156 : 			}
; 1157 : 		return (*this);
; 1158 : 		}
; 1159 : 
; 1160 : 	template<class _Iter>
; 1161 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1162 : 			_Myt&>::type
; 1163 : 		assign(_Iter _First, _Iter _Last)
; 1164 : 		{	// assign [First, _Last), input iterators
; 1165 : 		return (replace(begin(), end(), _First, _Last));
; 1166 : 		}
; 1167 : 
; 1168 : 	_Myt& assign(const_pointer _First, const_pointer _Last)
; 1169 : 		{	// assign [First, _Last), const pointers
; 1170 : 		return (replace(begin(), end(), _First, _Last));
; 1171 : 		}
; 1172 : 
; 1173 : 	_Myt& assign(const_iterator _First, const_iterator _Last)
; 1174 : 		{	// assign [First, _Last), const_iterators
; 1175 : 		return (replace(begin(), end(), _First, _Last));
; 1176 : 		}
; 1177 : 
; 1178 : 	_Myt& insert(size_type _Off, const _Myt& _Right)
; 1179 : 		{	// insert _Right at _Off
; 1180 : 		return (insert(_Off, _Right, 0, npos));
; 1181 : 		}
; 1182 : 
; 1183 : 	_Myt& insert(size_type _Off,
; 1184 : 		const _Myt& _Right, size_type _Roff, size_type _Count)
; 1185 : 		{	// insert _Right [_Roff, _Roff + _Count) at _Off
; 1186 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1187 : 			_Xran();	// _Off or _Roff off end
; 1188 : 		size_type _Num = _Right.size() - _Roff;
; 1189 : 		if (_Num < _Count)
; 1190 : 			_Count = _Num;	// trim _Count to size
; 1191 : 		if (npos - this->_Mysize <= _Count)
; 1192 : 			_Xlen();	// result too long
; 1193 : 
; 1194 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1195 : 			{	// make room and insert new stuff
; 1196 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1197 : 				this->_Myptr() + _Off,
; 1198 : 				this->_Mysize - _Off);	// empty out hole
; 1199 : 			if (this == &_Right)
; 1200 : 				_Traits::move(this->_Myptr() + _Off,
; 1201 : 					this->_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
; 1202 : 						_Count);	// substring
; 1203 : 			else
; 1204 : 				_Traits::copy(this->_Myptr() + _Off,
; 1205 : 					_Right._Myptr() + _Roff, _Count);	// fill hole
; 1206 : 			_Eos(_Num);
; 1207 : 			}
; 1208 : 		return (*this);
; 1209 : 		}
; 1210 : 
; 1211 : 	_Myt& insert(size_type _Off,
; 1212 : 		const _Elem *_Ptr, size_type _Count)
; 1213 : 		{	// insert [_Ptr, _Ptr + _Count) at _Off
; 1214 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1215 : 		if (_Count != 0)
; 1216 : 			_DEBUG_POINTER(_Ptr);
; 1217 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1218 : 
; 1219 : 		if (_Inside(_Ptr))
; 1220 : 			return (insert(_Off, *this,
; 1221 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1222 : 		if (this->_Mysize < _Off)
; 1223 : 			_Xran();	// _Off off end
; 1224 : 		if (npos - this->_Mysize <= _Count)
; 1225 : 			_Xlen();	// result too long
; 1226 : 		size_type _Num;
; 1227 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1228 : 			{	// make room and insert new stuff
; 1229 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1230 : 				this->_Myptr() + _Off,
; 1231 : 				this->_Mysize - _Off);	// empty out hole
; 1232 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1233 : 			_Eos(_Num);
; 1234 : 			}
; 1235 : 		return (*this);
; 1236 : 		}
; 1237 : 
; 1238 : 	_Myt& insert(size_type _Off, const _Elem *_Ptr)
; 1239 : 		{	// insert [_Ptr, <null>) at _Off
; 1240 : 		_DEBUG_POINTER(_Ptr);
; 1241 : 		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
; 1242 : 		}
; 1243 : 
; 1244 : 	_Myt& insert(size_type _Off,
; 1245 : 		size_type _Count, _Elem _Ch)
; 1246 : 		{	// insert _Count * _Ch at _Off
; 1247 : 		if (this->_Mysize < _Off)
; 1248 : 			_Xran();	// _Off off end
; 1249 : 		if (npos - this->_Mysize <= _Count)
; 1250 : 			_Xlen();	// result too long
; 1251 : 		size_type _Num;
; 1252 : 		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
; 1253 : 			{	// make room and insert new stuff
; 1254 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1255 : 				this->_Myptr() + _Off,
; 1256 : 				this->_Mysize - _Off);	// empty out hole
; 1257 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1258 : 			_Eos(_Num);
; 1259 : 			}
; 1260 : 		return (*this);
; 1261 : 		}
; 1262 : 
; 1263 : 	iterator insert(const_iterator _Where)
; 1264 : 		{	// insert <null> at _Where
; 1265 : 		return (insert(_Where, _Elem()));
; 1266 : 		}
; 1267 : 
; 1268 : 	iterator insert(const_iterator _Where, _Elem _Ch)
; 1269 : 		{	// insert _Ch at _Where
; 1270 : 		size_type _Off = _Pdif(_Where, begin());
; 1271 : 		insert(_Off, 1, _Ch);
; 1272 : 		return (begin() + _Off);
; 1273 : 		}
; 1274 : 
; 1275 : 	iterator insert(const_iterator _Where, size_type _Count, _Elem _Ch)
; 1276 : 		{	// insert _Count * _Elem at _Where
; 1277 : 		size_type _Off = _Pdif(_Where, begin());
; 1278 : 		insert(_Off, _Count, _Ch);
; 1279 : 		return (begin() + _Off);
; 1280 : 		}
; 1281 : 
; 1282 : 	template<class _Iter>
; 1283 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1284 : 			iterator>::type
; 1285 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1286 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1287 : 		size_type _Off = _Pdif(_Where, begin());
; 1288 : 		replace(_Where, _Where, _First, _Last);
; 1289 : 		return (begin() + _Off);
; 1290 : 		}
; 1291 : 
; 1292 : 	iterator insert(const_iterator _Where,
; 1293 : 		const_pointer _First, const_pointer _Last)
; 1294 : 		{	// insert [_First, _Last) at _Where, const pointers
; 1295 : 		size_type _Off = _Pdif(_Where, begin());
; 1296 : 		replace(_Where, _Where, _First, _Last);
; 1297 : 		return (begin() + _Off);
; 1298 : 		}
; 1299 : 
; 1300 : 	iterator insert(const_iterator _Where,
; 1301 : 		const_iterator _First, const_iterator _Last)
; 1302 : 		{	// insert [_First, _Last) at _Where, const_iterators
; 1303 : 		size_type _Off = _Pdif(_Where, begin());
; 1304 : 		replace(_Where, _Where, _First, _Last);
; 1305 : 		return (begin() + _Off);
; 1306 : 		}
; 1307 : 
; 1308 : 	_Myt& erase(size_type _Off = 0)
; 1309 : 		{	// erase elements [_Off, ...)
; 1310 : 		if (this->_Mysize < _Off)
; 1311 : 			_Xran();	// _Off off end
; 1312 : 		_Eos(_Off);
; 1313 : 		return (*this);
; 1314 : 		}
; 1315 : 
; 1316 : 	_Myt& erase(size_type _Off, size_type _Count)
; 1317 : 		{	// erase elements [_Off, _Off + _Count)
; 1318 : 		if (this->_Mysize < _Off)
; 1319 : 			_Xran();	// _Off off end
; 1320 : 		if (this->_Mysize - _Off <= _Count)
; 1321 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 1322 : 		else if (0 < _Count)
; 1323 : 			{	// move elements down
; 1324 : 			value_type *_Ptr = this->_Myptr() + _Off;
; 1325 : 			size_type _Newsize = this->_Mysize - _Count;
; 1326 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);
; 1327 : 			_Eos(_Newsize);
; 1328 : 			}
; 1329 : 		return (*this);
; 1330 : 		}
; 1331 : 
; 1332 : 	iterator erase(const_iterator _Where)
; 1333 : 		{	// erase element at _Where
; 1334 : 		size_type _Count = _Pdif(_Where, begin());
; 1335 : 		erase(_Count, 1);
; 1336 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1337 : 		}
; 1338 : 
; 1339 : 	iterator erase(const_iterator _First, const_iterator _Last)
; 1340 : 		{	// erase substring [_First, _Last)
; 1341 : 		_DEBUG_RANGE(_First, _Last);
; 1342 : 		size_type _Count = _Pdif(_First, begin());
; 1343 : 		erase(_Count, _Pdif(_Last, _First));
; 1344 : 		return (_STRING_ITERATOR(this->_Myptr() + _Count));
; 1345 : 		}
; 1346 : 
; 1347 : 	void clear() _NOEXCEPT
; 1348 : 		{	// erase all
; 1349 : 		_Eos(0);
; 1350 : 		}
; 1351 : 
; 1352 : 	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
; 1353 : 		{	// replace [_Off, _Off + _N0) with _Right
; 1354 : 		return (replace(_Off, _N0, _Right, 0, npos));
; 1355 : 		}
; 1356 : 
; 1357 : 	_Myt& replace(size_type _Off,
; 1358 : 		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
; 1359 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 1360 : 		if (this->_Mysize < _Off || _Right.size() < _Roff)
; 1361 : 			_Xran();	// _Off or _Roff off end
; 1362 : 		if (this->_Mysize - _Off < _N0)
; 1363 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1364 : 		size_type _Num = _Right.size() - _Roff;
; 1365 : 		if (_Num < _Count)
; 1366 : 			_Count = _Num;	// trim _Count to size
; 1367 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1368 : 			_Xlen();	// result too long
; 1369 : 
; 1370 : 		size_type _Nm = this->_Mysize - _N0 - _Off;	// length of kept tail
; 1371 : 		size_type _Newsize = this->_Mysize + _Count - _N0;
; 1372 : 		if (this->_Mysize < _Newsize)
; 1373 : 			_Grow(_Newsize);
; 1374 : 
; 1375 : 		if (this != &_Right)
; 1376 : 			{	// no overlap, just move down and copy in new stuff
; 1377 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1378 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1379 : 			_Traits::copy(this->_Myptr() + _Off,
; 1380 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1381 : 			}
; 1382 : 		else if (_Count <= _N0)
; 1383 : 			{	// hole doesn't get larger, just copy in substring
; 1384 : 			_Traits::move(this->_Myptr() + _Off,
; 1385 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1386 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1387 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1388 : 			}
; 1389 : 		else if (_Roff <= _Off)
; 1390 : 			{	// hole gets larger, substring begins before hole
; 1391 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1392 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1393 : 			_Traits::move(this->_Myptr() + _Off,
; 1394 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1395 : 			}
; 1396 : 		else if (_Off + _N0 <= _Roff)
; 1397 : 			{	// hole gets larger, substring begins after hole
; 1398 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1399 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1400 : 			_Traits::move(this->_Myptr() + _Off,
; 1401 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1402 : 				_Count);	// fill hole
; 1403 : 			}
; 1404 : 		else
; 1405 : 			{	// hole gets larger, substring begins in hole
; 1406 : 			_Traits::move(this->_Myptr() + _Off,
; 1407 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1408 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1409 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1410 : 			_Traits::move(this->_Myptr() + _Off + _N0,
; 1411 : 				this->_Myptr() + _Roff + _Count,
; 1412 : 				_Count - _N0);	// fill rest of new hole
; 1413 : 			}
; 1414 : 
; 1415 : 		_Eos(_Newsize);
; 1416 : 		return (*this);
; 1417 : 		}
; 1418 : 
; 1419 : 	_Myt& replace(size_type _Off,
; 1420 : 		size_type _N0, const _Elem *_Ptr, size_type _Count)
; 1421 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 1422 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1423 : 		if (_Count != 0)
; 1424 : 			_DEBUG_POINTER(_Ptr);
; 1425 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1426 : 
; 1427 : 		if (_Inside(_Ptr))
; 1428 : 			return (replace(_Off, _N0, *this,
; 1429 : 				_Ptr - this->_Myptr(),
; 1430 : 				_Count));	// substring, replace carefully
; 1431 : 		if (this->_Mysize < _Off)
; 1432 : 			_Xran();	// _Off off end
; 1433 : 		if (this->_Mysize - _Off < _N0)
; 1434 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1435 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1436 : 			_Xlen();	// result too long
; 1437 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1438 : 
; 1439 : 		if (_Count < _N0)
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1441 : 				this->_Myptr() + _Off + _N0,
; 1442 : 				_Nm);	// smaller hole, move tail up
; 1443 : 		size_type _Num;
; 1444 : 		if ((0 < _Count || 0 < _N0)
; 1445 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1446 : 			{	// make room and rearrange
; 1447 : 			if (_N0 < _Count)
; 1448 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1449 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1450 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole
; 1451 : 			_Eos(_Num);
; 1452 : 			}
; 1453 : 		return (*this);
; 1454 : 		}
; 1455 : 
; 1456 : 	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
; 1457 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, <null>)
; 1458 : 		_DEBUG_POINTER(_Ptr);
; 1459 : 		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 1460 : 		}
; 1461 : 
; 1462 : 	_Myt& replace(size_type _Off,
; 1463 : 		size_type _N0, size_type _Count, _Elem _Ch)
; 1464 : 		{	// replace [_Off, _Off + _N0) with _Count * _Ch
; 1465 : 		if (this->_Mysize < _Off)
; 1466 : 			_Xran();	// _Off off end
; 1467 : 		if (this->_Mysize - _Off < _N0)
; 1468 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 1469 : 		if (npos - _Count <= this->_Mysize - _N0)
; 1470 : 			_Xlen();	// result too long
; 1471 : 		size_type _Nm = this->_Mysize - _N0 - _Off;
; 1472 : 
; 1473 : 		if (_Count < _N0)
; 1474 : 			_Traits::move(this->_Myptr() + _Off + _Count,
; 1475 : 				this->_Myptr() + _Off + _N0,
; 1476 : 				_Nm);	// smaller hole, move tail up
; 1477 : 		size_type _Num;
; 1478 : 		if ((0 < _Count || 0 < _N0)
; 1479 : 			&& _Grow(_Num = this->_Mysize + _Count - _N0))
; 1480 : 			{	// make room and rearrange
; 1481 : 			if (_N0 < _Count)
; 1482 : 				_Traits::move(this->_Myptr() + _Off + _Count,
; 1483 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1484 : 			_Chassign(_Off, _Count, _Ch);	// fill hole
; 1485 : 			_Eos(_Num);
; 1486 : 			}
; 1487 : 		return (*this);
; 1488 : 		}
; 1489 : 
; 1490 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1491 : 		const _Myt& _Right)
; 1492 : 		{	// replace [_First, _Last) with _Right
; 1493 : 		return (replace(
; 1494 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
; 1495 : 		}
; 1496 : 
; 1497 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1498 : 		const _Elem *_Ptr, size_type _Count)
; 1499 : 		{	// replace [_First, _Last) with [_Ptr, _Ptr + _Count)
; 1500 : 		return (replace(
; 1501 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
; 1502 : 		}
; 1503 : 
; 1504 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1505 : 		const _Elem *_Ptr)
; 1506 : 		{	// replace [_First, _Last) with [_Ptr, <null>)
; 1507 : 		return (replace(
; 1508 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
; 1509 : 		}
; 1510 : 
; 1511 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1512 : 		size_type _Count, _Elem _Ch)
; 1513 : 		{	// replace [_First, _Last) with _Count * _Ch
; 1514 : 		return (replace(
; 1515 : 			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
; 1516 : 		}
; 1517 : 
; 1518 : 	template<class _Iter>
; 1519 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1520 : 			_Myt&>::type
; 1521 : 		replace(const_iterator _First, const_iterator _Last,
; 1522 : 			_Iter _First2, _Iter _Last2)
; 1523 : 		{	// replace [_First, _Last) with [_First2, _Last2), input iterators
; 1524 : 		_Myt _Right(_First2, _Last2);
; 1525 : 		replace(_First, _Last, _Right);
; 1526 : 		return (*this);
; 1527 : 		}
; 1528 : 
; 1529 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1530 : 		const_pointer _First2, const_pointer _Last2)
; 1531 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1532 : 		if (_First2 == _Last2)
; 1533 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1534 : 		else
; 1535 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1536 : 				&*_First2, _Last2 - _First2);
; 1537 : 		return (*this);
; 1538 : 		}
; 1539 : 
; 1540 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1541 : 		pointer _First2, pointer _Last2)
; 1542 : 		{	// replace [_First, _Last) with [_First2, _Last2), const pointers
; 1543 : 		if (_First2 == _Last2)
; 1544 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1545 : 		else
; 1546 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1547 : 				&*_First2, _Last2 - _First2);
; 1548 : 		return (*this);
; 1549 : 		}
; 1550 : 
; 1551 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1552 : 		const_iterator _First2, const_iterator _Last2)
; 1553 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1554 : 		if (_First2 == _Last2)
; 1555 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1556 : 		else
; 1557 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1558 : 				&*_First2, _Last2 - _First2);
; 1559 : 		return (*this);
; 1560 : 		}
; 1561 : 
; 1562 : 	_Myt& replace(const_iterator _First, const_iterator _Last,
; 1563 : 		iterator _First2, iterator _Last2)
; 1564 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators
; 1565 : 		if (_First2 == _Last2)
; 1566 : 			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
; 1567 : 		else
; 1568 : 			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
; 1569 : 				&*_First2, _Last2 - _First2);
; 1570 : 		return (*this);
; 1571 : 		}
; 1572 : 
; 1573 : 	iterator begin() _NOEXCEPT
; 1574 : 		{	// return iterator for beginning of mutable sequence
; 1575 : 		return (_STRING_ITERATOR(this->_Myptr()));
; 1576 : 		}
; 1577 : 
; 1578 : 	const_iterator begin() const _NOEXCEPT
; 1579 : 		{	// return iterator for beginning of nonmutable sequence
; 1580 : 		return (_STRING_CONST_ITERATOR(this->_Myptr()));
; 1581 : 		}
; 1582 : 
; 1583 : 	iterator end() _NOEXCEPT
; 1584 : 		{	// return iterator for end of mutable sequence
; 1585 : 		return (_STRING_ITERATOR(this->_Myptr() + this->_Mysize));
; 1586 : 		}
; 1587 : 
; 1588 : 	const_iterator end() const _NOEXCEPT
; 1589 : 		{	// return iterator for end of nonmutable sequence
; 1590 : 		return (_STRING_CONST_ITERATOR(this->_Myptr() + this->_Mysize));
; 1591 : 		}
; 1592 : 
; 1593 : 	reverse_iterator rbegin() _NOEXCEPT
; 1594 : 		{	// return iterator for beginning of reversed mutable sequence
; 1595 : 		return (reverse_iterator(end()));
; 1596 : 		}
; 1597 : 
; 1598 : 	const_reverse_iterator rbegin() const _NOEXCEPT
; 1599 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1600 : 		return (const_reverse_iterator(end()));
; 1601 : 		}
; 1602 : 
; 1603 : 	reverse_iterator rend() _NOEXCEPT
; 1604 : 		{	// return iterator for end of reversed mutable sequence
; 1605 : 		return (reverse_iterator(begin()));
; 1606 : 		}
; 1607 : 
; 1608 : 	const_reverse_iterator rend() const _NOEXCEPT
; 1609 : 		{	// return iterator for end of reversed nonmutable sequence
; 1610 : 		return (const_reverse_iterator(begin()));
; 1611 : 		}
; 1612 : 
; 1613 :  #if _HAS_CPP0X
; 1614 : 	const_iterator cbegin() const _NOEXCEPT
; 1615 : 		{	// return iterator for beginning of nonmutable sequence
; 1616 : 		return (((const _Myt *)this)->begin());
; 1617 : 		}
; 1618 : 
; 1619 : 	const_iterator cend() const _NOEXCEPT
; 1620 : 		{	// return iterator for end of nonmutable sequence
; 1621 : 		return (((const _Myt *)this)->end());
; 1622 : 		}
; 1623 : 
; 1624 : 	const_reverse_iterator crbegin() const _NOEXCEPT
; 1625 : 		{	// return iterator for beginning of reversed nonmutable sequence
; 1626 : 		return (((const _Myt *)this)->rbegin());
; 1627 : 		}
; 1628 : 
; 1629 : 	const_reverse_iterator crend() const _NOEXCEPT
; 1630 : 		{	// return iterator for end of reversed nonmutable sequence
; 1631 : 		return (((const _Myt *)this)->rend());
; 1632 : 		}
; 1633 : 
; 1634 : 	void shrink_to_fit()
; 1635 : 		{	// reduce capacity
; 1636 : 		if ((size() | this->_ALLOC_MASK) < capacity())
; 1637 : 			{	// worth shrinking, do it
; 1638 : 			_Myt _Tmp(*this);
; 1639 : 			swap(_Tmp);
; 1640 : 			}
; 1641 : 		}
; 1642 :  #endif /* _HAS_CPP0X */
; 1643 : 
; 1644 : 	reference at(size_type _Off)
; 1645 : 		{	// subscript mutable sequence with checking
; 1646 : 		if (this->_Mysize <= _Off)
; 1647 : 			_Xran();	// _Off off end
; 1648 : 		return (this->_Myptr()[_Off]);
; 1649 : 		}
; 1650 : 
; 1651 : 	const_reference at(size_type _Off) const
; 1652 : 		{	// subscript nonmutable sequence with checking
; 1653 : 		if (this->_Mysize <= _Off)
; 1654 : 			_Xran();	// _Off off end
; 1655 : 		return (this->_Myptr()[_Off]);
; 1656 : 		}
; 1657 : 
; 1658 : 	reference operator[](size_type _Off)
; 1659 : 		{	// subscript mutable sequence
; 1660 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1661 : 		if (this->_Mysize < _Off)	// sic
; 1662 : 			_DEBUG_ERROR("string subscript out of range");
; 1663 : 
; 1664 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1665 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1666 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1667 : 
; 1668 : 		return (this->_Myptr()[_Off]);
; 1669 : 		}
; 1670 : 
; 1671 : 	const_reference operator[](size_type _Off) const
; 1672 : 		{	// subscript nonmutable sequence
; 1673 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1674 : 		if (this->_Mysize < _Off)	// sic
; 1675 : 			_DEBUG_ERROR("string subscript out of range");
; 1676 : 
; 1677 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1678 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize);	// sic
; 1679 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1680 : 
; 1681 : 		return (this->_Myptr()[_Off]);
; 1682 : 		}
; 1683 : 
; 1684 : 	void push_back(_Elem _Ch)
; 1685 : 		{	// insert element at end
; 1686 : 		insert(end(), _Ch);
; 1687 : 		}
; 1688 : 
; 1689 :  #if _HAS_CPP0X
; 1690 : 	void pop_back()
; 1691 : 		{	// erase element at end
; 1692 : 		erase(this->_Mysize - 1);	// throws if _Mysize == 0
; 1693 : 		}
; 1694 : 
; 1695 : 	reference front()
; 1696 : 		{	// return first element of mutable sequence
; 1697 : 		return (*begin());
; 1698 : 		}
; 1699 : 
; 1700 : 	const_reference front() const
; 1701 : 		{	// return first element of nonmutable sequence
; 1702 : 		return (*begin());
; 1703 : 		}
; 1704 : 
; 1705 : 	reference back()
; 1706 : 		{	// return last element of mutable sequence
; 1707 : 		return (*(end() - 1));
; 1708 : 		}
; 1709 : 
; 1710 : 	const_reference back() const
; 1711 : 		{	// return last element of nonmutable sequence
; 1712 : 		return (*(end() - 1));
; 1713 : 		}
; 1714 :  #endif /* _HAS_CPP0X */
; 1715 : 
; 1716 : 	const _Elem *c_str() const _NOEXCEPT
; 1717 : 		{	// return pointer to null-terminated nonmutable array
; 1718 : 		return (this->_Myptr());
; 1719 : 		}
; 1720 : 
; 1721 : 	const _Elem *data() const _NOEXCEPT
; 1722 : 		{	// return pointer to nonmutable array
; 1723 : 		return (c_str());
; 1724 : 		}
; 1725 : 
; 1726 : 	size_type length() const _NOEXCEPT
; 1727 : 		{	// return length of sequence
; 1728 : 		return (this->_Mysize);
; 1729 : 		}
; 1730 : 
; 1731 : 	size_type size() const _NOEXCEPT
; 1732 : 		{	// return length of sequence
; 1733 : 		return (this->_Mysize);
; 1734 : 		}
; 1735 : 
; 1736 : 	size_type max_size() const _NOEXCEPT
; 1737 : 		{	// return maximum possible length of sequence
; 1738 : 		size_type _Num = this->_Getal().max_size();
; 1739 : 		return (_Num <= 1 ? 1 : _Num - 1);
; 1740 : 		}
; 1741 : 
; 1742 : 	void resize(size_type _Newsize)
; 1743 : 		{	// determine new length, padding with null elements as needed
; 1744 : 		resize(_Newsize, _Elem());
; 1745 : 		}
; 1746 : 
; 1747 : 	void resize(size_type _Newsize, _Elem _Ch)
; 1748 : 		{	// determine new length, padding with _Ch elements as needed
; 1749 : 		if (_Newsize <= this->_Mysize)
; 1750 : 			_Eos(_Newsize);
; 1751 : 		else
; 1752 : 			append(_Newsize - this->_Mysize, _Ch);
; 1753 : 		}
; 1754 : 
; 1755 : 	size_type capacity() const _NOEXCEPT
; 1756 : 		{	// return current length of allocated storage
; 1757 : 		return (this->_Myres);
; 1758 : 		}
; 1759 : 
; 1760 : 	void reserve(size_type _Newcap = 0)
; 1761 : 		{	// determine new minimum length of allocated storage
; 1762 : 		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
; 1763 : 			{	// change reservation
; 1764 : 			size_type _Size = this->_Mysize;
; 1765 : 			if (_Grow(_Newcap, true))
; 1766 : 				_Eos(_Size);
; 1767 : 			}
; 1768 : 		}
; 1769 : 
; 1770 : 	bool empty() const _NOEXCEPT
; 1771 : 		{	// test if sequence is empty
; 1772 : 		return (this->_Mysize == 0);
; 1773 : 		}
; 1774 : 
; 1775 : 	_SCL_INSECURE_DEPRECATE
; 1776 : 
; 1777 : 	size_type copy(_Elem *_Ptr,
; 1778 : 		size_type _Count, size_type _Off = 0) const
; 1779 : 		{	// copy [_Off, _Off + _Count) to [_Ptr, _Ptr + _Count)
; 1780 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1781 : 		if (_Count != 0)
; 1782 : 			_DEBUG_POINTER(_Ptr);
; 1783 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1784 : 
; 1785 : 		if (this->_Mysize < _Off)
; 1786 : 			_Xran();	// _Off off end
; 1787 : 		if (this->_Mysize - _Off < _Count)
; 1788 : 			_Count = this->_Mysize - _Off;
; 1789 : 		_Traits::copy(_Ptr, this->_Myptr() + _Off, _Count);
; 1790 : 		return (_Count);
; 1791 : 		}
; 1792 : 
; 1793 : 	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
; 1794 : 		size_type _Count, size_type _Off = 0) const
; 1795 : 		{	// copy [_Off, _Off + _Count) to [_Dest, _Dest + _Count)
; 1796 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1797 : 		if (_Count != 0)
; 1798 : 			_DEBUG_POINTER(_Dest);
; 1799 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1800 : 
; 1801 : 		if (this->_Mysize < _Off)
; 1802 : 			_Xran();	// _Off off end
; 1803 : 		if (this->_Mysize - _Off < _Count)
; 1804 : 			_Count = this->_Mysize - _Off;
; 1805 : 		_Traits::_Copy_s(_Dest, _Dest_size, this->_Myptr() + _Off, _Count);
; 1806 : 		return (_Count);
; 1807 : 		}
; 1808 : 
; 1809 : 	void _Swap_bx(_Myt& _Right)
; 1810 : 		{	// exchange _Bx with _Right._Bx
; 1811 : 		if (this->_BUF_SIZE <= this->_Myres)
; 1812 : 			if (this->_BUF_SIZE <= _Right._Myres)
; 1813 : 				_Swap_adl(this->_Bx._Ptr, _Right._Bx._Ptr);
; 1814 : 			else
; 1815 : 				{	// swap large with small
; 1816 : 				pointer _Ptr = this->_Bx._Ptr;
; 1817 : 				this->_Getal().destroy(&this->_Bx._Ptr);
; 1818 : 				_Traits::copy(this->_Bx._Buf,
; 1819 : 					_Right._Bx._Buf, _Right._Mysize + 1);
; 1820 : 				this->_Getal().construct(&_Right._Bx._Ptr, _Ptr);
; 1821 : 				}
; 1822 : 		else
; 1823 : 			if (_Right._Myres < this->_BUF_SIZE)
; 1824 : 				_STD swap(this->_Bx._Buf, _Right._Bx._Buf);
; 1825 : 			else
; 1826 : 				{	// swap small with large
; 1827 : 				pointer _Ptr = _Right._Bx._Ptr;
; 1828 : 				this->_Getal().destroy(&_Right._Bx._Ptr);
; 1829 : 				_Traits::copy(_Right._Bx._Buf,
; 1830 : 					this->_Bx._Buf, this->_Mysize + 1);
; 1831 : 				this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 1832 : 				}
; 1833 : 		}
; 1834 : 
; 1835 : 	void swap(_Myt& _Right)
; 1836 : 		{	// exchange contents with _Right
; 1837 : 		if (this == &_Right)
; 1838 : 			;	// same object, do nothing
; 1839 : 		else if (this->_Getal() == _Right._Getal())
; 1840 : 			{	// same allocator, swap control information
; 1841 : 			this->_Swap_all(_Right);
; 1842 : 			_Swap_bx(_Right);
; 1843 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1844 : 			_STD swap(this->_Myres, _Right._Myres);
; 1845 : 			}
; 1846 : 
; 1847 :  #if _HAS_CPP0X
; 1848 : 		else if (_Alty::propagate_on_container_swap::value)
; 1849 : 			{	// swap allocators and control information
; 1850 : 			this->_Swap_alloc(_Right);
; 1851 : 			_Swap_bx(_Right);
; 1852 : 			_STD swap(this->_Bx, _Right._Bx);	// pointer bitwise copyable?
; 1853 : 			_STD swap(this->_Mysize, _Right._Mysize);
; 1854 : 			_STD swap(this->_Myres, _Right._Myres);
; 1855 : 			}
; 1856 :  #endif /* _HAS_CPP0X */
; 1857 : 
; 1858 : 		else
; 1859 : 			{	// different allocator, do multiple assigns
; 1860 : 			_Myt _Tmp = *this;
; 1861 : 
; 1862 : 			*this = _Right;
; 1863 : 			_Right = _Tmp;
; 1864 : 			}
; 1865 : 		}
; 1866 : 
; 1867 : 	size_type find(const _Myt& _Right, size_type _Off = 0) const _NOEXCEPT
; 1868 : 		{	// look for _Right beginning at or after _Off
; 1869 : 		return (find(_Right._Myptr(), _Off, _Right.size()));
; 1870 : 		}
; 1871 : 
; 1872 : 	size_type find(const _Elem *_Ptr,
; 1873 : 		size_type _Off, size_type _Count) const
; 1874 : 		{	// look for [_Ptr, _Ptr + _Count) beginning at or after _Off
; 1875 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1876 : 		if (_Count != 0)
; 1877 : 			_DEBUG_POINTER(_Ptr);
; 1878 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1879 : 
; 1880 : 		if (_Count == 0 && _Off <= this->_Mysize)
; 1881 : 			return (_Off);	// null string always matches (if inside string)
; 1882 : 
; 1883 : 		size_type _Nm;
; 1884 : 		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
; 1885 : 			{	// room for match, look for it
; 1886 : 			const _Elem *_Uptr, *_Vptr;
; 1887 : 			for (_Nm -= _Count - 1, _Vptr = this->_Myptr() + _Off;
; 1888 : 				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
; 1889 : 				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
; 1890 : 				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1891 : 					return (_Uptr - this->_Myptr());	// found a match
; 1892 : 			}
; 1893 : 
; 1894 : 		return (npos);	// no match
; 1895 : 		}
; 1896 : 
; 1897 : 	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
; 1898 : 		{	// look for [_Ptr, <null>) beginning at or after _Off
; 1899 : 		_DEBUG_POINTER(_Ptr);
; 1900 : 		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
; 1901 : 		}
; 1902 : 
; 1903 : 	size_type find(_Elem _Ch, size_type _Off = 0) const
; 1904 : 		{	// look for _Ch at or after _Off
; 1905 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1906 : 		}
; 1907 : 
; 1908 : 	size_type rfind(const _Myt& _Right, size_type _Off = npos) const _NOEXCEPT
; 1909 : 		{	// look for _Right beginning before _Off
; 1910 : 		return (rfind(_Right._Myptr(), _Off, _Right.size()));
; 1911 : 		}
; 1912 : 
; 1913 : 	size_type rfind(const _Elem *_Ptr,
; 1914 : 		size_type _Off, size_type _Count) const
; 1915 : 		{	// look for [_Ptr, _Ptr + _Count) beginning before _Off
; 1916 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1917 : 		if (_Count != 0)
; 1918 : 			_DEBUG_POINTER(_Ptr);
; 1919 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1920 : 
; 1921 : 		if (_Count == 0)
; 1922 : 			return (_Off < this->_Mysize ? _Off
; 1923 : 				: this->_Mysize);	// null always matches
; 1924 : 		if (_Count <= this->_Mysize)
; 1925 : 			{	// room for match, look for it
; 1926 : 			const _Elem *_Uptr = this->_Myptr() +
; 1927 : 				(_Off < this->_Mysize - _Count ? _Off
; 1928 : 					: this->_Mysize - _Count);
; 1929 : 			for (; ; --_Uptr)
; 1930 : 				if (_Traits::eq(*_Uptr, *_Ptr)
; 1931 : 					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
; 1932 : 					return (_Uptr - this->_Myptr());	// found a match
; 1933 : 				else if (_Uptr == this->_Myptr())
; 1934 : 					break;	// at beginning, no more chance for match
; 1935 : 			}
; 1936 : 
; 1937 : 		return (npos);	// no match
; 1938 : 		}
; 1939 : 
; 1940 : 	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
; 1941 : 		{	// look for [_Ptr, <null>) beginning before _Off
; 1942 : 		_DEBUG_POINTER(_Ptr);
; 1943 : 		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
; 1944 : 		}
; 1945 : 
; 1946 : 	size_type rfind(_Elem _Ch, size_type _Off = npos) const
; 1947 : 		{	// look for _Ch before _Off
; 1948 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 1949 : 		}
; 1950 : 
; 1951 : 	size_type find_first_of(const _Myt& _Right,
; 1952 : 		size_type _Off = 0) const _NOEXCEPT
; 1953 : 		{	// look for one of _Right at or after _Off
; 1954 : 		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
; 1955 : 		}
; 1956 : 
; 1957 : 	size_type find_first_of(const _Elem *_Ptr,
; 1958 : 		size_type _Off, size_type _Count) const
; 1959 : 		{	// look for one of [_Ptr, _Ptr + _Count) at or after _Off
; 1960 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1961 : 		if (_Count != 0)
; 1962 : 			_DEBUG_POINTER(_Ptr);
; 1963 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1964 : 
; 1965 : 		if (0 < _Count && _Off < this->_Mysize)
; 1966 : 			{	// room for match, look for it
; 1967 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 1968 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 1969 : 				_Uptr < _Vptr; ++_Uptr)
; 1970 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 1971 : 					return (_Uptr - this->_Myptr());	// found a match
; 1972 : 			}
; 1973 : 
; 1974 : 		return (npos);	// no match
; 1975 : 		}
; 1976 : 
; 1977 : 	size_type find_first_of(const _Elem *_Ptr,
; 1978 : 		size_type _Off = 0) const
; 1979 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 1980 : 		_DEBUG_POINTER(_Ptr);
; 1981 : 		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 1982 : 		}
; 1983 : 
; 1984 : 	size_type find_first_of(_Elem _Ch,
; 1985 : 		size_type _Off = 0) const
; 1986 : 		{	// look for _Ch at or after _Off
; 1987 : 		return (find((const _Elem *)&_Ch, _Off, 1));
; 1988 : 		}
; 1989 : 
; 1990 : 	size_type find_last_of(const _Myt& _Right,
; 1991 : 		size_type _Off = npos) const _NOEXCEPT
; 1992 : 		{	// look for one of _Right before _Off
; 1993 : 		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
; 1994 : 		}
; 1995 : 
; 1996 : 	size_type find_last_of(const _Elem *_Ptr,
; 1997 : 		size_type _Off, size_type _Count) const
; 1998 : 		{	// look for one of [_Ptr, _Ptr + _Count) before _Off
; 1999 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2000 : 		if (_Count != 0)
; 2001 : 			_DEBUG_POINTER(_Ptr);
; 2002 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2003 : 
; 2004 : 		if (0 < _Count && 0 < this->_Mysize)
; 2005 : 			{	// worth searching, do it
; 2006 : 			const _Elem *_Uptr = this->_Myptr()
; 2007 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2008 : 			for (; ; --_Uptr)
; 2009 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
; 2010 : 					return (_Uptr - this->_Myptr());	// found a match
; 2011 : 				else if (_Uptr == this->_Myptr())
; 2012 : 					break;	// at beginning, no more chance for match
; 2013 : 			}
; 2014 : 
; 2015 : 		return (npos);	// no match
; 2016 : 		}
; 2017 : 
; 2018 : 	size_type find_last_of(const _Elem *_Ptr,
; 2019 : 		size_type _Off = npos) const
; 2020 : 		{	// look for one of [_Ptr, <null>) before _Off
; 2021 : 		_DEBUG_POINTER(_Ptr);
; 2022 : 		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2023 : 		}
; 2024 : 
; 2025 : 	size_type find_last_of(_Elem _Ch,
; 2026 : 		size_type _Off = npos) const
; 2027 : 		{	// look for _Ch before _Off
; 2028 : 		return (rfind((const _Elem *)&_Ch, _Off, 1));
; 2029 : 		}
; 2030 : 
; 2031 : 	size_type find_first_not_of(const _Myt& _Right,
; 2032 : 		size_type _Off = 0) const _NOEXCEPT
; 2033 : 		{	// look for none of _Right at or after _Off
; 2034 : 		return (find_first_not_of(_Right._Myptr(), _Off,
; 2035 : 			_Right.size()));
; 2036 : 		}
; 2037 : 
; 2038 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2039 : 		size_type _Off, size_type _Count) const
; 2040 : 		{	// look for none of [_Ptr, _Ptr + _Count) at or after _Off
; 2041 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2042 : 		if (_Count != 0)
; 2043 : 			_DEBUG_POINTER(_Ptr);
; 2044 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2045 : 
; 2046 : 		if (_Off < this->_Mysize)
; 2047 : 			{	// room for match, look for it
; 2048 : 			const _Elem *const _Vptr = this->_Myptr() + this->_Mysize;
; 2049 : 			for (const _Elem *_Uptr = this->_Myptr() + _Off;
; 2050 : 				_Uptr < _Vptr; ++_Uptr)
; 2051 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2052 : 					return (_Uptr - this->_Myptr());
; 2053 : 			}
; 2054 : 		return (npos);
; 2055 : 		}
; 2056 : 
; 2057 : 	size_type find_first_not_of(const _Elem *_Ptr,
; 2058 : 		size_type _Off = 0) const
; 2059 : 		{	// look for one of [_Ptr, <null>) at or after _Off
; 2060 : 		_DEBUG_POINTER(_Ptr);
; 2061 : 		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2062 : 		}
; 2063 : 
; 2064 : 	size_type find_first_not_of(_Elem _Ch,
; 2065 : 		size_type _Off = 0) const
; 2066 : 		{	// look for non _Ch at or after _Off
; 2067 : 		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
; 2068 : 		}
; 2069 : 
; 2070 : 	size_type find_last_not_of(const _Myt& _Right,
; 2071 : 		size_type _Off = npos) const _NOEXCEPT
; 2072 : 		{	// look for none of _Right before _Off
; 2073 : 		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
; 2074 : 		}
; 2075 : 
; 2076 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2077 : 		size_type _Off, size_type _Count) const
; 2078 : 		{	// look for none of [_Ptr, _Ptr + _Count) before _Off
; 2079 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2080 : 		if (_Count != 0)
; 2081 : 			_DEBUG_POINTER(_Ptr);
; 2082 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2083 : 
; 2084 : 		if (0 < this->_Mysize)
; 2085 : 			{	// worth searching, do it
; 2086 : 			const _Elem *_Uptr = this->_Myptr()
; 2087 : 				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
; 2088 : 			for (; ; --_Uptr)
; 2089 : 				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
; 2090 : 					return (_Uptr - this->_Myptr());
; 2091 : 				else if (_Uptr == this->_Myptr())
; 2092 : 					break;
; 2093 : 			}
; 2094 : 		return (npos);
; 2095 : 		}
; 2096 : 
; 2097 : 	size_type find_last_not_of(const _Elem *_Ptr,
; 2098 : 		size_type _Off = npos) const
; 2099 : 		{	// look for none of [_Ptr, <null>) before _Off
; 2100 : 		_DEBUG_POINTER(_Ptr);
; 2101 : 		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
; 2102 : 		}
; 2103 : 
; 2104 : 	size_type find_last_not_of(_Elem _Ch,
; 2105 : 		size_type _Off = npos) const
; 2106 : 		{	// look for non _Ch before _Off
; 2107 : 		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
; 2108 : 		}
; 2109 : 
; 2110 : 	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
; 2111 : 		{	// return [_Off, _Off + _Count) as new string
; 2112 : 		return (_Myt(*this, _Off, _Count, get_allocator()));
; 2113 : 		}
; 2114 : 
; 2115 : 	int compare(const _Myt& _Right) const _NOEXCEPT
; 2116 : 		{	// compare [0, _Mysize) with _Right
; 2117 : 		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
; 2118 : 		}
; 2119 : 
; 2120 : 	int compare(size_type _Off, size_type _N0,
; 2121 : 		const _Myt& _Right) const
; 2122 : 		{	// compare [_Off, _Off + _N0) with _Right
; 2123 : 		return (compare(_Off, _N0, _Right, 0, npos));
; 2124 : 		}
; 2125 : 
; 2126 : 	int compare(size_type _Off,
; 2127 : 		size_type _N0, const _Myt& _Right,
; 2128 : 		size_type _Roff, size_type _Count) const
; 2129 : 		{	// compare [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)
; 2130 : 		if (_Right.size() < _Roff)
; 2131 : 			_Xran();	// _Off off end
; 2132 : 		if (_Right._Mysize - _Roff < _Count)
; 2133 : 			_Count = _Right._Mysize - _Roff;	// trim _Count to size
; 2134 : 		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
; 2135 : 		}
; 2136 : 
; 2137 : 	int compare(const _Elem *_Ptr) const
; 2138 : 		{	// compare [0, _Mysize) with [_Ptr, <null>)
; 2139 : 		_DEBUG_POINTER(_Ptr);
; 2140 : 		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
; 2141 : 		}
; 2142 : 
; 2143 : 	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
; 2144 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, <null>)
; 2145 : 		_DEBUG_POINTER(_Ptr);
; 2146 : 		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
; 2147 : 		}
; 2148 : 
; 2149 : 	int compare(size_type _Off,
; 2150 : 		size_type _N0, const _Elem *_Ptr, size_type _Count) const
; 2151 : 		{	// compare [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)
; 2152 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 2153 : 		if (_Count != 0)
; 2154 : 			_DEBUG_POINTER(_Ptr);
; 2155 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 2156 : 
; 2157 : 		if (this->_Mysize < _Off)
; 2158 : 			_Xran();	// _Off off end
; 2159 : 		if (this->_Mysize - _Off < _N0)
; 2160 : 			_N0 = this->_Mysize - _Off;	// trim _N0 to size
; 2161 : 
; 2162 : 		size_type _Ans = _Traits::compare(this->_Myptr() + _Off, _Ptr,
; 2163 : 			_N0 < _Count ? _N0 : _Count);
; 2164 : 		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
; 2165 : 			: _N0 == _Count ? 0 : +1);
; 2166 : 		}
; 2167 : 
; 2168 : 	allocator_type get_allocator() const _NOEXCEPT
; 2169 : 		{	// return allocator object for values
; 2170 : 		return (this->_Getal());
; 2171 : 		}
; 2172 : 
; 2173 : 	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off
; 2175 : 		if (_Count == 1)
; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);
; 2177 : 		else
; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);
; 2179 : 		}
; 2180 : 
; 2181 : 	void _Copy(size_type _Newsize, size_type _Oldlen)
; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer
; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;
; 2184 : 		if (max_size() < _Newres)
; 2185 : 			_Newres = _Newsize;	// undo roundup if too big
; 2186 : 		else if (this->_Myres / 2 <= _Newres / 3)
; 2187 : 			;
; 2188 : 		else if (this->_Myres <= max_size() - this->_Myres / 2)
; 2189 : 			_Newres = this->_Myres
; 2190 : 				+ this->_Myres / 2;	// grow exponentially if possible
; 2191 : 		else
; 2192 : 			_Newres = max_size();	// settle for max_size()
; 2193 : 
; 2194 : 		_Elem *_Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);
; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)
; 2208 : 			_Traits::copy(_Ptr, this->_Myptr(),
; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);
; 2211 : 		this->_Getal().construct(&this->_Bx._Ptr, _Ptr);
; 2212 : 		this->_Myres = _Newres;
; 2213 : 		_Eos(_Oldlen);
; 2214 : 		}
; 2215 : 
; 2216 : 	void _Eos(size_type _Newsize)
; 2217 : 		{	// set new length and null terminator
; 2218 : 		_Traits::assign(this->_Myptr()[this->_Mysize = _Newsize], _Elem());

  0004f	48 89 73 10	 mov	 QWORD PTR [rbx+16], rsi

; 2219 : 		}
; 2220 : 
; 2221 : 	bool _Grow(size_type _Newsize,
; 2222 : 		bool _Trim = false)
; 2223 : 		{	// ensure buffer is big enough, trim to size if _Trim is true
; 2224 : 		if (max_size() < _Newsize)
; 2225 : 			_Xlen();	// result too long
; 2226 : 		if (this->_Myres < _Newsize)
; 2227 : 			_Copy(_Newsize, this->_Mysize);	// reallocate to grow
; 2228 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)
; 2229 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 2230 : 				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
; 2231 : 		else if (_Newsize == 0)
; 2232 : 			_Eos(0);	// new size is zero, just null terminate
; 2233 : 		return (0 < _Newsize);	// return true only if more work to do
; 2234 : 		}
; 2235 : 
; 2236 : 	bool _Inside(const _Elem *_Ptr)
; 2237 : 		{	// test if _Ptr points inside string
; 2238 : 		if (_Ptr == 0 || _Ptr < this->_Myptr()
; 2239 : 			|| this->_Myptr() + this->_Mysize <= _Ptr)
; 2240 : 			return (false);	// don't ask
; 2241 : 		else
; 2242 : 			return (true);
; 2243 : 		}
; 2244 : 
; 2245 : 	static size_type _Pdif(const_iterator _P2,
; 2246 : 		const_iterator _P1)
; 2247 : 		{	// compute safe iterator difference
; 2248 : 		return (_STRING_ITER_BASE(_P2) == 0 ? 0 : _P2 - _P1);
; 2249 : 		}
; 2250 : 
; 2251 : 	void _Tidy(bool _Built = false,
; 2252 : 		size_type _Newsize = 0)
; 2253 : 		{	// initialize buffer, deallocating any storage
; 2254 : 		if (!_Built)
; 2255 : 			;
; 2256 : 		else if (this->_BUF_SIZE <= this->_Myres)
; 2257 : 			{	// copy any leftovers to small buffer and deallocate
; 2258 : 			pointer _Ptr = this->_Bx._Ptr;
; 2259 : 			this->_Getal().destroy(&this->_Bx._Ptr);
; 2260 : 			if (0 < _Newsize)
; 2261 : 				_Traits::copy(this->_Bx._Buf,
; 2262 : 					_STD addressof(*_Ptr), _Newsize);
; 2263 : 			this->_Getal().deallocate(_Ptr, this->_Myres + 1);
; 2264 : 			}
; 2265 : 		this->_Myres = this->_BUF_SIZE - 1;

  00053	48 c7 43 18 07
	00 00 00	 mov	 QWORD PTR [rbx+24], 7
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\iosfwd

; 347  : 		_Left = _Right;

  0005b	66 89 33	 mov	 WORD PTR [rbx], si
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstring

; 960  : 		}

  0005e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00063	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00068	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006c	5f		 pop	 rdi
  0006d	c3		 ret	 0
?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QEAAX$$QEAV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >, COMDAT

; 956  : 		{	// construct empty deque

$LN50:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 79   : 		{	// construct childless container

  0000a	33 ff		 xor	 edi, edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 956  : 		{	// construct empty deque

  0000c	48 8b d9	 mov	 rbx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 79   : 		{	// construct childless container

  0000f	48 89 39	 mov	 QWORD PTR [rcx], rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 778  : 		_Map = _Mapptr();

  00012	48 89 79 08	 mov	 QWORD PTR [rcx+8], rdi

; 779  : 		_Mapsize = 0;

  00016	48 89 79 10	 mov	 QWORD PTR [rcx+16], rdi

; 780  : 		_Myoff = 0;

  0001a	48 89 79 18	 mov	 QWORD PTR [rcx+24], rdi

; 781  : 		_Mysize = 0;

  0001e	48 89 79 20	 mov	 QWORD PTR [rcx+32], rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00022	8d 4f 10	 lea	 ecx, QWORD PTR [rdi+16]
  00025	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0002a	48 85 c0	 test	 rax, rax
  0002d	74 1e		 je	 SHORT $LN48@deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 900  : 		this->_Myproxy = _Alproxy.allocate(1);

  0002f	48 89 03	 mov	 QWORD PTR [rbx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00032	48 89 38	 mov	 QWORD PTR [rax], rdi
  00035	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 902  : 		this->_Myproxy->_Mycont = this;

  00039	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0003c	48 89 18	 mov	 QWORD PTR [rax], rbx

; 957  : 		}

  0003f	48 8b c3	 mov	 rax, rbx
  00042	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
$LN48@deque:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0004d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00052	cc		 int	 3
$LN47@deque:
??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 72
$T3 = 80
$T4 = 88
$T5 = 112
$T6 = 136
$T7 = 160
this$ = 240
_Right$ = 248
_Lock$8 = 256
$T9 = 264
??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >, COMDAT

; 991  : 		{	// construct by copying _Right

$LN81:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	41 56		 push	 r14
  0000a	41 57		 push	 r15
  0000c	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00013	48 c7 44 24 50
	fe ff ff ff	 mov	 QWORD PTR $T3[rsp], -2
  0001c	48 8b fa	 mov	 rdi, rdx
  0001f	48 8b d9	 mov	 rbx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 79   : 		{	// construct childless container

  00022	45 33 ff	 xor	 r15d, r15d
  00025	4c 89 39	 mov	 QWORD PTR [rcx], r15
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 778  : 		_Map = _Mapptr();

  00028	4c 89 79 08	 mov	 QWORD PTR [rcx+8], r15

; 779  : 		_Mapsize = 0;

  0002c	4c 89 79 10	 mov	 QWORD PTR [rcx+16], r15

; 780  : 		_Myoff = 0;

  00030	4c 89 79 18	 mov	 QWORD PTR [rcx+24], r15

; 781  : 		_Mysize = 0;

  00034	4c 89 79 20	 mov	 QWORD PTR [rcx+32], r15
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00038	41 8d 4f 10	 lea	 ecx, QWORD PTR [r15+16]
  0003c	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00041	48 85 c0	 test	 rax, rax
  00044	75 06		 jne	 SHORT $LN31@deque

; 29   : 		_Xbad_alloc();	// report no memory

  00046	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  0004b	cc		 int	 3
$LN31@deque:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 900  : 		this->_Myproxy = _Alproxy.allocate(1);

  0004c	48 89 03	 mov	 QWORD PTR [rbx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  0004f	4c 89 38	 mov	 QWORD PTR [rax], r15
  00052	4c 89 78 08	 mov	 QWORD PTR [rax+8], r15
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 902  : 		this->_Myproxy->_Mycont = this;

  00056	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00059	48 89 18	 mov	 QWORD PTR [rax], rbx

; 993  : 		insert(begin(), _Right.begin(), _Right.end());

  0005c	48 8d 44 24 58	 lea	 rax, QWORD PTR $T4[rsp]
  00061	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR $T9[rsp], rax
  00069	48 8d 44 24 70	 lea	 rax, QWORD PTR $T5[rsp]
  0006e	48 89 44 24 48	 mov	 QWORD PTR $T2[rsp], rax
  00073	48 8d 54 24 58	 lea	 rdx, QWORD PTR $T4[rsp]
  00078	48 8b cf	 mov	 rcx, rdi
  0007b	e8 00 00 00 00	 call	 ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
  00080	48 8b f0	 mov	 rsi, rax
  00083	48 8d 54 24 70	 lea	 rdx, QWORD PTR $T5[rsp]
  00088	48 8b cf	 mov	 rcx, rdi
  0008b	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  00090	4c 8b f0	 mov	 r14, rax
  00093	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR $T6[rsp]
  0009b	48 8b cb	 mov	 rcx, rbx
  0009e	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  000a3	48 8b f8	 mov	 rdi, rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 118  : 		{	// copy an iterator

  000a6	4c 89 7c 24 30	 mov	 QWORD PTR $T1[rsp], r15
  000ab	4c 89 7c 24 38	 mov	 QWORD PTR $T1[rsp+8], r15

; 119  : 		*this = _Right;
; 120  : 		}
; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  000b0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b3	48 85 c0	 test	 rax, rax
  000b6	74 2f		 je	 SHORT $LN70@deque

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  000b8	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  000bb	48 85 c0	 test	 rax, rax
  000be	75 1f		 jne	 SHORT $LN71@deque

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  000c0	8d 50 03	 lea	 edx, QWORD PTR [rax+3]
  000c3	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR _Lock$8[rsp]
  000cb	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  000d0	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR _Lock$8[rsp]
  000d8	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  000dd	eb 08		 jmp	 SHORT $LN70@deque
$LN71@deque:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  000df	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e2	48 89 44 24 30	 mov	 QWORD PTR $T1[rsp], rax
$LN70@deque:
  000e7	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  000eb	48 89 44 24 40	 mov	 QWORD PTR $T1[rsp+16], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 993  : 		insert(begin(), _Right.begin(), _Right.end());

  000f0	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  000f5	4d 8b ce	 mov	 r9, r14
  000f8	4c 8d 44 24 30	 lea	 r8, QWORD PTR $T1[rsp]
  000fd	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR $T7[rsp]
  00105	48 8b cb	 mov	 rcx, rbx
  00108	e8 00 00 00 00	 call	 ??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
  0010d	90		 npad	 1

; 994  : 		_CATCH_ALL
; 995  : 		_Tidy();
; 996  : 		_RERAISE;
; 997  : 		_CATCH_END
; 998  : 		}

  0010e	48 8b c3	 mov	 rax, rbx
  00111	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  00118	41 5f		 pop	 r15
  0011a	41 5e		 pop	 r14
  0011c	5f		 pop	 rdi
  0011d	5e		 pop	 rsi
  0011e	5b		 pop	 rbx
  0011f	c3		 ret	 0
$LN80@deque:
??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 48
$T2 = 72
$T3 = 80
$T4 = 88
$T5 = 112
$T6 = 136
$T7 = 160
this$ = 240
_Right$ = 248
_Lock$8 = 256
$T9 = 264
?dtor$0@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >'::`1'::dtor$0
  00000	48 8b 8a f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::~_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >
?dtor$0@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 48
$T2 = 72
$T3 = 80
$T4 = 88
$T5 = 112
$T6 = 136
$T7 = 160
this$ = 240
_Right$ = 248
_Lock$8 = 256
$T9 = 264
?dtor$1@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >'::`1'::dtor$1
  0000c	48 8b 8a 08 01
	00 00		 mov	 rcx, QWORD PTR $T9[rdx]
  00013	e9 00 00 00 00	 jmp	 ??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
?dtor$1@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 48
$T2 = 72
$T3 = 80
$T4 = 88
$T5 = 112
$T6 = 136
$T7 = 160
this$ = 240
_Right$ = 248
_Lock$8 = 256
$T9 = 264
?dtor$2@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >'::`1'::dtor$2
  00018	48 8b 8a 48 00
	00 00		 mov	 rcx, QWORD PTR $T2[rdx]
  0001f	e9 00 00 00 00	 jmp	 ??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
?dtor$2@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 48
$T2 = 72
$T3 = 80
$T4 = 88
$T5 = 112
$T6 = 136
$T7 = 160
this$ = 240
_Right$ = 248
_Lock$8 = 256
$T9 = 264
?catch$0@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >'::`1'::catch$0

; 994  : 		_CATCH_ALL

  00024	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00029	55		 push	 rbp
  0002a	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0002e	48 8b ea	 mov	 rbp, rdx
__catch$??0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z$0:

; 995  : 		_Tidy();

  00031	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00038	e8 00 00 00 00	 call	 ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAXXZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy

; 996  : 		_RERAISE;

  0003d	33 d2		 xor	 edx, edx
  0003f	33 c9		 xor	 ecx, ecx
  00041	e8 00 00 00 00	 call	 _CxxThrowException
  00046	90		 npad	 1
?catch$0@?0???0?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::deque<geom::Matrix,std::allocator<geom::Matrix> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAX$$QEAVMatrix@geom@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAX$$QEAVMatrix@geom@@@Z PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back, COMDAT

; 1152 : 		{	// insert element at end

$LN47:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1154 : 		_PUSH_BACK_BEGIN;

  0000f	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00013	48 8b fa	 mov	 rdi, rdx
  00016	48 8b d9	 mov	 rbx, rcx
  00019	48 ff c0	 inc	 rax
  0001c	48 39 41 10	 cmp	 QWORD PTR [rcx+16], rax
  00020	77 05		 ja	 SHORT $LN2@push_back
  00022	e8 00 00 00 00	 call	 ?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Growmap
$LN2@push_back:
  00027	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  0002b	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0002f	49 ff c8	 dec	 r8
  00032	4c 21 43 18	 and	 QWORD PTR [rbx+24], r8
  00036	48 8b 53 18	 mov	 rdx, QWORD PTR [rbx+24]
  0003a	48 03 53 20	 add	 rdx, QWORD PTR [rbx+32]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0003e	4c 23 c2	 and	 r8, rdx

; 1154 : 		_PUSH_BACK_BEGIN;

  00041	4a 8d 34 c5 00
	00 00 00	 lea	 rsi, QWORD PTR [r8*8]
  00049	48 83 3c 06 00	 cmp	 QWORD PTR [rsi+rax], 0
  0004e	75 1e		 jne	 SHORT $LN1@push_back
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00050	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00055	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0005a	48 8b c8	 mov	 rcx, rax
  0005d	48 85 c0	 test	 rax, rax
  00060	0f 84 87 00 00
	00		 je	 $LN45@push_back
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1154 : 		_PUSH_BACK_BEGIN;

  00066	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0006a	48 89 0c 06	 mov	 QWORD PTR [rsi+rax], rcx
$LN1@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  0006e	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00072	48 8b 0c 06	 mov	 rcx, QWORD PTR [rsi+rax]
  00076	48 85 c9	 test	 rcx, rcx
  00079	74 5e		 je	 SHORT $LN38@push_back
  0007b	8b 07		 mov	 eax, DWORD PTR [rdi]
  0007d	89 01		 mov	 DWORD PTR [rcx], eax
  0007f	8b 47 04	 mov	 eax, DWORD PTR [rdi+4]
  00082	89 41 04	 mov	 DWORD PTR [rcx+4], eax
  00085	8b 47 08	 mov	 eax, DWORD PTR [rdi+8]
  00088	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  0008b	8b 47 0c	 mov	 eax, DWORD PTR [rdi+12]
  0008e	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  00091	8b 47 10	 mov	 eax, DWORD PTR [rdi+16]
  00094	89 41 10	 mov	 DWORD PTR [rcx+16], eax
  00097	8b 47 14	 mov	 eax, DWORD PTR [rdi+20]
  0009a	89 41 14	 mov	 DWORD PTR [rcx+20], eax
  0009d	8b 47 18	 mov	 eax, DWORD PTR [rdi+24]
  000a0	89 41 18	 mov	 DWORD PTR [rcx+24], eax
  000a3	8b 47 1c	 mov	 eax, DWORD PTR [rdi+28]
  000a6	89 41 1c	 mov	 DWORD PTR [rcx+28], eax
  000a9	8b 47 20	 mov	 eax, DWORD PTR [rdi+32]
  000ac	89 41 20	 mov	 DWORD PTR [rcx+32], eax
  000af	8b 47 24	 mov	 eax, DWORD PTR [rdi+36]
  000b2	89 41 24	 mov	 DWORD PTR [rcx+36], eax
  000b5	8b 47 28	 mov	 eax, DWORD PTR [rdi+40]
  000b8	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  000bb	8b 47 2c	 mov	 eax, DWORD PTR [rdi+44]
  000be	89 41 2c	 mov	 DWORD PTR [rcx+44], eax
  000c1	8b 47 30	 mov	 eax, DWORD PTR [rdi+48]
  000c4	89 41 30	 mov	 DWORD PTR [rcx+48], eax
  000c7	8b 47 34	 mov	 eax, DWORD PTR [rdi+52]
  000ca	89 41 34	 mov	 DWORD PTR [rcx+52], eax
  000cd	8b 47 38	 mov	 eax, DWORD PTR [rdi+56]
  000d0	89 41 38	 mov	 DWORD PTR [rcx+56], eax
  000d3	8b 47 3c	 mov	 eax, DWORD PTR [rdi+60]
  000d6	89 41 3c	 mov	 DWORD PTR [rcx+60], eax
$LN38@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1158 : 		_PUSH_BACK_END;

  000d9	48 ff 43 20	 inc	 QWORD PTR [rbx+32]

; 1159 : 		}

  000dd	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000e2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000eb	5f		 pop	 rdi
  000ec	c3		 ret	 0
$LN45@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  000ed	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  000f2	cc		 int	 3
$LN44@push_back:
?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAX$$QEAVMatrix@geom@@@Z ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?empty@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?empty@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA_NXZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::empty, COMDAT

; 1382 : 		return (this->_Mysize == 0);

  00000	33 c0		 xor	 eax, eax
  00002	48 39 41 20	 cmp	 QWORD PTR [rcx+32], rax
  00006	0f 94 c0	 sete	 al

; 1383 : 		}

  00009	c3		 ret	 0
?empty@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA_NXZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAAEAVMatrix@geom@@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 56
this$ = 96
?back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAAEAVMatrix@geom@@XZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::back, COMDAT

; 1435 : 		{	// return last element of mutable sequence

$LN14:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1436 : 		return (*(end() - 1));

  00004	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00009	e8 00 00 00 00	 call	 ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
  0000e	48 8d 54 24 38	 lea	 rdx, QWORD PTR $T2[rsp]
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
  0001b	48 8b d0	 mov	 rdx, rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0001e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00021	48 85 c0	 test	 rax, rax
  00024	74 03		 je	 SHORT $LN10@back
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN10@back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00029	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]

; 1436 : 		return (*(end() - 1));

  0002d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00031	48 ff c9	 dec	 rcx
  00034	48 23 4a 10	 and	 rcx, QWORD PTR [rdx+16]

; 1436 : 		return (*(end() - 1));

  00038	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]

; 1437 : 		}

  0003c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00040	c3		 ret	 0
?back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAAEAVMatrix@geom@@XZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back, COMDAT

; 1485 : 		{	// insert element at end

$LN43:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1487 : 		_PUSH_BACK_BEGIN;

  0000f	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00013	48 8b fa	 mov	 rdi, rdx
  00016	48 8b d9	 mov	 rbx, rcx
  00019	48 ff c0	 inc	 rax
  0001c	48 39 41 10	 cmp	 QWORD PTR [rcx+16], rax
  00020	77 05		 ja	 SHORT $LN2@push_back
  00022	e8 00 00 00 00	 call	 ?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Growmap
$LN2@push_back:
  00027	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  0002b	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0002f	49 ff c8	 dec	 r8
  00032	4c 21 43 18	 and	 QWORD PTR [rbx+24], r8
  00036	48 8b 53 18	 mov	 rdx, QWORD PTR [rbx+24]
  0003a	48 03 53 20	 add	 rdx, QWORD PTR [rbx+32]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0003e	4c 23 c2	 and	 r8, rdx

; 1487 : 		_PUSH_BACK_BEGIN;

  00041	4a 8d 34 c5 00
	00 00 00	 lea	 rsi, QWORD PTR [r8*8]
  00049	48 83 3c 06 00	 cmp	 QWORD PTR [rsi+rax], 0
  0004e	75 1e		 jne	 SHORT $LN1@push_back
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00050	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00055	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0005a	48 8b c8	 mov	 rcx, rax
  0005d	48 85 c0	 test	 rax, rax
  00060	0f 84 87 00 00
	00		 je	 $LN41@push_back
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1487 : 		_PUSH_BACK_BEGIN;

  00066	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0006a	48 89 0c 06	 mov	 QWORD PTR [rsi+rax], rcx
$LN1@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  0006e	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00072	48 8b 0c 06	 mov	 rcx, QWORD PTR [rsi+rax]
  00076	48 85 c9	 test	 rcx, rcx
  00079	74 5e		 je	 SHORT $LN36@push_back
  0007b	8b 07		 mov	 eax, DWORD PTR [rdi]
  0007d	89 01		 mov	 DWORD PTR [rcx], eax
  0007f	8b 47 04	 mov	 eax, DWORD PTR [rdi+4]
  00082	89 41 04	 mov	 DWORD PTR [rcx+4], eax
  00085	8b 47 08	 mov	 eax, DWORD PTR [rdi+8]
  00088	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  0008b	8b 47 0c	 mov	 eax, DWORD PTR [rdi+12]
  0008e	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  00091	8b 47 10	 mov	 eax, DWORD PTR [rdi+16]
  00094	89 41 10	 mov	 DWORD PTR [rcx+16], eax
  00097	8b 47 14	 mov	 eax, DWORD PTR [rdi+20]
  0009a	89 41 14	 mov	 DWORD PTR [rcx+20], eax
  0009d	8b 47 18	 mov	 eax, DWORD PTR [rdi+24]
  000a0	89 41 18	 mov	 DWORD PTR [rcx+24], eax
  000a3	8b 47 1c	 mov	 eax, DWORD PTR [rdi+28]
  000a6	89 41 1c	 mov	 DWORD PTR [rcx+28], eax
  000a9	8b 47 20	 mov	 eax, DWORD PTR [rdi+32]
  000ac	89 41 20	 mov	 DWORD PTR [rcx+32], eax
  000af	8b 47 24	 mov	 eax, DWORD PTR [rdi+36]
  000b2	89 41 24	 mov	 DWORD PTR [rcx+36], eax
  000b5	8b 47 28	 mov	 eax, DWORD PTR [rdi+40]
  000b8	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  000bb	8b 47 2c	 mov	 eax, DWORD PTR [rdi+44]
  000be	89 41 2c	 mov	 DWORD PTR [rcx+44], eax
  000c1	8b 47 30	 mov	 eax, DWORD PTR [rdi+48]
  000c4	89 41 30	 mov	 DWORD PTR [rcx+48], eax
  000c7	8b 47 34	 mov	 eax, DWORD PTR [rdi+52]
  000ca	89 41 34	 mov	 DWORD PTR [rcx+52], eax
  000cd	8b 47 38	 mov	 eax, DWORD PTR [rdi+56]
  000d0	89 41 38	 mov	 DWORD PTR [rcx+56], eax
  000d3	8b 47 3c	 mov	 eax, DWORD PTR [rdi+60]
  000d6	89 41 3c	 mov	 DWORD PTR [rcx+60], eax
$LN36@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1490 : 		_PUSH_BACK_END;

  000d9	48 ff 43 20	 inc	 QWORD PTR [rbx+32]

; 1491 : 		}

  000dd	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000e2	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000e7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000eb	5f		 pop	 rdi
  000ec	c3		 ret	 0
$LN41@push_back:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  000ed	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  000f2	cc		 int	 3
$LN40@push_back:
?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?pop_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?pop_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXXZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::pop_back, COMDAT

; 1382 : 		return (this->_Mysize == 0);

  00000	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00004	48 85 c0	 test	 rax, rax

; 1495 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1496 : 		if (empty())
; 1497 : 			_DEBUG_ERROR("deque empty before pop");
; 1498 : 		else
; 1499 : 			{	// something to erase, do it
; 1500 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1501 : 			_Orphan_off(_Newoff);
; 1502 : 			size_type _Block = this->_Getblock(_Newoff);
; 1503 : 			this->_Getal().destroy(
; 1504 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1505 : 			if (--this->_Mysize == 0)
; 1506 : 				this->_Myoff = 0;
; 1507 : 			}
; 1508 : 
; 1509 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1510 : 		if (!empty())

  00007	74 11		 je	 SHORT $LN1@pop_back

; 1511 : 			{	// something to erase, do it
; 1512 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1513 : 			size_type _Block = this->_Getblock(_Newoff);
; 1514 : 			this->_Getal().destroy(
; 1515 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1516 : 			if (--this->_Mysize == 0)

  00009	48 ff c8	 dec	 rax
  0000c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  00010	75 08		 jne	 SHORT $LN1@pop_back

; 1517 : 				this->_Myoff = 0;

  00012	48 c7 41 18 00
	00 00 00	 mov	 QWORD PTR [rcx+24], 0
$LN1@pop_back:

; 1518 : 			}
; 1519 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1520 : 		}

  0001a	f3 c3		 fatret	 0
?pop_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXXZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::pop_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAXXZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy, COMDAT

; 1857 : 		{	// free all storage

$LN44:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1382 : 		return (this->_Mysize == 0);

  0000f	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00013	33 f6		 xor	 esi, esi

; 1857 : 		{	// free all storage

  00015	48 8b d9	 mov	 rbx, rcx

; 1382 : 		return (this->_Mysize == 0);

  00018	48 85 c0	 test	 rax, rax

; 1858 : 		_Alpty _Almap(this->_Getal());
; 1859 : 		while (!empty())

  0001b	74 12		 je	 SHORT $LN5@Tidy
$LN42@Tidy:

; 1383 : 		}
; 1384 : 
; 1385 : 	allocator_type get_allocator() const _NOEXCEPT
; 1386 : 		{	// return allocator object for values
; 1387 : 		return (this->_Getal());
; 1388 : 		}
; 1389 : 
; 1390 : 	const_reference at(size_type _Pos) const
; 1391 : 		{	// subscript nonmutable sequence with checking
; 1392 : 		if (this->_Mysize <= _Pos)
; 1393 : 			_Xran();
; 1394 : 		return (*(begin() + _Pos));
; 1395 : 		}
; 1396 : 
; 1397 : 	reference at(size_type _Pos)
; 1398 : 		{	// subscript mutable sequence with checking
; 1399 : 		if (this->_Mysize <= _Pos)
; 1400 : 			_Xran();
; 1401 : 		return (*(begin() + _Pos));
; 1402 : 		}
; 1403 : 
; 1404 : 	const_reference operator[](size_type _Pos) const
; 1405 : 		{	// subscript nonmutable sequence
; 1406 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1407 : 		if (this->_Mysize <= _Pos)
; 1408 : 			_DEBUG_ERROR("deque subscript out of range");
; 1409 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1410 : 
; 1411 : 		return (*(begin() + _Pos));
; 1412 : 		}
; 1413 : 
; 1414 : 	reference operator[](size_type _Pos)
; 1415 : 		{	// subscript mutable sequence
; 1416 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1417 : 		if (this->_Mysize <= _Pos)
; 1418 : 			_DEBUG_ERROR("deque subscript out of range");
; 1419 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1420 : 
; 1421 : 		return (*(begin() + _Pos));
; 1422 : 		}
; 1423 : 
; 1424 : 	reference front()
; 1425 : 		{	// return first element of mutable sequence
; 1426 : 		return (*begin());
; 1427 : 		}
; 1428 : 
; 1429 : 	const_reference front() const
; 1430 : 		{	// return first element of nonmutable sequence
; 1431 : 		return (*begin());
; 1432 : 		}
; 1433 : 
; 1434 : 	reference back()
; 1435 : 		{	// return last element of mutable sequence
; 1436 : 		return (*(end() - 1));
; 1437 : 		}
; 1438 : 
; 1439 : 	const_reference back() const
; 1440 : 		{	// return last element of nonmutable sequence
; 1441 : 		return (*(end() - 1));
; 1442 : 		}
; 1443 : 
; 1444 : 	void push_front(const value_type& _Val)
; 1445 : 		{	// insert element at beginning
; 1446 : 		this->_Orphan_all();
; 1447 : 		_PUSH_FRONT_BEGIN;
; 1448 : 		this->_Getal().construct(
; 1449 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1450 : 		_PUSH_FRONT_END;
; 1451 : 		}
; 1452 : 
; 1453 : 	void pop_front()
; 1454 : 		{	// erase element at beginning
; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (empty())
; 1457 : 			_DEBUG_ERROR("deque empty before pop");
; 1458 : 		else
; 1459 : 			{	// something to erase, do it
; 1460 : 			_Orphan_off(this->_Myoff);
; 1461 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1462 : 			this->_Getal().destroy(
; 1463 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1464 : 			if (--this->_Mysize == 0)
; 1465 : 				this->_Myoff = 0;
; 1466 : 			else
; 1467 : 				++this->_Myoff;
; 1468 : 			}
; 1469 : 
; 1470 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 		if (!empty())
; 1472 : 			{	// something to erase, do it
; 1473 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1474 : 			this->_Getal().destroy(
; 1475 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1476 : 			if (--this->_Mysize == 0)
; 1477 : 				this->_Myoff = 0;
; 1478 : 			else
; 1479 : 				++this->_Myoff;
; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}
; 1483 : 
; 1484 : 	void push_back(const value_type& _Val)
; 1485 : 		{	// insert element at end
; 1486 : 		this->_Orphan_all();
; 1487 : 		_PUSH_BACK_BEGIN;
; 1488 : 		this->_Getal().construct(
; 1489 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1490 : 		_PUSH_BACK_END;
; 1491 : 		}
; 1492 : 
; 1493 : 	void pop_back()
; 1494 : 		{	// erase element at end
; 1495 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1496 : 		if (empty())
; 1497 : 			_DEBUG_ERROR("deque empty before pop");
; 1498 : 		else
; 1499 : 			{	// something to erase, do it
; 1500 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1501 : 			_Orphan_off(_Newoff);
; 1502 : 			size_type _Block = this->_Getblock(_Newoff);
; 1503 : 			this->_Getal().destroy(
; 1504 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1505 : 			if (--this->_Mysize == 0)
; 1506 : 				this->_Myoff = 0;
; 1507 : 			}
; 1508 : 
; 1509 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1510 : 		if (!empty())
; 1511 : 			{	// something to erase, do it
; 1512 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1513 : 			size_type _Block = this->_Getblock(_Newoff);
; 1514 : 			this->_Getal().destroy(
; 1515 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1516 : 			if (--this->_Mysize == 0)

  0001d	48 ff c8	 dec	 rax
  00020	75 04		 jne	 SHORT $LN13@Tidy

; 1517 : 				this->_Myoff = 0;

  00022	48 89 71 18	 mov	 QWORD PTR [rcx+24], rsi
$LN13@Tidy:

; 1382 : 		return (this->_Mysize == 0);

  00026	48 85 c0	 test	 rax, rax

; 1858 : 		_Alpty _Almap(this->_Getal());
; 1859 : 		while (!empty())

  00029	75 f2		 jne	 SHORT $LN42@Tidy
  0002b	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN5@Tidy:

; 1861 : 		for (size_type _Block = this->_Mapsize; 0 < _Block; )

  0002f	48 8b 79 10	 mov	 rdi, QWORD PTR [rcx+16]
  00033	48 85 ff	 test	 rdi, rdi
  00036	74 22		 je	 SHORT $LN3@Tidy
  00038	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL4@Tidy:

; 1862 : 			{	// free storage for a block and destroy pointer
; 1863 : 			if (this->_Map[--_Block] != pointer())

  00040	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00044	48 ff cf	 dec	 rdi
  00047	48 8b 0c f8	 mov	 rcx, QWORD PTR [rax+rdi*8]
  0004b	48 85 c9	 test	 rcx, rcx
  0004e	74 05		 je	 SHORT $LN2@Tidy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00050	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN2@Tidy:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1861 : 		for (size_type _Block = this->_Mapsize; 0 < _Block; )

  00055	48 85 ff	 test	 rdi, rdi
  00058	75 e6		 jne	 SHORT $LL4@Tidy
$LN3@Tidy:

; 1864 : 				{	// free block and destroy its pointer
; 1865 : 				this->_Getal().deallocate(this->_Map[_Block], _DEQUESIZ);
; 1866 : 				this->_Getal().destroy(&this->_Map[_Block]);
; 1867 : 				}
; 1868 : 			}
; 1869 : 
; 1870 : 		if (this->_Map != _Mapptr())

  0005a	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  0005e	48 85 c9	 test	 rcx, rcx
  00061	74 05		 je	 SHORT $LN40@Tidy
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00063	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN40@Tidy:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1874 : 		this->_Map = _Mapptr();

  00068	48 89 73 08	 mov	 QWORD PTR [rbx+8], rsi
  0006c	48 89 73 10	 mov	 QWORD PTR [rbx+16], rsi

; 1875 : 		}

  00070	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00075	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0007a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007e	5f		 pop	 rdi
  0007f	c3		 ret	 0
?_Tidy@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAXXZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??1?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::~_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >, COMDAT

; 883  : 		{	// destroy proxy

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00009	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0000c	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 912  : 		this->_Myproxy = 0;

  00011	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0

; 884  : 		_Free_proxy();
; 885  : 		}

  00018	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001c	5b		 pop	 rbx
  0001d	c3		 ret	 0
??1?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::~_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT
  00000	c2 00 00	 ret	 0
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT
  00000	c2 00 00	 ret	 0
??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
_Lock$1 = 48
this$ = 48
__that$ = 56
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT
$LN23:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 118  : 		{	// copy an iterator

  0000a	33 c0		 xor	 eax, eax
  0000c	48 8b fa	 mov	 rdi, rdx
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	48 89 01	 mov	 QWORD PTR [rcx], rax
  00015	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 119  : 		*this = _Right;
; 120  : 		}
; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  00019	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0001c	48 85 c0	 test	 rax, rax
  0001f	74 27		 je	 SHORT $LN12@Deque_cons

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00021	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00024	48 85 c0	 test	 rax, rax
  00027	75 19		 jne	 SHORT $LN13@Deque_cons

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00029	8d 50 03	 lea	 edx, QWORD PTR [rax+3]
  0002c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  00031	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00036	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  0003b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  00040	eb 06		 jmp	 SHORT $LN12@Deque_cons
$LN13@Deque_cons:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00042	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00045	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN12@Deque_cons:
  00048	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  0004c	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  00050	48 8b c3	 mov	 rax, rbx
  00053	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??1?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QEAA@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::~_Deque_val<std::_Deque_simple_types<geom::Matrix> >, COMDAT
  00000	c2 00 00	 ret	 0
??1?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QEAA@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::~_Deque_val<std::_Deque_simple_types<geom::Matrix> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?_Unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Unused_capacity, COMDAT

; 972  : 		return (this->_Myend - this->_Mylast);

  00000	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  00004	48 b8 ab aa aa
	aa aa aa aa 2a	 mov	 rax, 3074457345618258603 ; 2aaaaaaaaaaaaaabH
  0000e	48 2b 51 08	 sub	 rdx, QWORD PTR [rcx+8]
  00012	48 f7 ea	 imul	 rdx
  00015	48 c1 fa 02	 sar	 rdx, 2
  00019	48 8b c2	 mov	 rax, rdx
  0001c	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  00020	48 03 c2	 add	 rax, rdx

; 973  : 		}

  00023	c3		 ret	 0
?_Unused_capacity@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBA_K_K@Z
_TEXT	SEGMENT
this$ = 8
_Count$ = 16
?_Grow_to@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBA_K_K@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Grow_to, COMDAT

; 967  : 		return (this->_Myend - this->_Myfirst);

  00000	4c 8b 41 10	 mov	 r8, QWORD PTR [rcx+16]

; 1484 : 		{	// grow by 50% or at least to _Count

  00004	4c 8b ca	 mov	 r9, rdx

; 967  : 		return (this->_Myend - this->_Myfirst);

  00007	48 b8 ab aa aa
	aa aa aa aa 2a	 mov	 rax, 3074457345618258603 ; 2aaaaaaaaaaaaaabH
  00011	4c 2b 01	 sub	 r8, QWORD PTR [rcx]
  00014	49 f7 e8	 imul	 r8
  00017	48 c1 fa 02	 sar	 rdx, 2
  0001b	48 8b c2	 mov	 rax, rdx
  0001e	48 c1 e8 3f	 shr	 rax, 63			; 0000003fH
  00022	48 03 d0	 add	 rdx, rax

; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00025	48 b8 aa aa aa
	aa aa aa aa 0a	 mov	 rax, 768614336404564650	; 0aaaaaaaaaaaaaaaH
  0002f	48 8b ca	 mov	 rcx, rdx
  00032	48 d1 e9	 shr	 rcx, 1
  00035	48 2b c1	 sub	 rax, rcx
  00038	48 3b c2	 cmp	 rax, rdx
  0003b	73 0d		 jae	 SHORT $LN4@Grow_to
  0003d	33 d2		 xor	 edx, edx

; 1489 : 		if (_Capacity < _Count)

  0003f	49 3b d1	 cmp	 rdx, r9
  00042	49 0f 42 d1	 cmovb	 rdx, r9

; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);

  00046	48 8b c2	 mov	 rax, rdx

; 1492 : 		}

  00049	c3		 ret	 0
$LN4@Grow_to:

; 1485 : 		size_type _Capacity = capacity();
; 1486 : 
; 1487 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1488 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0004a	48 03 d1	 add	 rdx, rcx

; 1489 : 		if (_Capacity < _Count)

  0004d	49 3b d1	 cmp	 rdx, r9
  00050	49 0f 42 d1	 cmovb	 rdx, r9

; 1490 : 			_Capacity = _Count;
; 1491 : 		return (_Capacity);

  00054	48 8b c2	 mov	 rax, rdx

; 1492 : 		}

  00057	c3		 ret	 0
?_Grow_to@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEBA_K_K@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >, COMDAT

; 831  : 		}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAPEAVVertexUVRGBA@gfxu@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$ = 56
?allocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAPEAVVertexUVRGBA@gfxu@@_K@Z PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::allocate, COMDAT

; 875  : 		{	// allocate array of _Count elements

$LN16:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 23   : 	void *_Ptr = 0;

  00004	33 c0		 xor	 eax, eax

; 24   : 
; 25   : 	if (_Count == 0)

  00006	48 85 d2	 test	 rdx, rdx
  00009	74 21		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000b	48 b8 aa aa aa
	aa aa aa aa 0a	 mov	 rax, 768614336404564650	; 0aaaaaaaaaaaaaaaH
  00015	48 3b d0	 cmp	 rdx, rax
  00018	77 17		 ja	 SHORT $LN14@allocate
  0001a	48 8d 0c 52	 lea	 rcx, QWORD PTR [rdx+rdx*2]
  0001e	48 c1 e1 03	 shl	 rcx, 3
  00022	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00027	48 85 c0	 test	 rax, rax
  0002a	74 05		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 876  : 		return (_Mybase::allocate(_Count));
; 877  : 		}

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00031	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00036	cc		 int	 3
$LN13@allocate:
?allocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAPEAVVertexUVRGBA@gfxu@@_K@Z ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@_K@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_Count$dead$ = 24
?deallocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@_K@Z PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::deallocate, COMDAT

; 586  : 		::operator delete(_Ptr);

  00000	48 8b ca	 mov	 rcx, rdx
  00003	e9 00 00 00 00	 jmp	 ??3@YAXPEAX@Z		; operator delete
?deallocate@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@_K@Z ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::max_size, COMDAT

; 914  : 		return (_Mytraits::max_size(*this));

  00000	48 b8 aa aa aa
	aa aa aa aa 0a	 mov	 rax, 768614336404564650	; 0aaaaaaaaaaaaaaaH

; 915  : 		}

  0000a	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEBA_KXZ ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Vector_val@U?$_Simple_types@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<gfxu::VertexUVRGBA> >::_Vector_val<std::_Simple_types<gfxu::VertexUVRGBA> >, COMDAT

; 485  : 		{	// initialize values
; 486  : 		_Myfirst = pointer();

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax

; 487  : 		_Mylast = pointer();

  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 488  : 		_Myend = pointer();

  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 489  : 		}

  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@VVertexUVRGBA@gfxu@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<gfxu::VertexUVRGBA> >::_Vector_val<std::_Simple_types<gfxu::VertexUVRGBA> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1260 : 		return (iterator(this->_Myoff, this));

  00003	4c 8b 41 18	 mov	 r8, QWORD PTR [rcx+24]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 113  : 		{	// construct orphaned iterator

  00007	48 c7 42 08 00
	00 00 00	 mov	 QWORD PTR [rdx+8], 0

; 166  : 			_Myproxy = _Parent_proxy;

  0000f	48 89 02	 mov	 QWORD PTR [rdx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 306  : 		_Myoff = _Off;

  00012	4c 89 42 10	 mov	 QWORD PTR [rdx+16], r8

; 1260 : 		return (iterator(this->_Myoff, this));

  00016	48 8b c2	 mov	 rax, rdx

; 1261 : 		}

  00019	c3		 ret	 0
?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1265 : 		return (const_iterator(this->_Myoff, this));

  00003	4c 8b 41 18	 mov	 r8, QWORD PTR [rcx+24]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 113  : 		{	// construct orphaned iterator

  00007	48 c7 42 08 00
	00 00 00	 mov	 QWORD PTR [rdx+8], 0

; 166  : 			_Myproxy = _Parent_proxy;

  0000f	48 89 02	 mov	 QWORD PTR [rdx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 306  : 		_Myoff = _Off;

  00012	4c 89 42 10	 mov	 QWORD PTR [rdx+16], r8

; 1265 : 		return (const_iterator(this->_Myoff, this));

  00016	48 8b c2	 mov	 rax, rdx

; 1266 : 		}

  00019	c3		 ret	 0
?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1270 : 		return (iterator(this->_Myoff + this->_Mysize, this));

  00003	4c 8b 41 20	 mov	 r8, QWORD PTR [rcx+32]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 113  : 		{	// construct orphaned iterator

  00007	48 c7 42 08 00
	00 00 00	 mov	 QWORD PTR [rdx+8], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1270 : 		return (iterator(this->_Myoff + this->_Mysize, this));

  0000f	4c 03 41 18	 add	 r8, QWORD PTR [rcx+24]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  00013	48 89 02	 mov	 QWORD PTR [rdx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1270 : 		return (iterator(this->_Myoff + this->_Mysize, this));

  00016	48 8b c2	 mov	 rax, rdx

; 306  : 		_Myoff = _Off;

  00019	4c 89 42 10	 mov	 QWORD PTR [rdx+16], r8

; 1271 : 		}

  0001d	c3		 ret	 0
?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1275 : 		return (const_iterator(this->_Myoff + this->_Mysize, this));

  00003	4c 8b 41 20	 mov	 r8, QWORD PTR [rcx+32]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 113  : 		{	// construct orphaned iterator

  00007	48 c7 42 08 00
	00 00 00	 mov	 QWORD PTR [rdx+8], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1275 : 		return (const_iterator(this->_Myoff + this->_Mysize, this));

  0000f	4c 03 41 18	 add	 r8, QWORD PTR [rcx+24]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  00013	48 89 02	 mov	 QWORD PTR [rdx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1275 : 		return (const_iterator(this->_Myoff + this->_Mysize, this));

  00016	48 8b c2	 mov	 rax, rdx

; 306  : 		_Myoff = _Off;

  00019	4c 89 42 10	 mov	 QWORD PTR [rdx+16], r8

; 1276 : 		}

  0001d	c3		 ret	 0
?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA?AV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
this$ = 64
_Count$dead$ = 72
?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Growmap, COMDAT

; 1802 : 		{	// grow map by at least _Count pointers, _Mapsize a power of 2

$LN134:
  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1803 : 		static_assert(1 < _DEQUEMAPSIZ,
; 1804 : 			"The _Xlen() test should always be performed.");
; 1805 : 
; 1806 : 		typedef typename _Alpty::pointer _Blockptr;
; 1807 : 		_Alpty _Almap(this->_Getal());
; 1808 : 		size_type _Newsize = 0 < this->_Mapsize ? this->_Mapsize : 1;

  00007	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  0000b	bb 01 00 00 00	 mov	 ebx, 1
  00010	48 8b f1	 mov	 rsi, rcx
  00013	48 85 d2	 test	 rdx, rdx
  00016	48 b9 ff ff ff
	ff ff ff ff 03	 mov	 rcx, 288230376151711743	; 03ffffffffffffffH
  00020	48 0f 45 da	 cmovne	 rbx, rdx
$LL7@Growmap:

; 1809 : 		while (_Newsize - this->_Mapsize < _Count || _Newsize < _DEQUEMAPSIZ)

  00024	48 8b c3	 mov	 rax, rbx
  00027	48 2b c2	 sub	 rax, rdx
  0002a	48 83 f8 01	 cmp	 rax, 1
  0002e	72 06		 jb	 SHORT $LN5@Growmap
  00030	48 83 fb 08	 cmp	 rbx, 8
  00034	73 14		 jae	 SHORT $LN6@Growmap
$LN5@Growmap:

; 1810 : 			{	// scale _Newsize to 2^N >= _Mapsize + _Count
; 1811 : 			if (max_size() / _DEQUESIZ - _Newsize < _Newsize)

  00036	48 8b c1	 mov	 rax, rcx
  00039	48 2b c3	 sub	 rax, rbx
  0003c	48 3b c3	 cmp	 rax, rbx
  0003f	0f 82 5a 01 00
	00		 jb	 $LN111@Growmap

; 1812 : 				_Xlen();	// result too long
; 1813 : 			_Newsize *= 2;

  00045	48 03 db	 add	 rbx, rbx

; 1814 : 			}

  00048	eb da		 jmp	 SHORT $LL7@Growmap
$LN6@Growmap:

; 1815 : 		_Count = _Newsize - this->_Mapsize;

  0004a	48 2b da	 sub	 rbx, rdx
  0004d	48 89 6c 24 40	 mov	 QWORD PTR [rsp+64], rbp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 23   : 	void *_Ptr = 0;

  00052	33 ed		 xor	 ebp, ebp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1818 : 		_Mapptr _Newmap = _Almap.allocate(this->_Mapsize + _Count);

  00054	48 8d 0c 1a	 lea	 rcx, QWORD PTR [rdx+rbx]
  00058	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  0005d	4c 8b 7e 18	 mov	 r15, QWORD PTR [rsi+24]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 25   : 	if (_Count == 0)

  00061	48 85 c9	 test	 rcx, rcx
  00064	74 2c		 je	 SHORT $LN32@Growmap

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00066	48 b8 ff ff ff
	ff ff ff ff 1f	 mov	 rax, 2305843009213693951 ; 1fffffffffffffffH
  00070	48 3b c8	 cmp	 rcx, rax
  00073	0f 87 20 01 00
	00		 ja	 $LN132@Growmap
  00079	48 8d 0c cd 00
	00 00 00	 lea	 rcx, QWORD PTR [rcx*8]
  00081	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00086	48 8b e8	 mov	 rbp, rax
  00089	48 85 c0	 test	 rax, rax
  0008c	0f 84 07 01 00
	00		 je	 $LN132@Growmap
$LN32@Growmap:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1823 : 			_Myptr, _Almap);	// copy initial to end

  00092	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
  00096	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  0009b	48 8b 7e 10	 mov	 rdi, QWORD PTR [rsi+16]
  0009f	48 c1 e7 03	 shl	 rdi, 3
  000a3	4c 89 74 24 58	 mov	 QWORD PTR [rsp+88], r14
  000a8	4e 8d 34 fd 00
	00 00 00	 lea	 r14, QWORD PTR [r15*8]
  000b0	49 8d 14 06	 lea	 rdx, QWORD PTR [r14+rax]
  000b4	49 8d 0c 2e	 lea	 rcx, QWORD PTR [r14+rbp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  000b8	48 2b fa	 sub	 rdi, rdx
  000bb	48 03 f8	 add	 rdi, rax
  000be	48 c1 ff 03	 sar	 rdi, 3

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000c2	48 8d 3c fd 00
	00 00 00	 lea	 rdi, QWORD PTR [rdi*8]
  000ca	4c 8b c7	 mov	 r8, rdi
  000cd	e8 00 00 00 00	 call	 memmove
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1828 : 				_Myptr, _Almap);	// copy rest of old

  000d2	48 8b 56 08	 mov	 rdx, QWORD PTR [rsi+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000d6	48 03 c7	 add	 rax, rdi
  000d9	48 8b c8	 mov	 rcx, rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1824 : 		if (_Myboff <= _Count)

  000dc	4c 3b fb	 cmp	 r15, rbx
  000df	77 3e		 ja	 SHORT $LN3@Growmap
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  000e1	49 c1 fe 03	 sar	 r14, 3
  000e5	4c 89 64 24 50	 mov	 QWORD PTR [rsp+80], r12
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1830 : 				_Almap);	// clear suffix of new

  000ea	4c 8b e3	 mov	 r12, rbx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  000ed	4a 8d 3c f5 00
	00 00 00	 lea	 rdi, QWORD PTR [r14*8]
  000f5	4c 8b c7	 mov	 r8, rdi
  000f8	e8 00 00 00 00	 call	 memmove
  000fd	48 03 f8	 add	 rdi, rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1830 : 				_Almap);	// clear suffix of new

  00100	4d 2b e7	 sub	 r12, r15
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00103	74 08		 je	 SHORT $LN61@Growmap
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1828 : 				_Myptr, _Almap);	// copy rest of old

  00105	33 c0		 xor	 eax, eax
  00107	49 8b cc	 mov	 rcx, r12
  0010a	f3 48 ab	 rep stosq
$LN61@Growmap:
  0010d	4c 8b 64 24 50	 mov	 r12, QWORD PTR [rsp+80]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00112	4d 85 ff	 test	 r15, r15
  00115	74 51		 je	 SHORT $LN99@Growmap
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 660  : 	_Fill_n(_First, _Count, (_Valty)0);

  00117	48 8b fd	 mov	 rdi, rbp
  0011a	49 8b cf	 mov	 rcx, r15
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1834 : 		else

  0011d	eb 44		 jmp	 SHORT $LN131@Growmap
$LN3@Growmap:

; 1838 : 				_Myptr, _Almap);	// copy more old

  0011f	48 8d 3c dd 00
	00 00 00	 lea	 rdi, QWORD PTR [rbx*8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00127	4c 8b c7	 mov	 r8, rdi
  0012a	49 83 e0 f8	 and	 r8, -8
  0012e	e8 00 00 00 00	 call	 memmove
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1841 : 				_Newmap, _Almap);	// copy rest of old

  00133	48 8b 46 08	 mov	 rax, QWORD PTR [rsi+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00137	48 8b cd	 mov	 rcx, rbp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1841 : 				_Newmap, _Almap);	// copy rest of old

  0013a	48 8d 14 07	 lea	 rdx, QWORD PTR [rdi+rax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  0013e	4c 2b f2	 sub	 r14, rdx
  00141	4c 03 f0	 add	 r14, rax
  00144	49 c1 fe 03	 sar	 r14, 3

; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00148	4a 8d 3c f5 00
	00 00 00	 lea	 rdi, QWORD PTR [r14*8]
  00150	4c 8b c7	 mov	 r8, rdi
  00153	e8 00 00 00 00	 call	 memmove
  00158	48 03 f8	 add	 rdi, rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)

  0015b	48 85 db	 test	 rbx, rbx
  0015e	74 08		 je	 SHORT $LN99@Growmap
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1838 : 				_Myptr, _Almap);	// copy more old

  00160	48 8b cb	 mov	 rcx, rbx
$LN131@Growmap:
  00163	33 c0		 xor	 eax, eax
  00165	f3 48 ab	 rep stosq
$LN99@Growmap:

; 1842 : 			_Uninitialized_default_fill_n(_Myptr, _Count,
; 1843 : 				_Almap);	// clear rest to initial block
; 1844 : 			}
; 1845 : 
; 1846 : 		_Destroy_range(this->_Map + _Myboff, this->_Map + this->_Mapsize,
; 1847 : 			_Almap);
; 1848 : 		if (this->_Map != _Mapptr())

  00168	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  0016c	4c 8b 74 24 58	 mov	 r14, QWORD PTR [rsp+88]
  00171	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00176	48 85 c9	 test	 rcx, rcx
  00179	74 05		 je	 SHORT $LN104@Growmap
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  0017b	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN104@Growmap:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1853 : 		this->_Mapsize += _Count;

  00180	48 01 5e 10	 add	 QWORD PTR [rsi+16], rbx
  00184	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
  00189	48 89 6e 08	 mov	 QWORD PTR [rsi+8], rbp
  0018d	48 8b 6c 24 40	 mov	 rbp, QWORD PTR [rsp+64]

; 1854 : 		}

  00192	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00196	5e		 pop	 rsi
  00197	5b		 pop	 rbx
  00198	c3		 ret	 0
$LN132@Growmap:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00199	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  0019e	cc		 int	 3
$LN111@Growmap:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1793 : 		_Xlength_error("deque<T> too long");

  0019f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
  001a6	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
  001ab	cc		 int	 3
$LN130@Growmap:
?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@VMatrix@geom@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@VMatrix@geom@@@std@@QEAA@XZ PROC		; std::allocator<geom::Matrix>::allocator<geom::Matrix>, COMDAT

; 566  : 		{	// construct default allocator (do nothing)
; 567  : 		}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0?$allocator@VMatrix@geom@@@std@@QEAA@XZ ENDP		; std::allocator<geom::Matrix>::allocator<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV?$allocator@VMatrix@geom@@@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$dead$ = 56
??0?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV?$allocator@VMatrix@geom@@@1@@Z PROC ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >, COMDAT

; 877  : 	_Deque_alloc(const _Alloc& = _Alloc())

$LN44:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 79   : 		{	// construct childless container

  0000a	33 ff		 xor	 edi, edi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 877  : 	_Deque_alloc(const _Alloc& = _Alloc())

  0000c	48 8b d9	 mov	 rbx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 79   : 		{	// construct childless container

  0000f	48 89 39	 mov	 QWORD PTR [rcx], rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 778  : 		_Map = _Mapptr();

  00012	48 89 79 08	 mov	 QWORD PTR [rcx+8], rdi

; 779  : 		_Mapsize = 0;

  00016	48 89 79 10	 mov	 QWORD PTR [rcx+16], rdi

; 780  : 		_Myoff = 0;

  0001a	48 89 79 18	 mov	 QWORD PTR [rcx+24], rdi

; 781  : 		_Mysize = 0;

  0001e	48 89 79 20	 mov	 QWORD PTR [rcx+32], rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00022	8d 4f 10	 lea	 ecx, QWORD PTR [rdi+16]
  00025	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0002a	48 85 c0	 test	 rax, rax
  0002d	74 1e		 je	 SHORT $LN42@Deque_allo
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 900  : 		this->_Myproxy = _Alproxy.allocate(1);

  0002f	48 89 03	 mov	 QWORD PTR [rbx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00032	48 89 38	 mov	 QWORD PTR [rax], rdi
  00035	48 89 78 08	 mov	 QWORD PTR [rax+8], rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 902  : 		this->_Myproxy->_Mycont = this;

  00039	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0003c	48 89 18	 mov	 QWORD PTR [rax], rbx

; 880  : 		}

  0003f	48 8b c3	 mov	 rax, rbx
  00042	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5f		 pop	 rdi
  0004c	c3		 ret	 0
$LN42@Deque_allo:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  0004d	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00052	cc		 int	 3
$LN41@Deque_allo:
??0?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV?$allocator@VMatrix@geom@@@1@@Z ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Free_proxy, COMDAT

; 906  : 		{	// destroy proxy

$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 586  : 		::operator delete(_Ptr);

  00009	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0000c	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 912  : 		this->_Myproxy = 0;

  00011	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0

; 913  : 		}

  00018	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001c	5b		 pop	 rbx
  0001d	c3		 ret	 0
?_Free_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEBA?AU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@2@XZ
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEBA?AU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@2@XZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Getal, COMDAT

; 917  : 		return (_Alty());

  00000	48 8b c2	 mov	 rax, rdx

; 918  : 		}

  00003	c3		 ret	 0
?_Getal@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEBA?AU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@2@XZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA?AU12@XZ
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA?AU12@XZ PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::select_on_container_copy_construction, COMDAT

; 807  : 		return (_Mytraits::select_on_container_copy_construction(*this));

  00000	48 8b c2	 mov	 rax, rdx

; 808  : 		}

  00003	c3		 ret	 0
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA?AU12@XZ ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAPEAVMatrix@geom@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$dead$ = 56
?allocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAPEAVMatrix@geom@@_K@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::allocate, COMDAT

; 875  : 		{	// allocate array of _Count elements

$LN17:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00004	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00009	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0000e	48 85 c0	 test	 rax, rax
  00011	74 05		 je	 SHORT $LN15@allocate

; 876  : 		return (_Mybase::allocate(_Count));
; 877  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
$LN15@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00018	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  0001d	cc		 int	 3
$LN14@allocate:
?allocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAPEAVMatrix@geom@@_K@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@_K@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_Count$dead$ = 24
?deallocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@_K@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::deallocate, COMDAT

; 586  : 		::operator delete(_Ptr);

  00000	48 8b ca	 mov	 rcx, rdx
  00003	e9 00 00 00 00	 jmp	 ??3@YAXPEAX@Z		; operator delete
?deallocate@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@_K@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@QEAAXPEAPEAVMatrix@geom@@_K@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_Count$dead$ = 24
?deallocate@?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@QEAAXPEAPEAVMatrix@geom@@_K@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> >::deallocate, COMDAT

; 586  : 		::operator delete(_Ptr);

  00000	48 8b ca	 mov	 rcx, rdx
  00003	e9 00 00 00 00	 jmp	 ??3@YAXPEAX@Z		; operator delete
?deallocate@?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@QEAAXPEAPEAVMatrix@geom@@_K@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Getblock@?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QEBA_K_K@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QEBA_K_K@Z PROC ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::_Getblock, COMDAT

; 786  : 			// NB: _Mapsize and _DEQUESIZ are guaranteed to be powers of 2
; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00000	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00004	48 ff c8	 dec	 rax
  00007	48 23 c2	 and	 rax, rdx

; 788  : 		}

  0000a	c3		 ret	 0
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QEBA_K_K@Z ENDP ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::_Getblock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEAVMatrix@geom@@XZ
_TEXT	SEGMENT
this$ = 8
??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEAVMatrix@geom@@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 603  : 		{	// return designated object

  00003	48 8b d1	 mov	 rdx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00006	48 85 c0	 test	 rax, rax
  00009	75 14		 jne	 SHORT $LN7@operator
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0000b	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]

; 604  : 		return ((reference)**(_Mybase *)this);

  0000f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00013	48 ff c9	 dec	 rcx
  00016	48 23 4a 10	 and	 rcx, QWORD PTR [rdx+16]

; 604  : 		return ((reference)**(_Mybase *)this);

  0001a	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]

; 605  : 		}

  0001e	c3		 ret	 0
$LN7@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0001f	48 8b 00	 mov	 rax, QWORD PTR [rax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00022	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]

; 604  : 		return ((reference)**(_Mybase *)this);

  00026	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0002a	48 ff c9	 dec	 rcx
  0002d	48 23 4a 10	 and	 rcx, QWORD PTR [rdx+16]

; 604  : 		return ((reference)**(_Mybase *)this);

  00031	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]

; 605  : 		}

  00035	c3		 ret	 0
??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEAVMatrix@geom@@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
_Lock$1 = 64
_Lock$2 = 64
_Off$dead$ = 64
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-, COMDAT

; 656  : 		{	// return this - integer

$LN55:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00014	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 118  : 		{	// copy an iterator

  00017	33 f6		 xor	 esi, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 656  : 		{	// return this - integer

  00019	48 8b da	 mov	 rbx, rdx
  0001c	48 8b f9	 mov	 rdi, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 124  : 		if (_Myproxy == _Right._Myproxy)

  0001f	48 85 c0	 test	 rax, rax
  00022	74 24		 je	 SHORT $LN16@operator

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00024	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00027	48 85 c0	 test	 rax, rax
  0002a	75 19		 jne	 SHORT $LN17@operator

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0002c	8d 56 03	 lea	 edx, QWORD PTR [rsi+3]
  0002f	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _Lock$2[rsp]
  00034	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00039	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _Lock$2[rsp]
  0003e	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  00043	eb 03		 jmp	 SHORT $LN16@operator
$LN17@operator:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00045	48 8b 30	 mov	 rsi, QWORD PTR [rax]
$LN16@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 640  : 		this->_Myoff += _Off;

  00048	48 8b 7f 10	 mov	 rdi, QWORD PTR [rdi+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 118  : 		{	// copy an iterator

  0004c	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0
  00053	48 c7 43 08 00
	00 00 00	 mov	 QWORD PTR [rbx+8], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 640  : 		this->_Myoff += _Off;

  0005b	48 ff cf	 dec	 rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 124  : 		if (_Myproxy == _Right._Myproxy)

  0005e	48 85 f6	 test	 rsi, rsi
  00061	74 27		 je	 SHORT $LN53@operator

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00063	48 8b 06	 mov	 rax, QWORD PTR [rsi]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00066	48 85 c0	 test	 rax, rax
  00069	75 19		 jne	 SHORT $LN43@operator

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0006b	8d 50 03	 lea	 edx, QWORD PTR [rax+3]
  0006e	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  00073	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00078	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  0007d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  00082	eb 06		 jmp	 SHORT $LN53@operator
$LN43@operator:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00084	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00087	48 89 03	 mov	 QWORD PTR [rbx], rax
$LN53@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 659  : 		}

  0008a	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  0008f	48 89 7b 10	 mov	 QWORD PTR [rbx+16], rdi
  00093	48 8b c3	 mov	 rax, rbx
  00096	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0009b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0009f	5f		 pop	 rdi
  000a0	c3		 ret	 0
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
_Lock$1 = 48
this$ = 48
__that$ = 56
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT
$LN25:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 118  : 		{	// copy an iterator

  0000a	33 c0		 xor	 eax, eax
  0000c	48 8b fa	 mov	 rdi, rdx
  0000f	48 8b d9	 mov	 rbx, rcx
  00012	48 89 01	 mov	 QWORD PTR [rcx], rax
  00015	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 119  : 		*this = _Right;
; 120  : 		}
; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  00019	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0001c	48 85 c0	 test	 rax, rax
  0001f	74 27		 je	 SHORT $LN14@Deque_iter

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00021	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00024	48 85 c0	 test	 rax, rax
  00027	75 19		 jne	 SHORT $LN15@Deque_iter

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00029	8d 50 03	 lea	 edx, QWORD PTR [rax+3]
  0002c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  00031	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00036	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  0003b	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  00040	eb 06		 jmp	 SHORT $LN14@Deque_iter
$LN15@Deque_iter:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00042	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00045	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN14@Deque_iter:
  00048	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  0004c	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  00050	48 8b c3	 mov	 rax, rbx
  00053	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00058	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005c	5f		 pop	 rdi
  0005d	c3		 ret	 0
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@_K@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
__formal$dead$ = 24
?deallocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@_K@Z PROC ; std::allocator<gfxu::VertexUVRGBA>::deallocate, COMDAT

; 586  : 		::operator delete(_Ptr);

  00000	48 8b ca	 mov	 rcx, rdx
  00003	e9 00 00 00 00	 jmp	 ??3@YAXPEAX@Z		; operator delete
?deallocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@_K@Z ENDP ; std::allocator<gfxu::VertexUVRGBA>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAPEAVVertexUVRGBA@gfxu@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$ = 56
?allocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAPEAVVertexUVRGBA@gfxu@@_K@Z PROC ; std::allocator<gfxu::VertexUVRGBA>::allocate, COMDAT

; 590  : 		{	// allocate array of _Count elements

$LN13:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 23   : 	void *_Ptr = 0;

  00004	33 c0		 xor	 eax, eax

; 24   : 
; 25   : 	if (_Count == 0)

  00006	48 85 d2	 test	 rdx, rdx
  00009	74 21		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000b	48 b8 aa aa aa
	aa aa aa aa 0a	 mov	 rax, 768614336404564650	; 0aaaaaaaaaaaaaaaH
  00015	48 3b d0	 cmp	 rdx, rax
  00018	77 17		 ja	 SHORT $LN11@allocate
  0001a	48 8d 0c 52	 lea	 rcx, QWORD PTR [rdx+rdx*2]
  0001e	48 c1 e1 03	 shl	 rcx, 3
  00022	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00027	48 85 c0	 test	 rax, rax
  0002a	74 05		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 591  : 		return (_Allocate(_Count, (pointer)0));
; 592  : 		}

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00031	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00036	cc		 int	 3
$LN10@allocate:
?allocate@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAPEAVVertexUVRGBA@gfxu@@_K@Z ENDP ; std::allocator<gfxu::VertexUVRGBA>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SA_KAEBV?$allocator@VVertexUVRGBA@gfxu@@@2@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
?max_size@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SA_KAEBV?$allocator@VVertexUVRGBA@gfxu@@@2@@Z PROC ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::max_size, COMDAT

; 762  : 		return (_Al.max_size());

  00000	48 b8 aa aa aa
	aa aa aa aa 0a	 mov	 rax, 768614336404564650	; 0aaaaaaaaaaaaaaaH

; 763  : 		}

  0000a	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SA_KAEBV?$allocator@VVertexUVRGBA@gfxu@@@2@@Z ENDP ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?max_size@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA_KXZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::max_size, COMDAT

; 1377 : 		return (this->_Getal().max_size());

  00000	48 b8 ff ff ff
	ff ff ff ff 03	 mov	 rax, 288230376151711743	; 03ffffffffffffffH

; 1378 : 		}

  0000a	c3		 ret	 0
?max_size@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA_KXZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Xlen@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEBAXXZ
_TEXT	SEGMENT
this$dead$ = 48
?_Xlen@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEBAXXZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Xlen, COMDAT

; 1792 : 		{	// report a length_error

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1793 : 		_Xlength_error("deque<T> too long");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
  0000b	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
  00010	cc		 int	 3
$LN3@Xlen:
?_Xlen@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEBAXXZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@_K@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
__formal$dead$ = 24
?deallocate@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@_K@Z PROC ; std::allocator<geom::Matrix>::deallocate, COMDAT

; 586  : 		::operator delete(_Ptr);

  00000	48 8b ca	 mov	 rcx, rdx
  00003	e9 00 00 00 00	 jmp	 ??3@YAXPEAX@Z		; operator delete
?deallocate@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@_K@Z ENDP ; std::allocator<geom::Matrix>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@VMatrix@geom@@@std@@QEAAPEAVMatrix@geom@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$dead$ = 56
?allocate@?$allocator@VMatrix@geom@@@std@@QEAAPEAVMatrix@geom@@_K@Z PROC ; std::allocator<geom::Matrix>::allocate, COMDAT

; 590  : 		{	// allocate array of _Count elements

$LN14:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00004	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00009	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0000e	48 85 c0	 test	 rax, rax
  00011	74 05		 je	 SHORT $LN12@allocate

; 591  : 		return (_Allocate(_Count, (pointer)0));
; 592  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
$LN12@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00018	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  0001d	cc		 int	 3
$LN11@allocate:
?allocate@?$allocator@VMatrix@geom@@@std@@QEAAPEAVMatrix@geom@@_K@Z ENDP ; std::allocator<geom::Matrix>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ PROC ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Alloc_proxy, COMDAT

; 897  : 		{	// construct proxy from _Alval

$LN37:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00009	b9 10 00 00 00	 mov	 ecx, 16
  0000e	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00013	48 85 c0	 test	 rax, rax
  00016	74 18		 je	 SHORT $LN35@Alloc_prox
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 900  : 		this->_Myproxy = _Alproxy.allocate(1);

  00018	48 89 03	 mov	 QWORD PTR [rbx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 67   : 		{	// construct from pointers

  0001b	33 d2		 xor	 edx, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  0001d	48 89 10	 mov	 QWORD PTR [rax], rdx
  00020	48 89 50 08	 mov	 QWORD PTR [rax+8], rdx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 902  : 		this->_Myproxy->_Mycont = this;

  00024	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00027	48 89 18	 mov	 QWORD PTR [rax], rbx

; 903  : 		}

  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5b		 pop	 rbx
  0002f	c3		 ret	 0
$LN35@Alloc_prox:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  00030	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00035	cc		 int	 3
$LN34@Alloc_prox:
?_Alloc_proxy@?$_Deque_alloc@$0A@U?$_Deque_base_types@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@@std@@QEAAXXZ ENDP ; std::_Deque_alloc<0,std::_Deque_base_types<geom::Matrix,std::allocator<geom::Matrix> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::_Wrap_alloc<std::allocator<geom::Matrix> >, COMDAT

; 831  : 		}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@XZ ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::_Wrap_alloc<std::allocator<geom::Matrix> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV?$allocator@VMatrix@geom@@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Right$dead$ = 16
??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV?$allocator@VMatrix@geom@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::_Wrap_alloc<std::allocator<geom::Matrix> >, COMDAT

; 836  : 		}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA@AEBV?$allocator@VMatrix@geom@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::_Wrap_alloc<std::allocator<geom::Matrix> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SA?AV?$allocator@VMatrix@geom@@@2@AEBV32@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
_Al$dead$ = 16
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SA?AV?$allocator@VMatrix@geom@@@2@AEBV32@@Z PROC ; std::allocator_traits<std::allocator<geom::Matrix> >::select_on_container_copy_construction, COMDAT

; 768  : 		return (_Al.select_on_container_copy_construction());

  00000	48 8b c1	 mov	 rax, rcx

; 769  : 		}

  00003	c3		 ret	 0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SA?AV?$allocator@VMatrix@geom@@@2@AEBV32@@Z ENDP ; std::allocator_traits<std::allocator<geom::Matrix> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@QEAAPEAPEAVMatrix@geom@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$ = 56
?allocate@?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@QEAAPEAPEAVMatrix@geom@@_K@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> >::allocate, COMDAT

; 875  : 		{	// allocate array of _Count elements

$LN16:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 23   : 	void *_Ptr = 0;

  00004	33 c0		 xor	 eax, eax

; 24   : 
; 25   : 	if (_Count == 0)

  00006	48 85 d2	 test	 rdx, rdx
  00009	74 21		 je	 SHORT $LN6@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000b	48 b8 ff ff ff
	ff ff ff ff 1f	 mov	 rax, 2305843009213693951 ; 1fffffffffffffffH
  00015	48 3b d0	 cmp	 rdx, rax
  00018	77 17		 ja	 SHORT $LN14@allocate
  0001a	48 8d 0c d5 00
	00 00 00	 lea	 rcx, QWORD PTR [rdx*8]
  00022	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00027	48 85 c0	 test	 rax, rax
  0002a	74 05		 je	 SHORT $LN14@allocate
$LN6@allocate:

; 876  : 		return (_Mybase::allocate(_Count));
; 877  : 		}

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
$LN14@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00031	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00036	cc		 int	 3
$LN13@allocate:
?allocate@?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@QEAAPEAPEAVMatrix@geom@@_K@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PEAVMatrix@geom@@@std@@QEAAXPEAPEAVMatrix@geom@@_K@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
__formal$dead$ = 24
?deallocate@?$allocator@PEAVMatrix@geom@@@std@@QEAAXPEAPEAVMatrix@geom@@_K@Z PROC ; std::allocator<geom::Matrix * __ptr64>::deallocate, COMDAT

; 586  : 		::operator delete(_Ptr);

  00000	48 8b ca	 mov	 rcx, rdx
  00003	e9 00 00 00 00	 jmp	 ??3@YAXPEAX@Z		; operator delete
?deallocate@?$allocator@PEAVMatrix@geom@@@std@@QEAAXPEAPEAVMatrix@geom@@_K@Z ENDP ; std::allocator<geom::Matrix * __ptr64>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QEAA@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::_Deque_val<std::_Deque_simple_types<geom::Matrix> >, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 79   : 		{	// construct childless container

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 778  : 		_Map = _Mapptr();

  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 779  : 		_Mapsize = 0;

  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 780  : 		_Myoff = 0;

  0000d	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 781  : 		_Mysize = 0;

  00011	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 782  : 		}

  00015	48 8b c1	 mov	 rax, rcx
  00018	c3		 ret	 0
??0?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@QEAA@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<geom::Matrix> >::_Deque_val<std::_Deque_simple_types<geom::Matrix> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z
_TEXT	SEGMENT
_Lock$1 = 48
this$ = 48
_Off$ = 56
_Pdeque$ = 64
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT

; 586  : 		{	// construct with offset _Off in *_Pdeque

$LN18:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 113  : 		{	// construct orphaned iterator

  0000a	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 586  : 		{	// construct with offset _Off in *_Pdeque

  0000c	48 8b fa	 mov	 rdi, rdx
  0000f	48 8b d9	 mov	 rbx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 113  : 		{	// construct orphaned iterator

  00012	48 89 01	 mov	 QWORD PTR [rcx], rax
  00015	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 114  : 		}
; 115  : 
; 116  : 	_Iterator_base12(const _Iterator_base12& _Right)
; 117  : 		: _Myproxy(0), _Mynextiter(0)
; 118  : 		{	// copy an iterator
; 119  : 		*this = _Right;
; 120  : 		}
; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)
; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);
; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00019	4d 85 c0	 test	 r8, r8
  0001c	75 29		 jne	 SHORT $LN10@Deque_iter

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0001e	8d 50 03	 lea	 edx, QWORD PTR [rax+3]
  00021	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  00026	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  0002b	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  00030	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 306  : 		_Myoff = _Off;

  00035	48 89 7b 10	 mov	 QWORD PTR [rbx+16], rdi

; 587  : 		}

  00039	48 8b c3	 mov	 rax, rbx
  0003c	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
$LN10@Deque_iter:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  00047	49 8b 00	 mov	 rax, QWORD PTR [r8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 306  : 		_Myoff = _Off;

  0004a	48 89 51 10	 mov	 QWORD PTR [rcx+16], rdx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  0004e	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 587  : 		}

  00051	48 8b c3	 mov	 rax, rbx
  00054	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5f		 pop	 rdi
  0005e	c3		 ret	 0
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z
_TEXT	SEGMENT
this$ = 8
_Off$dead$ = 16
??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-=, COMDAT

; 640  : 		this->_Myoff += _Off;

  00000	48 ff 49 10	 dec	 QWORD PTR [rcx+16]

; 652  : 		return (*this += -_Off);

  00004	48 8b c1	 mov	 rax, rcx

; 653  : 		}

  00007	c3		 ret	 0
??Z?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z
_TEXT	SEGMENT
_Lock$1 = 48
this$ = 48
_Off$ = 56
_Pdeque$ = 64
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT

; 303  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)

$LN16:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 113  : 		{	// construct orphaned iterator

  0000a	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 303  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)

  0000c	48 8b fa	 mov	 rdi, rdx
  0000f	48 8b d9	 mov	 rbx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 113  : 		{	// construct orphaned iterator

  00012	48 89 01	 mov	 QWORD PTR [rcx], rax
  00015	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 114  : 		}
; 115  : 
; 116  : 	_Iterator_base12(const _Iterator_base12& _Right)
; 117  : 		: _Myproxy(0), _Mynextiter(0)
; 118  : 		{	// copy an iterator
; 119  : 		*this = _Right;
; 120  : 		}
; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)
; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);
; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00019	4d 85 c0	 test	 r8, r8
  0001c	75 29		 jne	 SHORT $LN8@Deque_cons

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0001e	8d 50 03	 lea	 edx, QWORD PTR [rax+3]
  00021	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  00026	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  0002b	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  00030	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 306  : 		_Myoff = _Off;

  00035	48 89 7b 10	 mov	 QWORD PTR [rbx+16], rdi

; 307  : 		}

  00039	48 8b c3	 mov	 rax, rbx
  0003c	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5f		 pop	 rdi
  00046	c3		 ret	 0
$LN8@Deque_cons:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  00047	49 8b 00	 mov	 rax, QWORD PTR [r8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 306  : 		_Myoff = _Off;

  0004a	48 89 51 10	 mov	 QWORD PTR [rcx+16], rdx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  0004e	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 307  : 		}

  00051	48 8b c3	 mov	 rax, rbx
  00054	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  00059	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005d	5f		 pop	 rdi
  0005e	c3		 ret	 0
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEBVMatrix@geom@@XZ
_TEXT	SEGMENT
this$ = 8
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEBVMatrix@geom@@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 323  : 		{	// return designated object

  00003	48 8b d1	 mov	 rdx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00006	48 85 c0	 test	 rax, rax
  00009	75 14		 jne	 SHORT $LN5@operator
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0000b	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]

; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);

  0000f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00013	48 ff c9	 dec	 rcx
  00016	48 23 4a 10	 and	 rcx, QWORD PTR [rdx+16]

; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);

  0001a	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]

; 346  : 		}

  0001e	c3		 ret	 0
$LN5@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0001f	48 8b 00	 mov	 rax, QWORD PTR [rax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00022	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]

; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);

  00026	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0002a	48 ff c9	 dec	 rcx
  0002d	48 23 4a 10	 and	 rcx, QWORD PTR [rdx+16]

; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);

  00031	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]

; 346  : 		}

  00035	c3		 ret	 0
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEBVMatrix@geom@@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEBA_KXZ PROC ; std::allocator<gfxu::VertexUVRGBA>::max_size, COMDAT

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	48 b8 aa aa aa
	aa aa aa aa 0a	 mov	 rax, 768614336404564650	; 0aaaaaaaaaaaaaaaH

; 629  : 		}

  0000a	c3		 ret	 0
?max_size@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEBA_KXZ ENDP ; std::allocator<gfxu::VertexUVRGBA>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator@VMatrix@geom@@@std@@QEBA?AV12@XZ
_TEXT	SEGMENT
this$dead$ = 8
__$ReturnUdt$ = 16
?select_on_container_copy_construction@?$allocator@VMatrix@geom@@@std@@QEBA?AV12@XZ PROC ; std::allocator<geom::Matrix>::select_on_container_copy_construction, COMDAT

; 545  : 		return (*this);

  00000	48 8b c2	 mov	 rax, rdx

; 546  : 		}

  00003	c3		 ret	 0
?select_on_container_copy_construction@?$allocator@VMatrix@geom@@@std@@QEBA?AV12@XZ ENDP ; std::allocator<geom::Matrix>::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@VMatrix@geom@@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
??0?$allocator@VMatrix@geom@@@std@@QEAA@AEBV01@@Z PROC	; std::allocator<geom::Matrix>::allocator<geom::Matrix>, COMDAT

; 570  : 		{	// construct by copying (do nothing)
; 571  : 		}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0?$allocator@VMatrix@geom@@@std@@QEAA@AEBV01@@Z ENDP	; std::allocator<geom::Matrix>::allocator<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA_KXZ PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::max_size, COMDAT

; 914  : 		return (_Mytraits::max_size(*this));

  00000	48 b8 ff ff ff
	ff ff ff ff 03	 mov	 rax, 288230376151711743	; 03ffffffffffffffH

; 915  : 		}

  0000a	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEBA_KXZ ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@PEAVMatrix@geom@@@std@@QEAAPEAPEAVMatrix@geom@@_K@Z
_TEXT	SEGMENT
this$dead$ = 48
_Count$ = 56
?allocate@?$allocator@PEAVMatrix@geom@@@std@@QEAAPEAPEAVMatrix@geom@@_K@Z PROC ; std::allocator<geom::Matrix * __ptr64>::allocate, COMDAT

; 590  : 		{	// allocate array of _Count elements

$LN13:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 23   : 	void *_Ptr = 0;

  00004	33 c0		 xor	 eax, eax

; 24   : 
; 25   : 	if (_Count == 0)

  00006	48 85 d2	 test	 rdx, rdx
  00009	74 21		 je	 SHORT $LN4@allocate

; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  0000b	48 b8 ff ff ff
	ff ff ff ff 1f	 mov	 rax, 2305843009213693951 ; 1fffffffffffffffH
  00015	48 3b d0	 cmp	 rdx, rax
  00018	77 17		 ja	 SHORT $LN11@allocate
  0001a	48 8d 0c d5 00
	00 00 00	 lea	 rcx, QWORD PTR [rdx*8]
  00022	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00027	48 85 c0	 test	 rax, rax
  0002a	74 05		 je	 SHORT $LN11@allocate
$LN4@allocate:

; 591  : 		return (_Allocate(_Count, (pointer)0));
; 592  : 		}

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
$LN11@allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00031	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00036	cc		 int	 3
$LN10@allocate:
?allocate@?$allocator@PEAVMatrix@geom@@@std@@QEAAPEAPEAVMatrix@geom@@_K@Z ENDP ; std::allocator<geom::Matrix * __ptr64>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=, COMDAT

; 640  : 		this->_Myoff += _Off;

  00000	48 01 51 10	 add	 QWORD PTR [rcx+16], rdx

; 641  : 		return (*this);

  00004	48 8b c1	 mov	 rax, rcx

; 642  : 		}

  00007	c3		 ret	 0
??Y?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAXPEBV?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@2@@Z
_TEXT	SEGMENT
this$ = 48
_Lock$1 = 56
_Pdeque$ = 56
?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAXPEBV?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@2@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Setcont, COMDAT

; 531  : 		{	// set container pointer

$LN11:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 146  : 		if (_Parent == 0)

  00004	48 85 d2	 test	 rdx, rdx
  00007	75 1e		 jne	 SHORT $LN4@Setcont

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00009	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  0000e	ba 03 00 00 00	 mov	 edx, 3
  00013	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00018	48 8d 4c 24 38	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  0001d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 533  : 		}

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
$LN4@Setcont:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 166  : 			_Myproxy = _Parent_proxy;

  00027	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0002a	48 89 01	 mov	 QWORD PTR [rcx], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 533  : 		}

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAXPEBV?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@2@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Setcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SA_KAEBV?$allocator@VMatrix@geom@@@2@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
?max_size@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SA_KAEBV?$allocator@VMatrix@geom@@@2@@Z PROC ; std::allocator_traits<std::allocator<geom::Matrix> >::max_size, COMDAT

; 762  : 		return (_Al.max_size());

  00000	48 b8 ff ff ff
	ff ff ff ff 03	 mov	 rax, 288230376151711743	; 03ffffffffffffffH

; 763  : 		}

  0000a	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SA_KAEBV?$allocator@VMatrix@geom@@@2@@Z ENDP ; std::allocator_traits<std::allocator<geom::Matrix> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@VMatrix@geom@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$dead$ = 8
?max_size@?$allocator@VMatrix@geom@@@std@@QEBA_KXZ PROC	; std::allocator<geom::Matrix>::max_size, COMDAT

; 628  : 		return ((size_t)(-1) / sizeof (_Ty));

  00000	48 b8 ff ff ff
	ff ff ff ff 03	 mov	 rax, 288230376151711743	; 03ffffffffffffffH

; 629  : 		}

  0000a	c3		 ret	 0
?max_size@?$allocator@VMatrix@geom@@@std@@QEBA_KXZ ENDP	; std::allocator<geom::Matrix>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h
;	COMDAT ??$put@VTaskVBOVAOSet@Tasks@@@?$VirtualList@VTask@Tasks@@$0BAA@$0BAAC@@@QEAAPEAVTask@Tasks@@VTaskVBOVAOSet@2@@Z
_TEXT	SEGMENT
this$ = 8
object$ = 16
??$put@VTaskVBOVAOSet@Tasks@@@?$VirtualList@VTask@Tasks@@$0BAA@$0BAAC@@@QEAAPEAVTask@Tasks@@VTaskVBOVAOSet@2@@Z PROC ; VirtualList<Tasks::Task,256,4098>::put<Tasks::TaskVBOVAOSet>, COMDAT

; 57   : 	A* put(B object)

  00000	44 8b 4a 08	 mov	 r9d, DWORD PTR [rdx+8]
  00004	44 8b 52 0c	 mov	 r10d, DWORD PTR [rdx+12]
  00008	4c 8b c1	 mov	 r8, rcx
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h

; 18   : 			if(pos + sizeof(A) <= size)

  0000b	8b 89 14 08 00
	00		 mov	 ecx, DWORD PTR [rcx+2068]
  00011	41 8b 90 10 08
	00 00		 mov	 edx, DWORD PTR [r8+2064]
  00018	48 8d 41 10	 lea	 rax, QWORD PTR [rcx+16]
  0001c	48 3b c2	 cmp	 rax, rdx
  0001f	77 28		 ja	 SHORT $LN8@put

; 19   : 			{
; 20   : 				A* mempos = (A*)(heap + pos);

  00021	49 8b 80 08 08
	00 00		 mov	 rax, QWORD PTR [r8+2056]
  00028	48 03 c1	 add	 rax, rcx

; 21   : 				new(mempos) A(object);

  0002b	74 12		 je	 SHORT $LN11@put
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7TaskVBOVAOSet@Tasks@@6B@
  00034	44 89 48 08	 mov	 DWORD PTR [rax+8], r9d
  00038	44 89 50 0c	 mov	 DWORD PTR [rax+12], r10d
  0003c	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN11@put:

; 22   : 				pos += sizeof(A);

  0003f	41 83 80 14 08
	00 00 10	 add	 DWORD PTR [r8+2068], 16

; 23   : 
; 24   : 				return mempos;

  00047	eb 02		 jmp	 SHORT $LN7@put
$LN8@put:

; 25   : 			}
; 26   : 			else
; 27   : 			{
; 28   : 				return nullptr;

  00049	33 c0		 xor	 eax, eax
$LN7@put:
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h

; 24   : 		if(count < size - 1)

  0004b	49 63 88 00 08
	00 00		 movsxd	 rcx, DWORD PTR [r8+2048]
  00052	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  00058	7d 0b		 jge	 SHORT $LN22@put

; 25   : 		{
; 26   : 			content[count++] = object;

  0005a	49 89 04 c8	 mov	 QWORD PTR [r8+rcx*8], rax
  0005e	41 ff 80 00 08
	00 00		 inc	 DWORD PTR [r8+2048]
$LN22@put:

; 58   : 	{
; 59   : 		A* pObject = MemUtil::MiniHeap::put(object);
; 60   : 		List::put(pObject);
; 61   : 		return pObject;
; 62   : 	}

  00065	f3 c3		 fatret	 0
??$put@VTaskVBOVAOSet@Tasks@@@?$VirtualList@VTask@Tasks@@$0BAA@$0BAAC@@@QEAAPEAVTask@Tasks@@VTaskVBOVAOSet@2@@Z ENDP ; VirtualList<Tasks::Task,256,4098>::put<Tasks::TaskVBOVAOSet>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBVVertexUVRGBA@gfxu@@@std@@YAPEBVVertexUVRGBA@gfxu@@AEBV12@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@$$CBVVertexUVRGBA@gfxu@@@std@@YAPEBVVertexUVRGBA@gfxu@@AEBV12@@Z PROC ; std::addressof<gfxu::VertexUVRGBA const >, COMDAT

; 86   : 	return (reinterpret_cast<_Ty *>(
; 87   : 		(&const_cast<char&>(
; 88   : 		reinterpret_cast<const volatile char&>(_Val)))));

  00000	48 8b c1	 mov	 rax, rcx

; 89   : 	}

  00003	c3		 ret	 0
??$addressof@$$CBVVertexUVRGBA@gfxu@@@std@@YAPEBVVertexUVRGBA@gfxu@@AEBV12@@Z ENDP ; std::addressof<gfxu::VertexUVRGBA const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@AEAV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEAV23@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_V0$ = 24
??$construct@VVertexUVRGBA@gfxu@@AEAV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEAV23@@Z PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA & __ptr64>, COMDAT

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 41		 je	 SHORT $LN11@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  00005	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00008	89 02		 mov	 DWORD PTR [rdx], eax
  0000a	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0000e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00011	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00015	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00018	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0001c	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  0001f	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00023	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00026	41 0f b6 40 14	 movzx	 eax, BYTE PTR [r8+20]
  0002b	88 42 14	 mov	 BYTE PTR [rdx+20], al
  0002e	41 0f b6 40 15	 movzx	 eax, BYTE PTR [r8+21]
  00033	88 42 15	 mov	 BYTE PTR [rdx+21], al
  00036	41 0f b6 40 16	 movzx	 eax, BYTE PTR [r8+22]
  0003b	88 42 16	 mov	 BYTE PTR [rdx+22], al
  0003e	41 0f b6 40 17	 movzx	 eax, BYTE PTR [r8+23]
  00043	88 42 17	 mov	 BYTE PTR [rdx+23], al
$LN11@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00046	f3 c3		 fatret	 0
??$construct@VVertexUVRGBA@gfxu@@AEAV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEAV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@AEBV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEBV23@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_V0$ = 24
??$construct@VVertexUVRGBA@gfxu@@AEBV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEBV23@@Z PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA const & __ptr64>, COMDAT

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 41		 je	 SHORT $LN11@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  00005	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00008	89 02		 mov	 DWORD PTR [rdx], eax
  0000a	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0000e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00011	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00015	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00018	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0001c	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  0001f	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00023	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00026	41 0f b6 40 14	 movzx	 eax, BYTE PTR [r8+20]
  0002b	88 42 14	 mov	 BYTE PTR [rdx+20], al
  0002e	41 0f b6 40 15	 movzx	 eax, BYTE PTR [r8+21]
  00033	88 42 15	 mov	 BYTE PTR [rdx+21], al
  00036	41 0f b6 40 16	 movzx	 eax, BYTE PTR [r8+22]
  0003b	88 42 16	 mov	 BYTE PTR [rdx+22], al
  0003e	41 0f b6 40 17	 movzx	 eax, BYTE PTR [r8+23]
  00043	88 42 17	 mov	 BYTE PTR [rdx+23], al
$LN11@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00046	f3 c3		 fatret	 0
??$construct@VVertexUVRGBA@gfxu@@AEBV12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEBV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QEAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QEAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEAV10@@Z PROC ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

  00000	48 8b c1	 mov	 rax, rcx

; 1777 : 	}

  00003	c3		 ret	 0
??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QEAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEAV10@@Z ENDP ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$move@AEAVMatrix@geom@@@std@@YA$$QEAVMatrix@geom@@AEAV12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAVMatrix@geom@@@std@@YA$$QEAVMatrix@geom@@AEAV12@@Z PROC ; std::move<geom::Matrix & __ptr64>, COMDAT

; 1791 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00000	48 8b c1	 mov	 rax, rcx

; 1792 : 	}

  00003	c3		 ret	 0
??$move@AEAVMatrix@geom@@@std@@YA$$QEAVMatrix@geom@@AEAV12@@Z ENDP ; std::move<geom::Matrix & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPEAVVertexUVRGBA@gfxu@@0AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
_Al$dead$ = 24
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPEAVVertexUVRGBA@gfxu@@0AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >, COMDAT

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 81   : 	}

  00000	c2 00 00	 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPEAVVertexUVRGBA@gfxu@@0AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector
;	COMDAT ??$_Umove@PEAVVertexUVRGBA@gfxu@@@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAPEAVVertexUVRGBA@gfxu@@PEAV23@00@Z
_TEXT	SEGMENT
this$dead$ = 64
_First$ = 72
_Last$ = 80
_Ptr$ = 88
??$_Umove@PEAVVertexUVRGBA@gfxu@@@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAPEAVVertexUVRGBA@gfxu@@PEAV23@00@Z PROC ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Umove<gfxu::VertexUVRGBA * __ptr64>, COMDAT

; 1557 : 		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)

$LN10:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	49 8b c0	 mov	 rax, r8
  00007	48 8b ca	 mov	 rcx, rdx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  0000a	4d 8b c1	 mov	 r8, r9
  0000d	48 8b d0	 mov	 rdx, rax
  00010	e8 00 00 00 00	 call	 ??$_Uninit_move@PEAVVertexUVRGBA@gfxu@@PEAV12@V?$allocator@VVertexUVRGBA@gfxu@@@std@@V12@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@00AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<gfxu::VertexUVRGBA * __ptr64,gfxu::VertexUVRGBA * __ptr64,std::allocator<gfxu::VertexUVRGBA>,gfxu::VertexUVRGBA>
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\vector

; 1562 : 		}

  00015	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00019	c3		 ret	 0
??$_Umove@PEAVVertexUVRGBA@gfxu@@@?$vector@VVertexUVRGBA@gfxu@@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@IEAAPEAVVertexUVRGBA@gfxu@@PEAV23@00@Z ENDP ; std::vector<gfxu::VertexUVRGBA,std::allocator<gfxu::VertexUVRGBA> >::_Umove<gfxu::VertexUVRGBA * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 56
$T5 = 56
$T6 = 56
$T7 = 56
$T8 = 80
$T9 = 80
$T10 = 80
$T11 = 104
$T12 = 112
$T13 = 112
$T14 = 136
$T15 = 136
$T16 = 160
$T17 = 160
$T18 = 184
$T19 = 184
$T20 = 256
$T21 = 256
this$ = 256
__$ReturnUdt$ = 264
_Oldsize$ = 272
_Where$ = 272
_First$ = 280
$T22 = 288
_Last$ = 288
??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 1568 : 		typename enable_if<_Is_iterator<_Iter>::value,

$LN92:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00007	57		 push	 rdi
  00008	41 54		 push	 r12
  0000a	41 55		 push	 r13
  0000c	41 56		 push	 r14
  0000e	41 57		 push	 r15
  00010	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  00017	48 c7 44 24 68
	fe ff ff ff	 mov	 QWORD PTR $T11[rsp], -2
  00020	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx
  00024	48 89 70 20	 mov	 QWORD PTR [rax+32], rsi
  00028	49 8b d9	 mov	 rbx, r9
  0002b	49 8b f8	 mov	 rdi, r8
  0002e	4c 8b ea	 mov	 r13, rdx
  00031	4c 8b f1	 mov	 r14, rcx

; 1569 : 			iterator>::type
; 1570 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1571 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1572 : 		size_type _Off = _Where - begin();

  00034	48 8d 54 24 38	 lea	 rdx, QWORD PTR $T7[rsp]
  00039	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin

; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 385  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 386  : 		if (_Mycont == 0
; 387  : 			|| this->_Myoff <= _Mycont->_Myoff)
; 388  : 		{	// report error
; 389  : 		_DEBUG_ERROR("deque iterator not decrementable");
; 390  : 		_SCL_SECURE_OUT_OF_RANGE;
; 391  : 		}
; 392  : 
; 393  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 394  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 395  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 396  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff < this->_Myoff);
; 397  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 398  : 
; 399  : 		--_Myoff;
; 400  : 		return (*this);
; 401  : 		}
; 402  : 
; 403  : 	_Myiter operator--(int)
; 404  : 		{	// postdecrement
; 405  : 		_Myiter _Tmp = *this;
; 406  : 		--*this;
; 407  : 		return (_Tmp);
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator+=(difference_type _Off)
; 411  : 		{	// increment by integer
; 412  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 413  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 414  : 		if (_Mycont == 0
; 415  : 			|| this->_Myoff + _Off < _Mycont->_Myoff
; 416  : 			|| _Mycont->_Myoff + _Mycont->_Mysize < this->_Myoff + _Off)
; 417  : 			{	// report error
; 418  : 			_DEBUG_ERROR("deque iterator + offset out of range");
; 419  : 			_SCL_SECURE_OUT_OF_RANGE;
; 420  : 			}
; 421  : 
; 422  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 423  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 424  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 425  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff + _Off
; 426  : 			&& this->_Myoff + _Off <= _Mycont->_Myoff + _Mycont->_Mysize);
; 427  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 428  : 
; 429  : 		_Myoff += _Off;
; 430  : 		return (*this);
; 431  : 		}
; 432  : 
; 433  : 	_Myiter operator+(difference_type _Off) const
; 434  : 		{	// return this + integer
; 435  : 		_Myiter _Tmp = *this;
; 436  : 		return (_Tmp += _Off);
; 437  : 		}
; 438  : 
; 439  : 	_Myiter& operator-=(difference_type _Off)
; 440  : 		{	// decrement by integer
; 441  : 		return (*this += -_Off);
; 442  : 		}
; 443  : 
; 444  : 	_Myiter operator-(difference_type _Off) const
; 445  : 		{	// return this - integer
; 446  : 		_Myiter _Tmp = *this;
; 447  : 		return (_Tmp -= _Off);
; 448  : 		}
; 449  : 
; 450  : 	difference_type operator-(const _Myiter& _Right) const
; 451  : 		{	// return difference of iterators
; 452  : 		_Compat(_Right);
; 453  : 		return (_Right._Myoff <= this->_Myoff
; 454  : 			? this->_Myoff - _Right._Myoff
; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));

  0003e	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00042	4c 8b 7f 10	 mov	 r15, QWORD PTR [rdi+16]
  00046	4c 2b f9	 sub	 r15, rcx

; 1573 : 
; 1574 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1575 : 		if (this->_Mysize < _Off)
; 1576 : 			_DEBUG_ERROR("deque insert iterator outside range");
; 1577 : 		_DEBUG_RANGE(_First, _Last);
; 1578 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1579 : 
; 1580 : 		size_type _Oldsize = this->_Mysize;

  00049	4d 8b 66 20	 mov	 r12, QWORD PTR [r14+32]
  0004d	4c 89 a4 24 10
	01 00 00	 mov	 QWORD PTR _Oldsize$[rsp], r12

; 456  : 		}
; 457  : 
; 458  : 	reference operator[](difference_type _Off) const
; 459  : 		{	// subscript
; 460  : 		return (*(*this + _Off));
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const _Myiter& _Right) const
; 464  : 		{	// test for iterator equality
; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);

  00055	48 8b bc 24 20
	01 00 00	 mov	 rdi, QWORD PTR _Last$[rsp]
  0005d	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  00061	48 39 43 10	 cmp	 QWORD PTR [rbx+16], rax

; 1581 : 
; 1582 : 		if (_First == _Last)

  00065	0f 84 ac 01 00
	00		 je	 $LN7@insert

; 1583 : 			;
; 1584 : 		else if (_Off <= this->_Mysize / 2)

  0006b	49 8b c4	 mov	 rax, r12
  0006e	48 d1 e8	 shr	 rax, 1
  00071	4c 3b f8	 cmp	 r15, rax
  00074	0f 87 ef 00 00
	00		 ja	 $LN14@insert
  0007a	66 0f 1f 44 00
	00		 npad	 6
$LL45@insert:

; 456  : 		}
; 457  : 
; 458  : 	reference operator[](difference_type _Off) const
; 459  : 		{	// subscript
; 460  : 		return (*(*this + _Off));
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const _Myiter& _Right) const
; 464  : 		{	// test for iterator equality
; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);

  00080	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  00084	48 39 43 10	 cmp	 QWORD PTR [rbx+16], rax

; 1585 : 			{	// closer to front, push to front then rotate
; 1586 : 			_TRY_BEGIN
; 1587 : 			for (; _First != _Last; ++_First)

  00088	74 19		 je	 SHORT $LN10@insert

; 1588 : 				push_front(*_First);	// prepend flipped

  0008a	48 8b cb	 mov	 rcx, rbx
  0008d	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEBVMatrix@geom@@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
  00092	48 8b d0	 mov	 rdx, rax
  00095	49 8b ce	 mov	 rcx, r14
  00098	e8 00 00 00 00	 call	 ?push_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_front

; 371  : 		++_Myoff;

  0009d	48 ff 43 10	 inc	 QWORD PTR [rbx+16]
  000a1	eb dd		 jmp	 SHORT $LL45@insert
$LN10@insert:

; 1589 : 
; 1590 : 			_CATCH_ALL
; 1591 : 			for (; _Oldsize < this->_Mysize; )
; 1592 : 				pop_front();	// restore old size, at least
; 1593 : 			_RERAISE;
; 1594 : 			_CATCH_END
; 1595 : 
; 1596 : 			size_type _Num = this->_Mysize - _Oldsize;

  000a3	49 8b 76 20	 mov	 rsi, QWORD PTR [r14+32]
  000a7	49 2b f4	 sub	 rsi, r12

; 1597 : 			_STD reverse(begin(), begin() + _Num);	// flip new stuff in place

  000aa	48 8d 54 24 38	 lea	 rdx, QWORD PTR $T6[rsp]
  000af	49 8b ce	 mov	 rcx, r14
  000b2	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  000b7	48 8b c8	 mov	 rcx, rax
  000ba	4c 8b c6	 mov	 r8, rsi
  000bd	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T3[rsp]
  000c2	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
  000c7	48 8b d8	 mov	 rbx, rax
  000ca	48 8d 54 24 70	 lea	 rdx, QWORD PTR $T13[rsp]
  000cf	49 8b ce	 mov	 rcx, r14
  000d2	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  000d7	48 8b d3	 mov	 rdx, rbx
  000da	48 8b c8	 mov	 rcx, rax
  000dd	e8 00 00 00 00	 call	 ??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z ; std::reverse<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >

; 1598 : 			_STD rotate(begin(), begin() + _Num, begin() + _Num + _Off);

  000e2	48 8d 44 24 20	 lea	 rax, QWORD PTR $T2[rsp]
  000e7	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR $T21[rsp], rax
  000ef	48 8d 54 24 70	 lea	 rdx, QWORD PTR $T12[rsp]
  000f4	49 8b ce	 mov	 rcx, r14
  000f7	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  000fc	48 8b c8	 mov	 rcx, rax
  000ff	4c 8b c6	 mov	 r8, rsi
  00102	48 8d 54 24 38	 lea	 rdx, QWORD PTR $T5[rsp]
  00107	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
  0010c	48 8b c8	 mov	 rcx, rax
  0010f	4d 8b c7	 mov	 r8, r15
  00112	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T2[rsp]
  00117	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
  0011c	48 8b f8	 mov	 rdi, rax
  0011f	48 8d 94 24 b8
	00 00 00	 lea	 rdx, QWORD PTR $T19[rsp]
  00127	49 8b ce	 mov	 rcx, r14
  0012a	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  0012f	48 8b c8	 mov	 rcx, rax
  00132	4c 8b c6	 mov	 r8, rsi
  00135	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR $T17[rsp]
  0013d	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
  00142	48 8b d8	 mov	 rbx, rax
  00145	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR $T15[rsp]
  0014d	49 8b ce	 mov	 rcx, r14
  00150	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  00155	90		 npad	 1
  00156	4c 8b cf	 mov	 r9, rdi
  00159	4c 8b c3	 mov	 r8, rbx
  0015c	48 8b d0	 mov	 rdx, rax
  0015f	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T10[rsp]

; 1599 : 			}
; 1600 : 		else

  00164	e9 a9 00 00 00	 jmp	 $LN91@insert
$LN14@insert:
  00169	0f 1f 80 00 00
	00 00		 npad	 7
$LL64@insert:

; 456  : 		}
; 457  : 
; 458  : 	reference operator[](difference_type _Off) const
; 459  : 		{	// subscript
; 460  : 		return (*(*this + _Off));
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const _Myiter& _Right) const
; 464  : 		{	// test for iterator equality
; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);

  00170	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  00174	48 39 43 10	 cmp	 QWORD PTR [rbx+16], rax

; 1601 : 			{	// closer to back
; 1602 : 			_TRY_BEGIN
; 1603 : 			for (; _First != _Last; ++_First)

  00178	74 19		 je	 SHORT $LN3@insert

; 1604 : 				push_back(*_First);	// append

  0017a	48 8b cb	 mov	 rcx, rbx
  0017d	e8 00 00 00 00	 call	 ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEBVMatrix@geom@@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
  00182	48 8b d0	 mov	 rdx, rax
  00185	49 8b ce	 mov	 rcx, r14
  00188	e8 00 00 00 00	 call	 ?push_back@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_back

; 371  : 		++_Myoff;

  0018d	48 ff 43 10	 inc	 QWORD PTR [rbx+16]
  00191	eb dd		 jmp	 SHORT $LL64@insert
$LN3@insert:

; 1605 : 
; 1606 : 			_CATCH_ALL
; 1607 : 			for (; _Oldsize < this->_Mysize; )
; 1608 : 				pop_back();	// restore old size, at least
; 1609 : 			_RERAISE;
; 1610 : 			_CATCH_END
; 1611 : 
; 1612 : 			_STD rotate(begin() + _Off, begin() + _Oldsize, end());

  00193	48 8d 44 24 20	 lea	 rax, QWORD PTR $T1[rsp]
  00198	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR $T20[rsp], rax
  001a0	48 8d 44 24 38	 lea	 rax, QWORD PTR $T4[rsp]
  001a5	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR $T22[rsp], rax
  001ad	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  001b2	49 8b ce	 mov	 rcx, r14
  001b5	e8 00 00 00 00	 call	 ?end@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::end
  001ba	48 8b f8	 mov	 rdi, rax
  001bd	48 8d 54 24 50	 lea	 rdx, QWORD PTR $T9[rsp]
  001c2	49 8b ce	 mov	 rcx, r14
  001c5	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  001ca	48 8b c8	 mov	 rcx, rax
  001cd	4d 8b c4	 mov	 r8, r12
  001d0	48 8d 54 24 38	 lea	 rdx, QWORD PTR $T4[rsp]
  001d5	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
  001da	48 8b d8	 mov	 rbx, rax
  001dd	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  001e5	49 8b ce	 mov	 rcx, r14
  001e8	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  001ed	48 8b c8	 mov	 rcx, rax
  001f0	4d 8b c7	 mov	 r8, r15
  001f3	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  001fb	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
  00200	90		 npad	 1
  00201	4c 8b cf	 mov	 r9, rdi
  00204	4c 8b c3	 mov	 r8, rbx
  00207	48 8b d0	 mov	 rdx, rax
  0020a	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR $T18[rsp]
$LN91@insert:
  00212	e8 00 00 00 00	 call	 ??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z ; std::rotate<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
$LN7@insert:

; 1613 : 			}
; 1614 : 		return (begin() + _Off);

  00217	48 8d 54 24 50	 lea	 rdx, QWORD PTR $T8[rsp]
  0021c	49 8b ce	 mov	 rcx, r14
  0021f	e8 00 00 00 00	 call	 ?begin@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::begin
  00224	48 8b c8	 mov	 rcx, rax
  00227	4d 8b c7	 mov	 r8, r15
  0022a	49 8b d5	 mov	 rdx, r13
  0022d	e8 00 00 00 00	 call	 ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
  00232	49 8b c5	 mov	 rax, r13

; 1615 : 		}

  00235	4c 8d 9c 24 d0
	00 00 00	 lea	 r11, QWORD PTR [rsp+208]
  0023d	49 8b 5b 38	 mov	 rbx, QWORD PTR [r11+56]
  00241	49 8b 73 48	 mov	 rsi, QWORD PTR [r11+72]
  00245	49 8b e3	 mov	 rsp, r11
  00248	41 5f		 pop	 r15
  0024a	41 5e		 pop	 r14
  0024c	41 5d		 pop	 r13
  0024e	41 5c		 pop	 r12
  00250	5f		 pop	 rdi
  00251	c3		 ret	 0
$LN90@insert:
??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 56
$T5 = 56
$T6 = 56
$T7 = 56
$T8 = 80
$T9 = 80
$T10 = 80
$T11 = 104
$T12 = 112
$T13 = 112
$T14 = 136
$T15 = 136
$T16 = 160
$T17 = 160
$T18 = 184
$T19 = 184
$T20 = 256
$T21 = 256
this$ = 256
__$ReturnUdt$ = 264
_Oldsize$ = 272
_Where$ = 272
_First$ = 280
$T22 = 288
_Last$ = 288
?catch$0@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA PROC ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >'::`1'::catch$0

; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}
; 1483 : 
; 1484 : 	void push_back(const value_type& _Val)
; 1485 : 		{	// insert element at end
; 1486 : 		this->_Orphan_all();
; 1487 : 		_PUSH_BACK_BEGIN;
; 1488 : 		this->_Getal().construct(
; 1489 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1490 : 		_PUSH_BACK_END;
; 1491 : 		}
; 1492 : 
; 1493 : 	void pop_back()
; 1494 : 		{	// erase element at end
; 1495 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1496 : 		if (empty())
; 1497 : 			_DEBUG_ERROR("deque empty before pop");
; 1498 : 		else
; 1499 : 			{	// something to erase, do it
; 1500 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1501 : 			_Orphan_off(_Newoff);
; 1502 : 			size_type _Block = this->_Getblock(_Newoff);
; 1503 : 			this->_Getal().destroy(
; 1504 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1505 : 			if (--this->_Mysize == 0)
; 1506 : 				this->_Myoff = 0;
; 1507 : 			}
; 1508 : 
; 1509 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1510 : 		if (!empty())
; 1511 : 			{	// something to erase, do it
; 1512 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1513 : 			size_type _Block = this->_Getblock(_Newoff);
; 1514 : 			this->_Getal().destroy(
; 1515 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1516 : 			if (--this->_Mysize == 0)
; 1517 : 				this->_Myoff = 0;
; 1518 : 			}
; 1519 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1520 : 		}
; 1521 : 
; 1522 : 	template<class _Iter>
; 1523 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1524 : 			void>::type
; 1525 : 		assign(_Iter _First, _Iter _Last)
; 1526 : 		{	// assign [_First, _Last), input iterators
; 1527 : 		erase(begin(), end());
; 1528 : 		insert(begin(), _First, _Last);
; 1529 : 		}
; 1530 : 
; 1531 : 	void assign(size_type _Count, const value_type& _Val)
; 1532 : 		{	// assign _Count * _Val
; 1533 : 		_Assign_n(_Count, _Val);
; 1534 : 		}
; 1535 : 
; 1536 : 	iterator insert(const_iterator _Where,
; 1537 : 		const value_type& _Val)
; 1538 : 		{	// insert _Val at _Where
; 1539 : 		size_type _Off = _Where - begin();
; 1540 : 
; 1541 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1542 : 		if (this->_Mysize < _Off)
; 1543 : 			_DEBUG_ERROR("deque insert iterator outside range");
; 1544 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1545 : 
; 1546 : 		if (_Off <= this->_Mysize / 2)
; 1547 : 			{	// closer to front, push to front then copy
; 1548 : 			push_front(_Val);
; 1549 : 			_STD rotate(begin(), begin() + 1, begin() + 1 + _Off);
; 1550 : 			}
; 1551 : 		else
; 1552 : 			{	// closer to back, push to back then copy
; 1553 : 			push_back(_Val);
; 1554 : 			_STD rotate(begin() + _Off, end() - 1, end());
; 1555 : 			}
; 1556 : 		return (begin() + _Off);
; 1557 : 		}
; 1558 : 
; 1559 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1560 : 		const value_type& _Val)
; 1561 : 		{	// insert _Count * _Val at _Where
; 1562 : 		size_type _Off = _Where - begin();
; 1563 : 		_Insert_n(_Where, _Count, _Val);
; 1564 : 		return (begin() + _Off);
; 1565 : 		}
; 1566 : 
; 1567 : 	template<class _Iter>
; 1568 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1569 : 			iterator>::type
; 1570 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1571 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1572 : 		size_type _Off = _Where - begin();
; 1573 : 
; 1574 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1575 : 		if (this->_Mysize < _Off)
; 1576 : 			_DEBUG_ERROR("deque insert iterator outside range");
; 1577 : 		_DEBUG_RANGE(_First, _Last);
; 1578 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1579 : 
; 1580 : 		size_type _Oldsize = this->_Mysize;
; 1581 : 
; 1582 : 		if (_First == _Last)
; 1583 : 			;
; 1584 : 		else if (_Off <= this->_Mysize / 2)
; 1585 : 			{	// closer to front, push to front then rotate
; 1586 : 			_TRY_BEGIN
; 1587 : 			for (; _First != _Last; ++_First)
; 1588 : 				push_front(*_First);	// prepend flipped
; 1589 : 
; 1590 : 			_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$0:

; 1591 : 			for (; _Oldsize < this->_Mysize; )

  0000d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00014	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00018	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Oldsize$[rbp]
  0001f	48 3b d0	 cmp	 rdx, rax
  00022	73 1d		 jae	 SHORT $LN8@catch$0
$LL9@catch$0:

; 1382 : 		return (this->_Mysize == 0);

  00024	48 85 c0	 test	 rax, rax

; 1383 : 		}
; 1384 : 
; 1385 : 	allocator_type get_allocator() const _NOEXCEPT
; 1386 : 		{	// return allocator object for values
; 1387 : 		return (this->_Getal());
; 1388 : 		}
; 1389 : 
; 1390 : 	const_reference at(size_type _Pos) const
; 1391 : 		{	// subscript nonmutable sequence with checking
; 1392 : 		if (this->_Mysize <= _Pos)
; 1393 : 			_Xran();
; 1394 : 		return (*(begin() + _Pos));
; 1395 : 		}
; 1396 : 
; 1397 : 	reference at(size_type _Pos)
; 1398 : 		{	// subscript mutable sequence with checking
; 1399 : 		if (this->_Mysize <= _Pos)
; 1400 : 			_Xran();
; 1401 : 		return (*(begin() + _Pos));
; 1402 : 		}
; 1403 : 
; 1404 : 	const_reference operator[](size_type _Pos) const
; 1405 : 		{	// subscript nonmutable sequence
; 1406 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1407 : 		if (this->_Mysize <= _Pos)
; 1408 : 			_DEBUG_ERROR("deque subscript out of range");
; 1409 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1410 : 
; 1411 : 		return (*(begin() + _Pos));
; 1412 : 		}
; 1413 : 
; 1414 : 	reference operator[](size_type _Pos)
; 1415 : 		{	// subscript mutable sequence
; 1416 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1417 : 		if (this->_Mysize <= _Pos)
; 1418 : 			_DEBUG_ERROR("deque subscript out of range");
; 1419 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1420 : 
; 1421 : 		return (*(begin() + _Pos));
; 1422 : 		}
; 1423 : 
; 1424 : 	reference front()
; 1425 : 		{	// return first element of mutable sequence
; 1426 : 		return (*begin());
; 1427 : 		}
; 1428 : 
; 1429 : 	const_reference front() const
; 1430 : 		{	// return first element of nonmutable sequence
; 1431 : 		return (*begin());
; 1432 : 		}
; 1433 : 
; 1434 : 	reference back()
; 1435 : 		{	// return last element of mutable sequence
; 1436 : 		return (*(end() - 1));
; 1437 : 		}
; 1438 : 
; 1439 : 	const_reference back() const
; 1440 : 		{	// return last element of nonmutable sequence
; 1441 : 		return (*(end() - 1));
; 1442 : 		}
; 1443 : 
; 1444 : 	void push_front(const value_type& _Val)
; 1445 : 		{	// insert element at beginning
; 1446 : 		this->_Orphan_all();
; 1447 : 		_PUSH_FRONT_BEGIN;
; 1448 : 		this->_Getal().construct(
; 1449 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1450 : 		_PUSH_FRONT_END;
; 1451 : 		}
; 1452 : 
; 1453 : 	void pop_front()
; 1454 : 		{	// erase element at beginning
; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (empty())
; 1457 : 			_DEBUG_ERROR("deque empty before pop");
; 1458 : 		else
; 1459 : 			{	// something to erase, do it
; 1460 : 			_Orphan_off(this->_Myoff);
; 1461 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1462 : 			this->_Getal().destroy(
; 1463 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1464 : 			if (--this->_Mysize == 0)
; 1465 : 				this->_Myoff = 0;
; 1466 : 			else
; 1467 : 				++this->_Myoff;
; 1468 : 			}
; 1469 : 
; 1470 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 		if (!empty())

  00027	74 0f		 je	 SHORT $LN53@catch$0

; 1472 : 			{	// something to erase, do it
; 1473 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1474 : 			this->_Getal().destroy(
; 1475 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1476 : 			if (--this->_Mysize == 0)

  00029	48 ff c8	 dec	 rax
  0002c	75 06		 jne	 SHORT $LN54@catch$0

; 1477 : 				this->_Myoff = 0;

  0002e	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 1478 : 			else

  00032	eb 04		 jmp	 SHORT $LN53@catch$0
$LN54@catch$0:

; 1479 : 				++this->_Myoff;

  00034	48 ff 41 18	 inc	 QWORD PTR [rcx+24]
$LN53@catch$0:

; 1591 : 			for (; _Oldsize < this->_Mysize; )

  00038	48 3b d0	 cmp	 rdx, rax
  0003b	72 e7		 jb	 SHORT $LL9@catch$0
  0003d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN8@catch$0:

; 1592 : 				pop_front();	// restore old size, at least
; 1593 : 			_RERAISE;

  00041	33 d2		 xor	 edx, edx
  00043	33 c9		 xor	 ecx, ecx
  00045	e8 00 00 00 00	 call	 _CxxThrowException
  0004a	90		 npad	 1
?catch$0@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA ENDP ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 56
$T5 = 56
$T6 = 56
$T7 = 56
$T8 = 80
$T9 = 80
$T10 = 80
$T11 = 104
$T12 = 112
$T13 = 112
$T14 = 136
$T15 = 136
$T16 = 160
$T17 = 160
$T18 = 184
$T19 = 184
$T20 = 256
$T21 = 256
this$ = 256
__$ReturnUdt$ = 264
_Oldsize$ = 272
_Where$ = 272
_First$ = 280
$T22 = 288
_Last$ = 288
?dtor$2@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA PROC ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >'::`1'::dtor$2
  0004b	48 8b 8a 00 01
	00 00		 mov	 rcx, QWORD PTR $T21[rdx]
  00052	e9 00 00 00 00	 jmp	 ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
?dtor$2@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA ENDP ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 56
$T5 = 56
$T6 = 56
$T7 = 56
$T8 = 80
$T9 = 80
$T10 = 80
$T11 = 104
$T12 = 112
$T13 = 112
$T14 = 136
$T15 = 136
$T16 = 160
$T17 = 160
$T18 = 184
$T19 = 184
$T20 = 256
$T21 = 256
this$ = 256
__$ReturnUdt$ = 264
_Oldsize$ = 272
_Where$ = 272
_First$ = 280
$T22 = 288
_Last$ = 288
?catch$1@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA PROC ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >'::`1'::catch$1

; 1518 : 			}
; 1519 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1520 : 		}
; 1521 : 
; 1522 : 	template<class _Iter>
; 1523 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1524 : 			void>::type
; 1525 : 		assign(_Iter _First, _Iter _Last)
; 1526 : 		{	// assign [_First, _Last), input iterators
; 1527 : 		erase(begin(), end());
; 1528 : 		insert(begin(), _First, _Last);
; 1529 : 		}
; 1530 : 
; 1531 : 	void assign(size_type _Count, const value_type& _Val)
; 1532 : 		{	// assign _Count * _Val
; 1533 : 		_Assign_n(_Count, _Val);
; 1534 : 		}
; 1535 : 
; 1536 : 	iterator insert(const_iterator _Where,
; 1537 : 		const value_type& _Val)
; 1538 : 		{	// insert _Val at _Where
; 1539 : 		size_type _Off = _Where - begin();
; 1540 : 
; 1541 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1542 : 		if (this->_Mysize < _Off)
; 1543 : 			_DEBUG_ERROR("deque insert iterator outside range");
; 1544 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1545 : 
; 1546 : 		if (_Off <= this->_Mysize / 2)
; 1547 : 			{	// closer to front, push to front then copy
; 1548 : 			push_front(_Val);
; 1549 : 			_STD rotate(begin(), begin() + 1, begin() + 1 + _Off);
; 1550 : 			}
; 1551 : 		else
; 1552 : 			{	// closer to back, push to back then copy
; 1553 : 			push_back(_Val);
; 1554 : 			_STD rotate(begin() + _Off, end() - 1, end());
; 1555 : 			}
; 1556 : 		return (begin() + _Off);
; 1557 : 		}
; 1558 : 
; 1559 : 	iterator insert(const_iterator _Where, size_type _Count,
; 1560 : 		const value_type& _Val)
; 1561 : 		{	// insert _Count * _Val at _Where
; 1562 : 		size_type _Off = _Where - begin();
; 1563 : 		_Insert_n(_Where, _Count, _Val);
; 1564 : 		return (begin() + _Off);
; 1565 : 		}
; 1566 : 
; 1567 : 	template<class _Iter>
; 1568 : 		typename enable_if<_Is_iterator<_Iter>::value,
; 1569 : 			iterator>::type
; 1570 : 		insert(const_iterator _Where, _Iter _First, _Iter _Last)
; 1571 : 		{	// insert [_First, _Last) at _Where, input iterators
; 1572 : 		size_type _Off = _Where - begin();
; 1573 : 
; 1574 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1575 : 		if (this->_Mysize < _Off)
; 1576 : 			_DEBUG_ERROR("deque insert iterator outside range");
; 1577 : 		_DEBUG_RANGE(_First, _Last);
; 1578 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1579 : 
; 1580 : 		size_type _Oldsize = this->_Mysize;
; 1581 : 
; 1582 : 		if (_First == _Last)
; 1583 : 			;
; 1584 : 		else if (_Off <= this->_Mysize / 2)
; 1585 : 			{	// closer to front, push to front then rotate
; 1586 : 			_TRY_BEGIN
; 1587 : 			for (; _First != _Last; ++_First)
; 1588 : 				push_front(*_First);	// prepend flipped
; 1589 : 
; 1590 : 			_CATCH_ALL
; 1591 : 			for (; _Oldsize < this->_Mysize; )
; 1592 : 				pop_front();	// restore old size, at least
; 1593 : 			_RERAISE;
; 1594 : 			_CATCH_END
; 1595 : 
; 1596 : 			size_type _Num = this->_Mysize - _Oldsize;
; 1597 : 			_STD reverse(begin(), begin() + _Num);	// flip new stuff in place
; 1598 : 			_STD rotate(begin(), begin() + _Num, begin() + _Num + _Off);
; 1599 : 			}
; 1600 : 		else
; 1601 : 			{	// closer to back
; 1602 : 			_TRY_BEGIN
; 1603 : 			for (; _First != _Last; ++_First)
; 1604 : 				push_back(*_First);	// append
; 1605 : 
; 1606 : 			_CATCH_ALL

  00057	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0005c	55		 push	 rbp
  0005d	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00061	48 8b ea	 mov	 rbp, rdx
__catch$??$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z$2:

; 1607 : 			for (; _Oldsize < this->_Mysize; )

  00064	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006b	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  0006f	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Oldsize$[rbp]
  00076	48 3b d0	 cmp	 rdx, rax
  00079	73 1c		 jae	 SHORT $LN1@catch$1
  0007b	0f 1f 44 00 00	 npad	 5
$LL2@catch$1:

; 1382 : 		return (this->_Mysize == 0);

  00080	48 85 c0	 test	 rax, rax

; 1383 : 		}
; 1384 : 
; 1385 : 	allocator_type get_allocator() const _NOEXCEPT
; 1386 : 		{	// return allocator object for values
; 1387 : 		return (this->_Getal());
; 1388 : 		}
; 1389 : 
; 1390 : 	const_reference at(size_type _Pos) const
; 1391 : 		{	// subscript nonmutable sequence with checking
; 1392 : 		if (this->_Mysize <= _Pos)
; 1393 : 			_Xran();
; 1394 : 		return (*(begin() + _Pos));
; 1395 : 		}
; 1396 : 
; 1397 : 	reference at(size_type _Pos)
; 1398 : 		{	// subscript mutable sequence with checking
; 1399 : 		if (this->_Mysize <= _Pos)
; 1400 : 			_Xran();
; 1401 : 		return (*(begin() + _Pos));
; 1402 : 		}
; 1403 : 
; 1404 : 	const_reference operator[](size_type _Pos) const
; 1405 : 		{	// subscript nonmutable sequence
; 1406 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1407 : 		if (this->_Mysize <= _Pos)
; 1408 : 			_DEBUG_ERROR("deque subscript out of range");
; 1409 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1410 : 
; 1411 : 		return (*(begin() + _Pos));
; 1412 : 		}
; 1413 : 
; 1414 : 	reference operator[](size_type _Pos)
; 1415 : 		{	// subscript mutable sequence
; 1416 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1417 : 		if (this->_Mysize <= _Pos)
; 1418 : 			_DEBUG_ERROR("deque subscript out of range");
; 1419 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1420 : 
; 1421 : 		return (*(begin() + _Pos));
; 1422 : 		}
; 1423 : 
; 1424 : 	reference front()
; 1425 : 		{	// return first element of mutable sequence
; 1426 : 		return (*begin());
; 1427 : 		}
; 1428 : 
; 1429 : 	const_reference front() const
; 1430 : 		{	// return first element of nonmutable sequence
; 1431 : 		return (*begin());
; 1432 : 		}
; 1433 : 
; 1434 : 	reference back()
; 1435 : 		{	// return last element of mutable sequence
; 1436 : 		return (*(end() - 1));
; 1437 : 		}
; 1438 : 
; 1439 : 	const_reference back() const
; 1440 : 		{	// return last element of nonmutable sequence
; 1441 : 		return (*(end() - 1));
; 1442 : 		}
; 1443 : 
; 1444 : 	void push_front(const value_type& _Val)
; 1445 : 		{	// insert element at beginning
; 1446 : 		this->_Orphan_all();
; 1447 : 		_PUSH_FRONT_BEGIN;
; 1448 : 		this->_Getal().construct(
; 1449 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1450 : 		_PUSH_FRONT_END;
; 1451 : 		}
; 1452 : 
; 1453 : 	void pop_front()
; 1454 : 		{	// erase element at beginning
; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (empty())
; 1457 : 			_DEBUG_ERROR("deque empty before pop");
; 1458 : 		else
; 1459 : 			{	// something to erase, do it
; 1460 : 			_Orphan_off(this->_Myoff);
; 1461 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1462 : 			this->_Getal().destroy(
; 1463 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1464 : 			if (--this->_Mysize == 0)
; 1465 : 				this->_Myoff = 0;
; 1466 : 			else
; 1467 : 				++this->_Myoff;
; 1468 : 			}
; 1469 : 
; 1470 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 		if (!empty())
; 1472 : 			{	// something to erase, do it
; 1473 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1474 : 			this->_Getal().destroy(
; 1475 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1476 : 			if (--this->_Mysize == 0)
; 1477 : 				this->_Myoff = 0;
; 1478 : 			else
; 1479 : 				++this->_Myoff;
; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}
; 1483 : 
; 1484 : 	void push_back(const value_type& _Val)
; 1485 : 		{	// insert element at end
; 1486 : 		this->_Orphan_all();
; 1487 : 		_PUSH_BACK_BEGIN;
; 1488 : 		this->_Getal().construct(
; 1489 : 			this->_Map[_Block] + _Newoff % _DEQUESIZ, _Val);
; 1490 : 		_PUSH_BACK_END;
; 1491 : 		}
; 1492 : 
; 1493 : 	void pop_back()
; 1494 : 		{	// erase element at end
; 1495 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1496 : 		if (empty())
; 1497 : 			_DEBUG_ERROR("deque empty before pop");
; 1498 : 		else
; 1499 : 			{	// something to erase, do it
; 1500 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1501 : 			_Orphan_off(_Newoff);
; 1502 : 			size_type _Block = this->_Getblock(_Newoff);
; 1503 : 			this->_Getal().destroy(
; 1504 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1505 : 			if (--this->_Mysize == 0)
; 1506 : 				this->_Myoff = 0;
; 1507 : 			}
; 1508 : 
; 1509 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1510 : 		if (!empty())

  00083	74 09		 je	 SHORT $LN72@catch$1

; 1511 : 			{	// something to erase, do it
; 1512 : 			size_type _Newoff = this->_Myoff + this->_Mysize - 1;
; 1513 : 			size_type _Block = this->_Getblock(_Newoff);
; 1514 : 			this->_Getal().destroy(
; 1515 : 				this->_Map[_Block] + _Newoff % _DEQUESIZ);
; 1516 : 			if (--this->_Mysize == 0)

  00085	48 ff c8	 dec	 rax
  00088	75 04		 jne	 SHORT $LN72@catch$1

; 1517 : 				this->_Myoff = 0;

  0008a	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
$LN72@catch$1:

; 1607 : 			for (; _Oldsize < this->_Mysize; )

  0008e	48 3b d0	 cmp	 rdx, rax
  00091	72 ed		 jb	 SHORT $LL2@catch$1
  00093	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN1@catch$1:

; 1608 : 				pop_back();	// restore old size, at least
; 1609 : 			_RERAISE;

  00097	33 d2		 xor	 edx, edx
  00099	33 c9		 xor	 ecx, ecx
  0009b	e8 00 00 00 00	 call	 _CxxThrowException
  000a0	90		 npad	 1
?catch$1@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA ENDP ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 56
$T5 = 56
$T6 = 56
$T7 = 56
$T8 = 80
$T9 = 80
$T10 = 80
$T11 = 104
$T12 = 112
$T13 = 112
$T14 = 136
$T15 = 136
$T16 = 160
$T17 = 160
$T18 = 184
$T19 = 184
$T20 = 256
$T21 = 256
this$ = 256
__$ReturnUdt$ = 264
_Oldsize$ = 272
_Where$ = 272
_First$ = 280
$T22 = 288
_Last$ = 288
?dtor$5@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA PROC ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >'::`1'::dtor$5
  000a1	48 8b 8a 00 01
	00 00		 mov	 rcx, QWORD PTR $T20[rdx]
  000a8	e9 00 00 00 00	 jmp	 ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
?dtor$5@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA ENDP ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 56
$T5 = 56
$T6 = 56
$T7 = 56
$T8 = 80
$T9 = 80
$T10 = 80
$T11 = 104
$T12 = 112
$T13 = 112
$T14 = 136
$T15 = 136
$T16 = 160
$T17 = 160
$T18 = 184
$T19 = 184
$T20 = 256
$T21 = 256
this$ = 256
__$ReturnUdt$ = 264
_Oldsize$ = 272
_Where$ = 272
_First$ = 280
$T22 = 288
_Last$ = 288
?dtor$6@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA PROC ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >'::`1'::dtor$6
  000ad	48 8b 8a 20 01
	00 00		 mov	 rcx, QWORD PTR $T22[rdx]
  000b4	e9 00 00 00 00	 jmp	 ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
?dtor$6@?0???$insert@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@V?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@00@Z@4HA ENDP ; `std::deque<geom::Matrix,std::allocator<geom::Matrix> >::insert<std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@VMatrix@geom@@@std@@YA$$QEAVMatrix@geom@@AEAV12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@VMatrix@geom@@@std@@YA$$QEAVMatrix@geom@@AEAV12@@Z PROC ; std::forward<geom::Matrix>, COMDAT

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

  00000	48 8b c1	 mov	 rax, rcx

; 1777 : 	}

  00003	c3		 ret	 0
??$forward@VMatrix@geom@@@std@@YA$$QEAVMatrix@geom@@AEAV12@@Z ENDP ; std::forward<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VMatrix@geom@@V12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@$$QEAV23@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_V0$ = 24
??$construct@VMatrix@geom@@V12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@$$QEAV23@@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix>, COMDAT

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 6e		 je	 SHORT $LN11@construct
  00005	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00008	89 02		 mov	 DWORD PTR [rdx], eax
  0000a	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0000e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00011	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00015	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00018	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0001c	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  0001f	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00023	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00026	41 8b 40 14	 mov	 eax, DWORD PTR [r8+20]
  0002a	89 42 14	 mov	 DWORD PTR [rdx+20], eax
  0002d	41 8b 40 18	 mov	 eax, DWORD PTR [r8+24]
  00031	89 42 18	 mov	 DWORD PTR [rdx+24], eax
  00034	41 8b 40 1c	 mov	 eax, DWORD PTR [r8+28]
  00038	89 42 1c	 mov	 DWORD PTR [rdx+28], eax
  0003b	41 8b 40 20	 mov	 eax, DWORD PTR [r8+32]
  0003f	89 42 20	 mov	 DWORD PTR [rdx+32], eax
  00042	41 8b 40 24	 mov	 eax, DWORD PTR [r8+36]
  00046	89 42 24	 mov	 DWORD PTR [rdx+36], eax
  00049	41 8b 40 28	 mov	 eax, DWORD PTR [r8+40]
  0004d	89 42 28	 mov	 DWORD PTR [rdx+40], eax
  00050	41 8b 40 2c	 mov	 eax, DWORD PTR [r8+44]
  00054	89 42 2c	 mov	 DWORD PTR [rdx+44], eax
  00057	41 8b 40 30	 mov	 eax, DWORD PTR [r8+48]
  0005b	89 42 30	 mov	 DWORD PTR [rdx+48], eax
  0005e	41 8b 40 34	 mov	 eax, DWORD PTR [r8+52]
  00062	89 42 34	 mov	 DWORD PTR [rdx+52], eax
  00065	41 8b 40 38	 mov	 eax, DWORD PTR [r8+56]
  00069	89 42 38	 mov	 DWORD PTR [rdx+56], eax
  0006c	41 8b 40 3c	 mov	 eax, DWORD PTR [r8+60]
  00070	89 42 3c	 mov	 DWORD PTR [rdx+60], eax
$LN11@construct:

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00073	f3 c3		 fatret	 0
??$construct@VMatrix@geom@@V12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@$$QEAV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VMatrix@geom@@AEBV12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@AEBV23@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_V0$ = 24
??$construct@VMatrix@geom@@AEBV12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@AEBV23@@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix const & __ptr64>, COMDAT

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 6e		 je	 SHORT $LN11@construct
  00005	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00008	89 02		 mov	 DWORD PTR [rdx], eax
  0000a	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0000e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00011	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00015	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00018	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0001c	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  0001f	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00023	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00026	41 8b 40 14	 mov	 eax, DWORD PTR [r8+20]
  0002a	89 42 14	 mov	 DWORD PTR [rdx+20], eax
  0002d	41 8b 40 18	 mov	 eax, DWORD PTR [r8+24]
  00031	89 42 18	 mov	 DWORD PTR [rdx+24], eax
  00034	41 8b 40 1c	 mov	 eax, DWORD PTR [r8+28]
  00038	89 42 1c	 mov	 DWORD PTR [rdx+28], eax
  0003b	41 8b 40 20	 mov	 eax, DWORD PTR [r8+32]
  0003f	89 42 20	 mov	 DWORD PTR [rdx+32], eax
  00042	41 8b 40 24	 mov	 eax, DWORD PTR [r8+36]
  00046	89 42 24	 mov	 DWORD PTR [rdx+36], eax
  00049	41 8b 40 28	 mov	 eax, DWORD PTR [r8+40]
  0004d	89 42 28	 mov	 DWORD PTR [rdx+40], eax
  00050	41 8b 40 2c	 mov	 eax, DWORD PTR [r8+44]
  00054	89 42 2c	 mov	 DWORD PTR [rdx+44], eax
  00057	41 8b 40 30	 mov	 eax, DWORD PTR [r8+48]
  0005b	89 42 30	 mov	 DWORD PTR [rdx+48], eax
  0005e	41 8b 40 34	 mov	 eax, DWORD PTR [r8+52]
  00062	89 42 34	 mov	 DWORD PTR [rdx+52], eax
  00065	41 8b 40 38	 mov	 eax, DWORD PTR [r8+56]
  00069	89 42 38	 mov	 DWORD PTR [rdx+56], eax
  0006c	41 8b 40 3c	 mov	 eax, DWORD PTR [r8+60]
  00070	89 42 3c	 mov	 DWORD PTR [rdx+60], eax
$LN11@construct:

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00073	f3 c3		 fatret	 0
??$construct@VMatrix@geom@@AEBV12@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@AEBV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$dead$ = 16
??$destroy@VMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::destroy<geom::Matrix>, COMDAT

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);
; 910  : 		}

  00000	c2 00 00	 ret	 0
??$destroy@VMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAVMatrix@geom@@@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::destroy<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@QEAA@AEBU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Right$dead$ = 16
??$?0U?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@QEAA@AEBU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> >::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> ><std::_Wrap_alloc<std::allocator<geom::Matrix> > >, COMDAT

; 847  : 		}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??$?0U?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@QEAA@AEBU?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> >::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> ><std::_Wrap_alloc<std::allocator<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PEAVMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAPEAVMatrix@geom@@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$dead$ = 16
??$destroy@PEAVMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAPEAVMatrix@geom@@@Z PROC ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::destroy<geom::Matrix * __ptr64>, COMDAT

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);
; 910  : 		}

  00000	c2 00 00	 ret	 0
??$destroy@PEAVMatrix@geom@@@?$_Wrap_alloc@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXPEAPEAVMatrix@geom@@@Z ENDP ; std::_Wrap_alloc<std::allocator<geom::Matrix> >::destroy<geom::Matrix * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PEAPEAVMatrix@geom@@PEAPEAV12@U?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@00AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
_Al$dead$ = 72
??$_Uninitialized_copy@PEAPEAVMatrix@geom@@PEAPEAV12@U?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@00AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z PROC ; std::_Uninitialized_copy<geom::Matrix * __ptr64 * __ptr64,geom::Matrix * __ptr64 * __ptr64,std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> > >, COMDAT

; 414  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00006	48 2b d1	 sub	 rdx, rcx

; 414  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00009	49 8b c0	 mov	 rax, r8

; 404  : 	size_t _Count = (size_t)(_Last - _First);

  0000c	48 c1 fa 03	 sar	 rdx, 3

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00010	48 8d 1c d5 00
	00 00 00	 lea	 rbx, QWORD PTR [rdx*8]
  00018	48 8b d1	 mov	 rdx, rcx
  0001b	48 8b c8	 mov	 rcx, rax
  0001e	4c 8b c3	 mov	 r8, rbx
  00021	e8 00 00 00 00	 call	 memmove
  00026	48 03 c3	 add	 rax, rbx

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 416  : 		_Ptr_cat(_First, _Dest)));
; 417  : 	}

  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5b		 pop	 rbx
  0002e	c3		 ret	 0
??$_Uninitialized_copy@PEAPEAVMatrix@geom@@PEAPEAV12@U?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@00AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z ENDP ; std::_Uninitialized_copy<geom::Matrix * __ptr64 * __ptr64,geom::Matrix * __ptr64 * __ptr64,std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_default_fill_n@PEAPEAVMatrix@geom@@_KU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Count$ = 24
_Al$dead$ = 32
??$_Uninitialized_default_fill_n@PEAPEAVMatrix@geom@@_KU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z PROC ; std::_Uninitialized_default_fill_n<geom::Matrix * __ptr64 * __ptr64,unsigned __int64,std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> > >, COMDAT

; 668  : 	{	// copy _Count * _Val_type(_First)() to raw _First, using _Al

$LN18:
  00000	48 83 ec 08	 sub	 rsp, 8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00004	48 85 d2	 test	 rdx, rdx
  00007	74 13		 je	 SHORT $LN11@Uninitiali
  00009	48 89 3c 24	 mov	 QWORD PTR [rsp], rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 660  : 	_Fill_n(_First, _Count, (_Valty)0);

  0000d	48 8b f9	 mov	 rdi, rcx
  00010	33 c0		 xor	 eax, eax
  00012	48 8b ca	 mov	 rcx, rdx
  00015	f3 48 ab	 rep stosq
  00018	48 8b 3c 24	 mov	 rdi, QWORD PTR [rsp]
$LN11@Uninitiali:

; 669  : 	_Uninit_def_fill_n(_First, _Count, _Al,
; 670  : 		_Val_type(_First), _Ptr_cat(_First, _First));
; 671  : 	}

  0001c	48 83 c4 08	 add	 rsp, 8
  00020	c3		 ret	 0
??$_Uninitialized_default_fill_n@PEAPEAVMatrix@geom@@_KU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z ENDP ; std::_Uninitialized_default_fill_n<geom::Matrix * __ptr64 * __ptr64,unsigned __int64,std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@0AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
_Al$dead$ = 24
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@0AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> > >, COMDAT

; 80   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 81   : 	}

  00000	c2 00 00	 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@0AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@VVertexUVRGBA@gfxu@@@std@@YAPEAVVertexUVRGBA@gfxu@@_KPEAV12@@Z
_TEXT	SEGMENT
_Count$ = 48
??$_Allocate@VVertexUVRGBA@gfxu@@@std@@YAPEAVVertexUVRGBA@gfxu@@_KPEAV12@@Z PROC ; std::_Allocate<gfxu::VertexUVRGBA>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

$LN14:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)
; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00004	48 b8 aa aa aa
	aa aa aa aa 0a	 mov	 rax, 768614336404564650	; 0aaaaaaaaaaaaaaaH
  0000e	48 3b c8	 cmp	 rcx, rax
  00011	77 17		 ja	 SHORT $LN12@Allocate
  00013	48 8d 0c 49	 lea	 rcx, QWORD PTR [rcx+rcx*2]
  00017	48 c1 e1 03	 shl	 rcx, 3
  0001b	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00020	48 85 c0	 test	 rax, rax
  00023	74 05		 je	 SHORT $LN12@Allocate

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
$LN12@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002a	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  0002f	cc		 int	 3
$LN11@Allocate:
??$_Allocate@VVertexUVRGBA@gfxu@@@std@@YAPEAVVertexUVRGBA@gfxu@@_KPEAV12@@Z ENDP ; std::_Allocate<gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@VMatrix@geom@@@std@@YAPEAVMatrix@geom@@_KPEAV12@@Z
_TEXT	SEGMENT
_Count$ = 48
??$_Allocate@VMatrix@geom@@@std@@YAPEAVMatrix@geom@@_KPEAV12@@Z PROC ; std::_Allocate<geom::Matrix>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

$LN14:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)
; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00004	48 b8 ff ff ff
	ff ff ff ff 03	 mov	 rax, 288230376151711743	; 03ffffffffffffffH
  0000e	48 3b c8	 cmp	 rcx, rax
  00011	77 13		 ja	 SHORT $LN12@Allocate
  00013	48 c1 e1 06	 shl	 rcx, 6
  00017	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0001c	48 85 c0	 test	 rax, rax
  0001f	74 05		 je	 SHORT $LN12@Allocate

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
$LN12@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  00026	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  0002b	cc		 int	 3
$LN11@Allocate:
??$_Allocate@VMatrix@geom@@@std@@YAPEAVMatrix@geom@@_KPEAV12@@Z ENDP ; std::_Allocate<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Allocate@PEAVMatrix@geom@@@std@@YAPEAPEAVMatrix@geom@@_KPEAPEAV12@@Z
_TEXT	SEGMENT
_Count$ = 48
??$_Allocate@PEAVMatrix@geom@@@std@@YAPEAPEAVMatrix@geom@@_KPEAPEAV12@@Z PROC ; std::_Allocate<geom::Matrix * __ptr64>, COMDAT

; 22   : 	{	// allocate storage for _Count elements of type _Ty

$LN14:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 23   : 	void *_Ptr = 0;
; 24   : 
; 25   : 	if (_Count == 0)
; 26   : 		;
; 27   : 	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00004	48 b8 ff ff ff
	ff ff ff ff 1f	 mov	 rax, 2305843009213693951 ; 1fffffffffffffffH
  0000e	48 3b c8	 cmp	 rcx, rax
  00011	77 17		 ja	 SHORT $LN12@Allocate
  00013	48 8d 0c cd 00
	00 00 00	 lea	 rcx, QWORD PTR [rcx*8]
  0001b	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00020	48 85 c0	 test	 rax, rax
  00023	74 05		 je	 SHORT $LN12@Allocate

; 30   : 
; 31   : 	return ((_Ty *)_Ptr);
; 32   : 	}

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
$LN12@Allocate:

; 29   : 		_Xbad_alloc();	// report no memory

  0002a	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  0002f	cc		 int	 3
$LN11@Allocate:
??$_Allocate@PEAVMatrix@geom@@@std@@YAPEAPEAVMatrix@geom@@_KPEAPEAV12@@Z ENDP ; std::_Allocate<geom::Matrix * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0TaskVBOVAOSet@Tasks@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 8
__that$ = 16
??0TaskVBOVAOSet@Tasks@@QEAA@AEBV01@@Z PROC		; Tasks::TaskVBOVAOSet::TaskVBOVAOSet, COMDAT
  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7TaskVBOVAOSet@Tasks@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax
  0000a	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  0000d	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  00010	8b 42 0c	 mov	 eax, DWORD PTR [rdx+12]
  00013	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  00016	48 8b c1	 mov	 rax, rcx
  00019	c3		 ret	 0
??0TaskVBOVAOSet@Tasks@@QEAA@AEBV01@@Z ENDP		; Tasks::TaskVBOVAOSet::TaskVBOVAOSet
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0Task@Tasks@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 8
__that$dead$ = 16
??0Task@Tasks@@QEAA@AEBV01@@Z PROC			; Tasks::Task::Task, COMDAT
  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Task@Tasks@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax
  0000a	48 8b c1	 mov	 rax, rcx
  0000d	c3		 ret	 0
??0Task@Tasks@@QEAA@AEBV01@@Z ENDP			; Tasks::Task::Task
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?push_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?push_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_front, COMDAT

; 1445 : 		{	// insert element at beginning

$LN45:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1447 : 		_PUSH_FRONT_BEGIN;

  00015	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00019	48 8b f2	 mov	 rsi, rdx
  0001c	48 8b d9	 mov	 rbx, rcx
  0001f	48 ff c0	 inc	 rax
  00022	48 39 41 10	 cmp	 QWORD PTR [rcx+16], rax
  00026	77 05		 ja	 SHORT $LN2@push_front
  00028	e8 00 00 00 00	 call	 ?_Growmap@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@IEAAX_K@Z ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::_Growmap
$LN2@push_front:
  0002d	48 8b 7b 10	 mov	 rdi, QWORD PTR [rbx+16]
  00031	48 8d 47 ff	 lea	 rax, QWORD PTR [rdi-1]
  00035	48 21 43 18	 and	 QWORD PTR [rbx+24], rax
  00039	48 0f 45 7b 18	 cmovne	 rdi, QWORD PTR [rbx+24]
  0003e	48 ff cf	 dec	 rdi

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00041	48 23 c7	 and	 rax, rdi

; 1447 : 		_PUSH_FRONT_BEGIN;

  00044	4c 8d 34 c5 00
	00 00 00	 lea	 r14, QWORD PTR [rax*8]
  0004c	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00050	49 83 3c 06 00	 cmp	 QWORD PTR [r14+rax], 0
  00055	75 1e		 jne	 SHORT $LN1@push_front
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 28   : 		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)

  00057	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0005c	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00061	48 8b c8	 mov	 rcx, rax
  00064	48 85 c0	 test	 rax, rax
  00067	0f 84 91 00 00
	00		 je	 $LN43@push_front
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1447 : 		_PUSH_FRONT_BEGIN;

  0006d	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00071	49 89 0c 06	 mov	 QWORD PTR [r14+rax], rcx
$LN1@push_front:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  00075	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00079	49 8b 0c 06	 mov	 rcx, QWORD PTR [r14+rax]
  0007d	48 85 c9	 test	 rcx, rcx
  00080	74 5e		 je	 SHORT $LN38@push_front
  00082	8b 06		 mov	 eax, DWORD PTR [rsi]
  00084	89 01		 mov	 DWORD PTR [rcx], eax
  00086	8b 46 04	 mov	 eax, DWORD PTR [rsi+4]
  00089	89 41 04	 mov	 DWORD PTR [rcx+4], eax
  0008c	8b 46 08	 mov	 eax, DWORD PTR [rsi+8]
  0008f	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  00092	8b 46 0c	 mov	 eax, DWORD PTR [rsi+12]
  00095	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  00098	8b 46 10	 mov	 eax, DWORD PTR [rsi+16]
  0009b	89 41 10	 mov	 DWORD PTR [rcx+16], eax
  0009e	8b 46 14	 mov	 eax, DWORD PTR [rsi+20]
  000a1	89 41 14	 mov	 DWORD PTR [rcx+20], eax
  000a4	8b 46 18	 mov	 eax, DWORD PTR [rsi+24]
  000a7	89 41 18	 mov	 DWORD PTR [rcx+24], eax
  000aa	8b 46 1c	 mov	 eax, DWORD PTR [rsi+28]
  000ad	89 41 1c	 mov	 DWORD PTR [rcx+28], eax
  000b0	8b 46 20	 mov	 eax, DWORD PTR [rsi+32]
  000b3	89 41 20	 mov	 DWORD PTR [rcx+32], eax
  000b6	8b 46 24	 mov	 eax, DWORD PTR [rsi+36]
  000b9	89 41 24	 mov	 DWORD PTR [rcx+36], eax
  000bc	8b 46 28	 mov	 eax, DWORD PTR [rsi+40]
  000bf	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  000c2	8b 46 2c	 mov	 eax, DWORD PTR [rsi+44]
  000c5	89 41 2c	 mov	 DWORD PTR [rcx+44], eax
  000c8	8b 46 30	 mov	 eax, DWORD PTR [rsi+48]
  000cb	89 41 30	 mov	 DWORD PTR [rcx+48], eax
  000ce	8b 46 34	 mov	 eax, DWORD PTR [rsi+52]
  000d1	89 41 34	 mov	 DWORD PTR [rcx+52], eax
  000d4	8b 46 38	 mov	 eax, DWORD PTR [rsi+56]
  000d7	89 41 38	 mov	 DWORD PTR [rcx+56], eax
  000da	8b 46 3c	 mov	 eax, DWORD PTR [rsi+60]
  000dd	89 41 3c	 mov	 DWORD PTR [rcx+60], eax
$LN38@push_front:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 1450 : 		_PUSH_FRONT_END;

  000e0	48 ff 43 20	 inc	 QWORD PTR [rbx+32]

; 1451 : 		}

  000e4	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  000e9	48 89 7b 18	 mov	 QWORD PTR [rbx+24], rdi
  000ed	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000f2	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000f7	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000fb	41 5e		 pop	 r14
  000fd	c3		 ret	 0
$LN43@push_front:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 29   : 		_Xbad_alloc();	// report no memory

  000fe	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
  00103	cc		 int	 3
$LN42@push_front:
?push_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXAEBVMatrix@geom@@@Z ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::push_front
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?pop_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?pop_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXXZ PROC ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::pop_front, COMDAT

; 1382 : 		return (this->_Mysize == 0);

  00000	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00004	48 85 c0	 test	 rax, rax

; 1455 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1456 : 		if (empty())
; 1457 : 			_DEBUG_ERROR("deque empty before pop");
; 1458 : 		else
; 1459 : 			{	// something to erase, do it
; 1460 : 			_Orphan_off(this->_Myoff);
; 1461 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1462 : 			this->_Getal().destroy(
; 1463 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1464 : 			if (--this->_Mysize == 0)
; 1465 : 				this->_Myoff = 0;
; 1466 : 			else
; 1467 : 				++this->_Myoff;
; 1468 : 			}
; 1469 : 
; 1470 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1471 : 		if (!empty())

  00007	74 16		 je	 SHORT $LN1@pop_front

; 1472 : 			{	// something to erase, do it
; 1473 : 			size_type _Block = this->_Getblock(this->_Myoff);
; 1474 : 			this->_Getal().destroy(
; 1475 : 				this->_Map[_Block] + this->_Myoff % _DEQUESIZ);
; 1476 : 			if (--this->_Mysize == 0)

  00009	48 ff c8	 dec	 rax
  0000c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  00010	75 09		 jne	 SHORT $LN2@pop_front

; 1477 : 				this->_Myoff = 0;

  00012	48 c7 41 18 00
	00 00 00	 mov	 QWORD PTR [rcx+24], 0

; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}

  0001a	c3		 ret	 0
$LN2@pop_front:

; 1478 : 			else
; 1479 : 				++this->_Myoff;

  0001b	48 ff 41 18	 inc	 QWORD PTR [rcx+24]
$LN1@pop_front:

; 1480 : 			}
; 1481 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1482 : 		}

  0001f	f3 c3		 fatret	 0
?pop_front@?$deque@VMatrix@geom@@V?$allocator@VMatrix@geom@@@std@@@std@@QEAAXXZ ENDP ; std::deque<geom::Matrix,std::allocator<geom::Matrix> >::pop_front
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\list.h
;	COMDAT ?put@?$List@PEAVTask@Tasks@@$0BAA@@@QEAAXPEAVTask@Tasks@@@Z
_TEXT	SEGMENT
this$ = 8
object$ = 16
?put@?$List@PEAVTask@Tasks@@$0BAA@@@QEAAXPEAVTask@Tasks@@@Z PROC ; List<Tasks::Task * __ptr64,256>::put, COMDAT

; 24   : 		if(count < size - 1)

  00000	48 63 81 00 08
	00 00		 movsxd	 rax, DWORD PTR [rcx+2048]
  00007	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0000c	7d 0a		 jge	 SHORT $LN1@put

; 25   : 		{
; 26   : 			content[count++] = object;

  0000e	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx
  00012	ff 81 00 08 00
	00		 inc	 DWORD PTR [rcx+2048]
$LN1@put:

; 27   : 		}
; 28   : 	}

  00018	f3 c3		 fatret	 0
?put@?$List@PEAVTask@Tasks@@$0BAA@@@QEAAXPEAVTask@Tasks@@@Z ENDP ; List<Tasks::Task * __ptr64,256>::put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z
_TEXT	SEGMENT
_Lock$1 = 48
_Lock$2 = 48
this$ = 48
__$ReturnUdt$ = 56
_Off$ = 64
??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+, COMDAT

; 645  : 		{	// return this + integer

$LN53:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000a	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  0000f	41 56		 push	 r14
  00011	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00015	48 8b 01	 mov	 rax, QWORD PTR [rcx]

; 118  : 		{	// copy an iterator

  00018	33 f6		 xor	 esi, esi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 645  : 		{	// return this + integer

  0001a	4d 8b f0	 mov	 r14, r8
  0001d	48 8b da	 mov	 rbx, rdx
  00020	48 8b f9	 mov	 rdi, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00023	48 85 c0	 test	 rax, rax
  00026	74 24		 je	 SHORT $LN16@operator

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  0002b	48 85 c0	 test	 rax, rax
  0002e	75 19		 jne	 SHORT $LN17@operator

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00030	8d 56 03	 lea	 edx, QWORD PTR [rsi+3]
  00033	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$2[rsp]
  00038	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  0003d	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$2[rsp]
  00042	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  00047	eb 03		 jmp	 SHORT $LN16@operator
$LN17@operator:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00049	48 8b 30	 mov	 rsi, QWORD PTR [rax]
$LN16@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 640  : 		this->_Myoff += _Off;

  0004c	48 8b 7f 10	 mov	 rdi, QWORD PTR [rdi+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 118  : 		{	// copy an iterator

  00050	48 c7 03 00 00
	00 00		 mov	 QWORD PTR [rbx], 0
  00057	48 c7 43 08 00
	00 00 00	 mov	 QWORD PTR [rbx+8], 0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 640  : 		this->_Myoff += _Off;

  0005f	49 03 fe	 add	 rdi, r14
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00062	48 85 f6	 test	 rsi, rsi
  00065	74 27		 je	 SHORT $LN51@operator

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00067	48 8b 06	 mov	 rax, QWORD PTR [rsi]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  0006a	48 85 c0	 test	 rax, rax
  0006d	75 19		 jne	 SHORT $LN41@operator

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0006f	8d 50 03	 lea	 edx, QWORD PTR [rax+3]
  00072	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  00077	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  0007c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  00081	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  00086	eb 06		 jmp	 SHORT $LN51@operator
$LN41@operator:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00088	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008b	48 89 03	 mov	 QWORD PTR [rbx], rax
$LN51@operator:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 648  : 		}

  0008e	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00093	48 89 7b 10	 mov	 QWORD PTR [rbx+16], rdi
  00097	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0009c	48 8b c3	 mov	 rax, rbx
  0009f	48 8b 5c 24 38	 mov	 rbx, QWORD PTR [rsp+56]
  000a4	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a8	41 5e		 pop	 r14
  000aa	c3		 ret	 0
??H?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??E?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++, COMDAT

; 355  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 356  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 357  : 		if (_Mycont == 0
; 358  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 359  : 		{	// report error
; 360  : 		_DEBUG_ERROR("deque iterator not incrementable");
; 361  : 		_SCL_SECURE_OUT_OF_RANGE;
; 362  : 		}
; 363  : 
; 364  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 365  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 366  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 367  : 		_SCL_SECURE_VALIDATE_RANGE(
; 368  : 			this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 369  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 370  : 
; 371  : 		++_Myoff;

  00000	48 ff 41 10	 inc	 QWORD PTR [rcx+16]

; 372  : 		return (*this);

  00004	48 8b c1	 mov	 rax, rcx

; 373  : 		}

  00007	c3		 ret	 0
??E?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??G?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??G?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-, COMDAT

; 452  : 		_Compat(_Right);
; 453  : 		return (_Right._Myoff <= this->_Myoff
; 454  : 			? this->_Myoff - _Right._Myoff
; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));

  00000	4c 8b 42 10	 mov	 r8, QWORD PTR [rdx+16]
  00004	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00008	49 2b c0	 sub	 rax, r8

; 456  : 		}

  0000b	c3		 ret	 0
??G?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??8?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??8?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator==, COMDAT

; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);

  00000	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00004	48 39 51 10	 cmp	 QWORD PTR [rcx+16], rdx
  00008	0f 94 c0	 sete	 al

; 467  : 		}

  0000b	c3		 ret	 0
??8?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??9?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??9?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator!=, COMDAT

; 466  : 		return (this->_Myoff == _Right._Myoff);

  00000	48 8b 52 10	 mov	 rdx, QWORD PTR [rdx+16]
  00004	48 39 51 10	 cmp	 QWORD PTR [rcx+16], rdx

; 471  : 		return (!(*this == _Right));

  00008	0f 95 c0	 setne	 al

; 472  : 		}

  0000b	c3		 ret	 0
??9?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Compat@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAXAEBV12@@Z
_TEXT	SEGMENT
this$dead$ = 8
__formal$dead$ = 16
?_Compat@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAXAEBV12@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Compat, COMDAT

; 528  : 		}

  00000	c2 00 00	 ret	 0
?_Compat@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAXAEBV12@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\memutil.h
;	COMDAT ??$put@VTaskVBOVAOSet@Tasks@@@MiniHeap@MemUtil@@QEAAPEAVTaskVBOVAOSet@Tasks@@V23@@Z
_TEXT	SEGMENT
this$ = 8
object$ = 16
??$put@VTaskVBOVAOSet@Tasks@@@MiniHeap@MemUtil@@QEAAPEAVTaskVBOVAOSet@Tasks@@V23@@Z PROC ; MemUtil::MiniHeap::put<Tasks::TaskVBOVAOSet>, COMDAT

; 17   : 		{

  00000	4c 8b c9	 mov	 r9, rcx

; 18   : 			if(pos + sizeof(A) <= size)

  00003	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00006	45 8b 41 08	 mov	 r8d, DWORD PTR [r9+8]
  0000a	48 8d 41 10	 lea	 rax, QWORD PTR [rcx+16]
  0000e	49 3b c0	 cmp	 rax, r8
  00011	77 24		 ja	 SHORT $LN2@put

; 19   : 			{
; 20   : 				A* mempos = (A*)(heap + pos);

  00013	49 8b 01	 mov	 rax, QWORD PTR [r9]
  00016	48 03 c1	 add	 rax, rcx

; 21   : 				new(mempos) A(object);

  00019	74 16		 je	 SHORT $LN5@put
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7TaskVBOVAOSet@Tasks@@6B@
  00022	48 89 08	 mov	 QWORD PTR [rax], rcx
  00025	8b 4a 08	 mov	 ecx, DWORD PTR [rdx+8]
  00028	89 48 08	 mov	 DWORD PTR [rax+8], ecx
  0002b	8b 4a 0c	 mov	 ecx, DWORD PTR [rdx+12]
  0002e	89 48 0c	 mov	 DWORD PTR [rax+12], ecx
$LN5@put:

; 22   : 				pos += sizeof(A);

  00031	41 83 41 0c 10	 add	 DWORD PTR [r9+12], 16

; 29   : 			}
; 30   : 		}

  00036	c3		 ret	 0
$LN2@put:

; 23   : 
; 24   : 				return mempos;
; 25   : 			}
; 26   : 			else
; 27   : 			{
; 28   : 				return nullptr;

  00037	33 c0		 xor	 eax, eax

; 29   : 			}
; 30   : 		}

  00039	c3		 ret	 0
??$put@VTaskVBOVAOSet@Tasks@@@MiniHeap@MemUtil@@QEAAPEAVTaskVBOVAOSet@Tasks@@V23@@Z ENDP ; MemUtil::MiniHeap::put<Tasks::TaskVBOVAOSet>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AEAVVertexUVRGBA@gfxu@@@std@@YAAEAVVertexUVRGBA@gfxu@@AEAV12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAVVertexUVRGBA@gfxu@@@std@@YAAEAVVertexUVRGBA@gfxu@@AEAV12@@Z PROC ; std::forward<gfxu::VertexUVRGBA & __ptr64>, COMDAT

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

  00000	48 8b c1	 mov	 rax, rcx

; 1777 : 	}

  00003	c3		 ret	 0
??$forward@AEAVVertexUVRGBA@gfxu@@@std@@YAAEAVVertexUVRGBA@gfxu@@AEAV12@@Z ENDP ; std::forward<gfxu::VertexUVRGBA & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@AEAV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@AEAV34@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$ = 16
_V0$ = 24
??$construct@VVertexUVRGBA@gfxu@@AEAV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@AEAV34@@Z PROC ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA & __ptr64>, COMDAT

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 41		 je	 SHORT $LN7@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  00005	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00008	89 02		 mov	 DWORD PTR [rdx], eax
  0000a	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0000e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00011	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00015	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00018	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0001c	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  0001f	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00023	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00026	41 0f b6 40 14	 movzx	 eax, BYTE PTR [r8+20]
  0002b	88 42 14	 mov	 BYTE PTR [rdx+20], al
  0002e	41 0f b6 40 15	 movzx	 eax, BYTE PTR [r8+21]
  00033	88 42 15	 mov	 BYTE PTR [rdx+21], al
  00036	41 0f b6 40 16	 movzx	 eax, BYTE PTR [r8+22]
  0003b	88 42 16	 mov	 BYTE PTR [rdx+22], al
  0003e	41 0f b6 40 17	 movzx	 eax, BYTE PTR [r8+23]
  00043	88 42 17	 mov	 BYTE PTR [rdx+23], al
$LN7@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00046	f3 c3		 fatret	 0
??$construct@VVertexUVRGBA@gfxu@@AEAV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@AEAV34@@Z ENDP ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AEBVVertexUVRGBA@gfxu@@@std@@YAAEBVVertexUVRGBA@gfxu@@AEBV12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBVVertexUVRGBA@gfxu@@@std@@YAAEBVVertexUVRGBA@gfxu@@AEBV12@@Z PROC ; std::forward<gfxu::VertexUVRGBA const & __ptr64>, COMDAT

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

  00000	48 8b c1	 mov	 rax, rcx

; 1777 : 	}

  00003	c3		 ret	 0
??$forward@AEBVVertexUVRGBA@gfxu@@@std@@YAAEBVVertexUVRGBA@gfxu@@AEBV12@@Z ENDP ; std::forward<gfxu::VertexUVRGBA const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@AEBV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@AEBV34@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$ = 16
_V0$ = 24
??$construct@VVertexUVRGBA@gfxu@@AEBV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@AEBV34@@Z PROC ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA const & __ptr64>, COMDAT

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 41		 je	 SHORT $LN7@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  00005	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00008	89 02		 mov	 DWORD PTR [rdx], eax
  0000a	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0000e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00011	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00015	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00018	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0001c	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  0001f	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00023	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00026	41 0f b6 40 14	 movzx	 eax, BYTE PTR [r8+20]
  0002b	88 42 14	 mov	 BYTE PTR [rdx+20], al
  0002e	41 0f b6 40 15	 movzx	 eax, BYTE PTR [r8+21]
  00033	88 42 15	 mov	 BYTE PTR [rdx+21], al
  00036	41 0f b6 40 16	 movzx	 eax, BYTE PTR [r8+22]
  0003b	88 42 16	 mov	 BYTE PTR [rdx+22], al
  0003e	41 0f b6 40 17	 movzx	 eax, BYTE PTR [r8+23]
  00043	88 42 17	 mov	 BYTE PTR [rdx+23], al
$LN7@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00046	f3 c3		 fatret	 0
??$construct@VVertexUVRGBA@gfxu@@AEBV12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@AEBV34@@Z ENDP ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@VVertexUVRGBA@gfxu@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PEAVVertexUVRGBA@gfxu@@0@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
_Cat$ = 16
??$_Ptr_cat@VVertexUVRGBA@gfxu@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PEAVVertexUVRGBA@gfxu@@0@Z PROC ; std::_Ptr_cat<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>, COMDAT

; 437  : 	{	// return pointer category from pointers

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

  00005	0f b6 44 24 10	 movzx	 eax, BYTE PTR _Cat$[rsp]

; 440  : 	}

  0000a	c3		 ret	 0
??$_Ptr_cat@VVertexUVRGBA@gfxu@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PEAVVertexUVRGBA@gfxu@@0@Z ENDP ; std::_Ptr_cat<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPEAVVertexUVRGBA@gfxu@@0AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
_Al$dead$ = 24
__formal$dead$ = 32
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPEAVVertexUVRGBA@gfxu@@0AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >, COMDAT

; 88   : 	for (; _First != _Last; ++_First)
; 89   : 		_Al.destroy(_First);
; 90   : 	}

  00000	c2 00 00	 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAXPEAVVertexUVRGBA@gfxu@@0AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAVVertexUVRGBA@gfxu@@PEAV12@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@00AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z
_TEXT	SEGMENT
_First$ = 64
_Last$ = 72
_Dest$ = 80
_Al$dead$ = 88
??$_Uninitialized_move@PEAVVertexUVRGBA@gfxu@@PEAV12@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@00AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z PROC ; std::_Uninitialized_move<gfxu::VertexUVRGBA * __ptr64,gfxu::VertexUVRGBA * __ptr64,std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >, COMDAT

; 471  : 	{	// move [_First, _Last) to raw _Dest, using _Al

$LN8:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 472  : 	return (_Uninit_move(_First, _Last, _Dest, _Al,
; 473  : 		_Val_type(_First), _Ptr_cat(_First, _Dest)));

  00004	e8 00 00 00 00	 call	 ??$_Uninit_move@PEAVVertexUVRGBA@gfxu@@PEAV12@V?$allocator@VVertexUVRGBA@gfxu@@@std@@V12@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@00AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_move<gfxu::VertexUVRGBA * __ptr64,gfxu::VertexUVRGBA * __ptr64,std::allocator<gfxu::VertexUVRGBA>,gfxu::VertexUVRGBA>

; 474  : 	}

  00009	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0000d	c3		 ret	 0
??$_Uninitialized_move@PEAVVertexUVRGBA@gfxu@@PEAV12@U?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@00AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<gfxu::VertexUVRGBA * __ptr64,gfxu::VertexUVRGBA * __ptr64,std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
$T4 = 48
_Lock$5 = 96
_Lock$6 = 96
_First$ = 96
_Last$ = 104
??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z PROC ; std::reverse<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 3359 : 	{	// reverse elements in [_First, _Last)

$LN118:
  00000	40 53		 push	 rbx
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00008	48 8b 02	 mov	 rax, QWORD PTR [rdx]

; 118  : 		{	// copy an iterator

  0000b	33 db		 xor	 ebx, ebx
  0000d	4c 89 74 24 70	 mov	 QWORD PTR [rsp+112], r14

; 3359 : 	{	// reverse elements in [_First, _Last)

  00012	48 8b f2	 mov	 rsi, rdx
  00015	4c 8b f1	 mov	 r14, rcx

; 118  : 		{	// copy an iterator

  00018	8b fb		 mov	 edi, ebx

; 124  : 		if (_Myproxy == _Right._Myproxy)

  0001a	48 85 c0	 test	 rax, rax
  0001d	74 24		 je	 SHORT $LN20@reverse

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  0001f	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00022	48 85 c0	 test	 rax, rax
  00025	75 19		 jne	 SHORT $LN21@reverse

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00027	8d 53 03	 lea	 edx, QWORD PTR [rbx+3]
  0002a	48 8d 4c 24 60	 lea	 rcx, QWORD PTR _Lock$6[rsp]
  0002f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00034	48 8d 4c 24 60	 lea	 rcx, QWORD PTR _Lock$6[rsp]
  00039	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  0003e	eb 03		 jmp	 SHORT $LN20@reverse
$LN21@reverse:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00040	48 8b 38	 mov	 rdi, QWORD PTR [rax]
$LN20@reverse:
  00043	48 8b 76 10	 mov	 rsi, QWORD PTR [rsi+16]

; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}
; 169  : 		}
; 170  : 
; 171  : 	void _Clrcont()
; 172  : 		{	// disown owning container
; 173  : 		_Myproxy = 0;
; 174  : 		}
; 175  : 
; 176  : 	const _Container_base12 *_Getcont() const
; 177  : 		{	// get owning container
; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00047	48 8b c3	 mov	 rax, rbx
  0004a	48 85 ff	 test	 rdi, rdi
  0004d	74 03		 je	 SHORT $LN36@reverse
  0004f	48 8b 07	 mov	 rax, QWORD PTR [rdi]
$LN36@reverse:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  00052	48 89 44 24 20	 mov	 QWORD PTR $T3[rsp], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 124  : 		if (_Myproxy == _Right._Myproxy)

  00057	49 8b 06	 mov	 rax, QWORD PTR [r14]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 50   : 		_Myoff = _Off;

  0005a	48 89 74 24 28	 mov	 QWORD PTR $T3[rsp+8], rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3361 : 	_Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));

  0005f	0f 28 44 24 20	 movaps	 xmm0, XMMWORD PTR $T3[rsp]
  00064	66 0f 7f 44 24
	30		 movdqa	 XMMWORD PTR $T4[rsp], xmm0

; 118  : 		{	// copy an iterator

  0006a	48 8b fb	 mov	 rdi, rbx

; 124  : 		if (_Myproxy == _Right._Myproxy)

  0006d	48 85 c0	 test	 rax, rax
  00070	74 24		 je	 SHORT $LN54@reverse

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00072	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00075	48 85 c0	 test	 rax, rax
  00078	75 19		 jne	 SHORT $LN55@reverse

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0007a	8d 50 03	 lea	 edx, QWORD PTR [rax+3]
  0007d	48 8d 4c 24 60	 lea	 rcx, QWORD PTR _Lock$5[rsp]
  00082	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00087	48 8d 4c 24 60	 lea	 rcx, QWORD PTR _Lock$5[rsp]
  0008c	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  00091	eb 03		 jmp	 SHORT $LN54@reverse
$LN55@reverse:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00093	48 8b 38	 mov	 rdi, QWORD PTR [rax]
$LN54@reverse:
  00096	49 8b 46 10	 mov	 rax, QWORD PTR [r14+16]
  0009a	4c 8b 74 24 70	 mov	 r14, QWORD PTR [rsp+112]

; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}
; 169  : 		}
; 170  : 
; 171  : 	void _Clrcont()
; 172  : 		{	// disown owning container
; 173  : 		_Myproxy = 0;
; 174  : 		}
; 175  : 
; 176  : 	const _Container_base12 *_Getcont() const
; 177  : 		{	// get owning container
; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0009f	48 85 ff	 test	 rdi, rdi
  000a2	74 03		 je	 SHORT $LN70@reverse
  000a4	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
$LN70@reverse:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  000a7	48 89 5c 24 20	 mov	 QWORD PTR $T2[rsp], rbx

; 50   : 		_Myoff = _Off;

  000ac	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp+8], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3361 : 	_Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));

  000b1	0f 28 44 24 20	 movaps	 xmm0, XMMWORD PTR $T2[rsp]
  000b6	66 0f 7f 44 24
	20		 movdqa	 XMMWORD PTR $T1[rsp], xmm0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 128  : 		return (_Myoff == _Right._Myoff);

  000bc	48 3b c6	 cmp	 rax, rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3353 : 	for (; _First != _Last && _First != --_Last; ++_First)

  000bf	74 5d		 je	 SHORT $LN115@reverse
  000c1	48 8b 74 24 20	 mov	 rsi, QWORD PTR $T1[rsp]
  000c6	48 8b 7c 24 28	 mov	 rdi, QWORD PTR $T1[rsp+8]
  000cb	48 8b 5c 24 38	 mov	 rbx, QWORD PTR $T4[rsp+8]
  000d0	48 89 6c 24 68	 mov	 QWORD PTR [rsp+104], rbp
  000d5	48 8b 6c 24 30	 mov	 rbp, QWORD PTR $T4[rsp]
  000da	66 0f 1f 44 00
	00		 npad	 6
$LL82@reverse:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 80   : 		--_Myoff;

  000e0	48 ff cb	 dec	 rbx

; 128  : 		return (_Myoff == _Right._Myoff);

  000e3	48 3b fb	 cmp	 rdi, rbx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3353 : 	for (; _First != _Last && _First != --_Last; ++_First)

  000e6	74 31		 je	 SHORT $LN116@reverse
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  000e8	4c 8b 45 10	 mov	 r8, QWORD PTR [rbp+16]
  000ec	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  000f0	48 8b 55 08	 mov	 rdx, QWORD PTR [rbp+8]
  000f4	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  000f8	49 ff c8	 dec	 r8
  000fb	48 ff c8	 dec	 rax
  000fe	4c 23 c3	 and	 r8, rbx
  00101	48 23 c7	 and	 rax, rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  00104	4a 8b 14 c2	 mov	 rdx, QWORD PTR [rdx+r8*8]
  00108	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0010c	e8 00 00 00 00	 call	 ??$swap@VMatrix@geom@@@std@@YAXAEAVMatrix@geom@@0@Z ; std::swap<geom::Matrix>
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 67   : 		++_Myoff;

  00111	48 ff c7	 inc	 rdi

; 128  : 		return (_Myoff == _Right._Myoff);

  00114	48 3b fb	 cmp	 rdi, rbx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3353 : 	for (; _First != _Last && _First != --_Last; ++_First)

  00117	75 c7		 jne	 SHORT $LL82@reverse
$LN116@reverse:
  00119	48 8b 6c 24 68	 mov	 rbp, QWORD PTR [rsp+104]
$LN115@reverse:

; 3362 : 	}

  0011e	48 83 c4 40	 add	 rsp, 64			; 00000040H
  00122	5f		 pop	 rdi
  00123	5e		 pop	 rsi
  00124	5b		 pop	 rbx
  00125	c3		 ret	 0
??$reverse@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z ENDP ; std::reverse<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 80
$T5 = 80
$T6 = 80
$T7 = 112
$T8 = 112
$T9 = 128
$T10 = 136
$T11 = 160
$T12 = 184
_Lock$13 = 256
_Lock$14 = 256
__$ReturnUdt$ = 256
_Lock$15 = 264
_First$ = 264
$T16 = 272
_Mid$ = 272
_Last$ = 280
??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z PROC ; std::rotate<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 3433 : 	{	// rotate [_First, _Last)

$LN142:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	41 56		 push	 r14
  00006	41 57		 push	 r15
  00008	48 8d 6c 24 c9	 lea	 rbp, QWORD PTR [rsp-55]
  0000d	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  00014	48 c7 45 e7 fe
	ff ff ff	 mov	 QWORD PTR $T9[rbp-153], -2
  0001c	48 89 9c 24 18
	01 00 00	 mov	 QWORD PTR [rsp+280], rbx
  00024	49 8b f1	 mov	 rsi, r9
  00027	4d 8b f0	 mov	 r14, r8
  0002a	48 8b fa	 mov	 rdi, rdx
  0002d	48 8b d9	 mov	 rbx, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 466  : 		return (this->_Myoff == _Right._Myoff);

  00030	49 8b 40 10	 mov	 rax, QWORD PTR [r8+16]
  00034	45 33 ff	 xor	 r15d, r15d
  00037	48 39 42 10	 cmp	 QWORD PTR [rdx+16], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3436 : 	if (_First != _Mid && _Mid != _Last)

  0003b	0f 84 ae 00 00
	00		 je	 $LN59@rotate
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 466  : 		return (this->_Myoff == _Right._Myoff);

  00041	49 3b 41 10	 cmp	 rax, QWORD PTR [r9+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3436 : 	if (_First != _Mid && _Mid != _Last)

  00045	0f 84 a4 00 00
	00		 je	 $LN59@rotate

; 3438 : 			_Iter_cat(_First));

  0004b	49 8b d1	 mov	 rdx, r9
  0004e	48 8d 4d 07	 lea	 rcx, QWORD PTR $T11[rbp-153]
  00052	e8 00 00 00 00	 call	 ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z

; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}
; 169  : 		}
; 170  : 
; 171  : 	void _Clrcont()
; 172  : 		{	// disown owning container
; 173  : 		_Myproxy = 0;
; 174  : 		}
; 175  : 
; 176  : 	const _Container_base12 *_Getcont() const
; 177  : 		{	// get owning container
; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00057	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0005a	48 85 c9	 test	 rcx, rcx
  0005d	75 05		 jne	 SHORT $LN29@rotate
  0005f	41 8b cf	 mov	 ecx, r15d
  00062	eb 03		 jmp	 SHORT $LN30@rotate
$LN29@rotate:
  00064	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
$LN30@rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 599  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));

  00067	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  0006b	48 89 4d d7	 mov	 QWORD PTR $T8[rbp-153], rcx

; 50   : 		_Myoff = _Off;

  0006f	48 89 45 df	 mov	 QWORD PTR $T8[rbp-145], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3438 : 			_Iter_cat(_First));

  00073	49 8b d6	 mov	 rdx, r14
  00076	48 8d 4d ef	 lea	 rcx, QWORD PTR $T10[rbp-153]
  0007a	e8 00 00 00 00	 call	 ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z

; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}
; 169  : 		}
; 170  : 
; 171  : 	void _Clrcont()
; 172  : 		{	// disown owning container
; 173  : 		_Myproxy = 0;
; 174  : 		}
; 175  : 
; 176  : 	const _Container_base12 *_Getcont() const
; 177  : 		{	// get owning container
; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  0007f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00082	48 85 c9	 test	 rcx, rcx
  00085	75 05		 jne	 SHORT $LN41@rotate
  00087	49 8b cf	 mov	 rcx, r15
  0008a	eb 03		 jmp	 SHORT $LN42@rotate
$LN41@rotate:
  0008c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
$LN42@rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 599  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));

  0008f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  00093	48 89 4d b7	 mov	 QWORD PTR $T6[rbp-153], rcx

; 50   : 		_Myoff = _Off;

  00097	48 89 45 bf	 mov	 QWORD PTR $T6[rbp-145], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3438 : 			_Iter_cat(_First));

  0009b	48 8b d7	 mov	 rdx, rdi
  0009e	48 8d 4d 1f	 lea	 rcx, QWORD PTR $T12[rbp-153]
  000a2	e8 00 00 00 00	 call	 ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@AEBV01@@Z

; 167  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 168  : 			}
; 169  : 		}
; 170  : 
; 171  : 	void _Clrcont()
; 172  : 		{	// disown owning container
; 173  : 		_Myproxy = 0;
; 174  : 		}
; 175  : 
; 176  : 	const _Container_base12 *_Getcont() const
; 177  : 		{	// get owning container
; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  000a7	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000aa	48 85 c9	 test	 rcx, rcx
  000ad	75 05		 jne	 SHORT $LN53@rotate
  000af	49 8b cf	 mov	 rcx, r15
  000b2	eb 03		 jmp	 SHORT $LN54@rotate
$LN53@rotate:
  000b4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
$LN54@rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 599  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));

  000b7	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  000bb	48 89 4d 97	 mov	 QWORD PTR $T3[rbp-153], rcx

; 50   : 		_Myoff = _Off;

  000bf	48 89 45 9f	 mov	 QWORD PTR $T3[rbp-145], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3428 : 	_Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));

  000c3	0f 28 45 d7	 movaps	 xmm0, XMMWORD PTR $T8[rbp-153]
  000c7	66 0f 7f 45 d7	 movdqa	 XMMWORD PTR $T7[rbp-153], xmm0
  000cc	0f 28 4d b7	 movaps	 xmm1, XMMWORD PTR $T6[rbp-153]
  000d0	66 0f 7f 4d b7	 movdqa	 XMMWORD PTR $T4[rbp-153], xmm1
  000d5	0f 28 45 97	 movaps	 xmm0, XMMWORD PTR $T3[rbp-153]
  000d9	66 0f 7f 45 97	 movdqa	 XMMWORD PTR $T1[rbp-153], xmm0
  000de	4c 8d 45 d7	 lea	 r8, QWORD PTR $T7[rbp-153]
  000e2	48 8d 55 b7	 lea	 rdx, QWORD PTR $T4[rbp-153]
  000e6	48 8d 4d 97	 lea	 rcx, QWORD PTR $T1[rbp-153]
  000ea	e8 00 00 00 00	 call	 ??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,__int64,geom::Matrix>
$LN59@rotate:

; 3439 : 	_STD advance(_First, _STD distance(_Mid, _Last));

  000ef	48 8d 45 97	 lea	 rax, QWORD PTR $T2[rbp-153]
  000f3	48 89 45 77	 mov	 QWORD PTR $T16[rbp-153], rax

; 118  : 		{	// copy an iterator

  000f7	4c 89 7d 97	 mov	 QWORD PTR $T2[rbp-153], r15
  000fb	4c 89 7d 9f	 mov	 QWORD PTR $T2[rbp-145], r15

; 119  : 		*this = _Right;
; 120  : 		}
; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  000ff	48 8b 06	 mov	 rax, QWORD PTR [rsi]
  00102	48 85 c0	 test	 rax, rax
  00105	74 26		 je	 SHORT $LN78@rotate

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00107	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  0010a	48 85 c0	 test	 rax, rax
  0010d	75 17		 jne	 SHORT $LN79@rotate

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0010f	8d 50 03	 lea	 edx, QWORD PTR [rax+3]
  00112	48 8d 4d 67	 lea	 rcx, QWORD PTR _Lock$14[rbp-153]
  00116	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  0011b	48 8d 4d 67	 lea	 rcx, QWORD PTR _Lock$14[rbp-153]
  0011f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  00124	eb 07		 jmp	 SHORT $LN78@rotate
$LN79@rotate:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00126	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00129	48 89 45 97	 mov	 QWORD PTR $T2[rbp-153], rax
$LN78@rotate:
  0012d	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  00131	48 89 45 a7	 mov	 QWORD PTR $T2[rbp-137], rax

; 118  : 		{	// copy an iterator

  00135	4c 89 7d b7	 mov	 QWORD PTR $T5[rbp-153], r15
  00139	4c 89 7d bf	 mov	 QWORD PTR $T5[rbp-145], r15

; 119  : 		*this = _Right;
; 120  : 		}
; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  0013d	49 8b 06	 mov	 rax, QWORD PTR [r14]
  00140	48 85 c0	 test	 rax, rax
  00143	74 26		 je	 SHORT $LN100@rotate

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00145	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00148	48 85 c0	 test	 rax, rax
  0014b	75 17		 jne	 SHORT $LN101@rotate

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0014d	8d 50 03	 lea	 edx, QWORD PTR [rax+3]
  00150	48 8d 4d 6f	 lea	 rcx, QWORD PTR _Lock$15[rbp-153]
  00154	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00159	48 8d 4d 6f	 lea	 rcx, QWORD PTR _Lock$15[rbp-153]
  0015d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  00162	eb 07		 jmp	 SHORT $LN100@rotate
$LN101@rotate:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00164	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00167	48 89 45 b7	 mov	 QWORD PTR $T5[rbp-153], rax
$LN100@rotate:
  0016b	49 8b 46 10	 mov	 rax, QWORD PTR [r14+16]
  0016f	48 89 45 c7	 mov	 QWORD PTR $T5[rbp-137], rax

; 3439 : 	_STD advance(_First, _STD distance(_Mid, _Last));

  00173	48 8d 55 97	 lea	 rdx, QWORD PTR $T2[rbp-153]
  00177	48 8d 4d b7	 lea	 rcx, QWORD PTR $T5[rbp-153]
  0017b	e8 00 00 00 00	 call	 ??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z ; std::distance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 640  : 		this->_Myoff += _Off;

  00180	48 01 47 10	 add	 QWORD PTR [rdi+16], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 118  : 		{	// copy an iterator

  00184	4c 89 3b	 mov	 QWORD PTR [rbx], r15
  00187	4c 89 7b 08	 mov	 QWORD PTR [rbx+8], r15

; 119  : 		*this = _Right;
; 120  : 		}
; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  0018b	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  0018e	48 85 c0	 test	 rax, rax
  00191	74 25		 je	 SHORT $LN130@rotate

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00193	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00196	48 85 c0	 test	 rax, rax
  00199	75 17		 jne	 SHORT $LN131@rotate

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0019b	8d 50 03	 lea	 edx, QWORD PTR [rax+3]
  0019e	48 8d 4d 67	 lea	 rcx, QWORD PTR _Lock$13[rbp-153]
  001a2	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  001a7	48 8d 4d 67	 lea	 rcx, QWORD PTR _Lock$13[rbp-153]
  001ab	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  001b0	eb 06		 jmp	 SHORT $LN130@rotate
$LN131@rotate:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  001b2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001b5	48 89 03	 mov	 QWORD PTR [rbx], rax
$LN130@rotate:
  001b8	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  001bc	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax

; 3440 : 	return (_First);

  001c0	48 8b c3	 mov	 rax, rbx

; 3441 : 	}

  001c3	48 8b 9c 24 18
	01 00 00	 mov	 rbx, QWORD PTR [rsp+280]
  001cb	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  001d2	41 5f		 pop	 r15
  001d4	41 5e		 pop	 r14
  001d6	5f		 pop	 rdi
  001d7	5e		 pop	 rsi
  001d8	5d		 pop	 rbp
  001d9	c3		 ret	 0
??$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z ENDP ; std::rotate<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 80
$T5 = 80
$T6 = 80
$T7 = 112
$T8 = 112
$T9 = 128
$T10 = 136
$T11 = 160
$T12 = 184
_Lock$13 = 256
_Lock$14 = 256
__$ReturnUdt$ = 256
_Lock$15 = 264
_First$ = 264
$T16 = 272
_Mid$ = 272
_Last$ = 280
?dtor$3@?0???$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z@4HA PROC ; `std::rotate<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >'::`1'::dtor$3
  00000	48 8b 8a 10 01
	00 00		 mov	 rcx, QWORD PTR $T16[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
?dtor$3@?0???$rotate@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V10@00@Z@4HA ENDP ; `std::rotate<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VMatrix@geom@@V12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAVMatrix@geom@@$$QEAV34@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$ = 16
_V0$ = 24
??$construct@VMatrix@geom@@V12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAVMatrix@geom@@$$QEAV34@@Z PROC ; std::allocator_traits<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix>, COMDAT

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 6e		 je	 SHORT $LN7@construct
  00005	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00008	89 02		 mov	 DWORD PTR [rdx], eax
  0000a	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0000e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00011	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00015	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00018	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0001c	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  0001f	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00023	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00026	41 8b 40 14	 mov	 eax, DWORD PTR [r8+20]
  0002a	89 42 14	 mov	 DWORD PTR [rdx+20], eax
  0002d	41 8b 40 18	 mov	 eax, DWORD PTR [r8+24]
  00031	89 42 18	 mov	 DWORD PTR [rdx+24], eax
  00034	41 8b 40 1c	 mov	 eax, DWORD PTR [r8+28]
  00038	89 42 1c	 mov	 DWORD PTR [rdx+28], eax
  0003b	41 8b 40 20	 mov	 eax, DWORD PTR [r8+32]
  0003f	89 42 20	 mov	 DWORD PTR [rdx+32], eax
  00042	41 8b 40 24	 mov	 eax, DWORD PTR [r8+36]
  00046	89 42 24	 mov	 DWORD PTR [rdx+36], eax
  00049	41 8b 40 28	 mov	 eax, DWORD PTR [r8+40]
  0004d	89 42 28	 mov	 DWORD PTR [rdx+40], eax
  00050	41 8b 40 2c	 mov	 eax, DWORD PTR [r8+44]
  00054	89 42 2c	 mov	 DWORD PTR [rdx+44], eax
  00057	41 8b 40 30	 mov	 eax, DWORD PTR [r8+48]
  0005b	89 42 30	 mov	 DWORD PTR [rdx+48], eax
  0005e	41 8b 40 34	 mov	 eax, DWORD PTR [r8+52]
  00062	89 42 34	 mov	 DWORD PTR [rdx+52], eax
  00065	41 8b 40 38	 mov	 eax, DWORD PTR [r8+56]
  00069	89 42 38	 mov	 DWORD PTR [rdx+56], eax
  0006c	41 8b 40 3c	 mov	 eax, DWORD PTR [r8+60]
  00070	89 42 3c	 mov	 DWORD PTR [rdx+60], eax
$LN7@construct:

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00073	f3 c3		 fatret	 0
??$construct@VMatrix@geom@@V12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAVMatrix@geom@@$$QEAV34@@Z ENDP ; std::allocator_traits<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@AEBVMatrix@geom@@@std@@YAAEBVMatrix@geom@@AEBV12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBVMatrix@geom@@@std@@YAAEBVMatrix@geom@@AEBV12@@Z PROC ; std::forward<geom::Matrix const & __ptr64>, COMDAT

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

  00000	48 8b c1	 mov	 rax, rcx

; 1777 : 	}

  00003	c3		 ret	 0
??$forward@AEBVMatrix@geom@@@std@@YAAEBVMatrix@geom@@AEBV12@@Z ENDP ; std::forward<geom::Matrix const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VMatrix@geom@@AEBV12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAVMatrix@geom@@AEBV34@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$ = 16
_V0$ = 24
??$construct@VMatrix@geom@@AEBV12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAVMatrix@geom@@AEBV34@@Z PROC ; std::allocator_traits<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix const & __ptr64>, COMDAT

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 6e		 je	 SHORT $LN7@construct
  00005	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00008	89 02		 mov	 DWORD PTR [rdx], eax
  0000a	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0000e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00011	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00015	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00018	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0001c	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  0001f	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00023	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00026	41 8b 40 14	 mov	 eax, DWORD PTR [r8+20]
  0002a	89 42 14	 mov	 DWORD PTR [rdx+20], eax
  0002d	41 8b 40 18	 mov	 eax, DWORD PTR [r8+24]
  00031	89 42 18	 mov	 DWORD PTR [rdx+24], eax
  00034	41 8b 40 1c	 mov	 eax, DWORD PTR [r8+28]
  00038	89 42 1c	 mov	 DWORD PTR [rdx+28], eax
  0003b	41 8b 40 20	 mov	 eax, DWORD PTR [r8+32]
  0003f	89 42 20	 mov	 DWORD PTR [rdx+32], eax
  00042	41 8b 40 24	 mov	 eax, DWORD PTR [r8+36]
  00046	89 42 24	 mov	 DWORD PTR [rdx+36], eax
  00049	41 8b 40 28	 mov	 eax, DWORD PTR [r8+40]
  0004d	89 42 28	 mov	 DWORD PTR [rdx+40], eax
  00050	41 8b 40 2c	 mov	 eax, DWORD PTR [r8+44]
  00054	89 42 2c	 mov	 DWORD PTR [rdx+44], eax
  00057	41 8b 40 30	 mov	 eax, DWORD PTR [r8+48]
  0005b	89 42 30	 mov	 DWORD PTR [rdx+48], eax
  0005e	41 8b 40 34	 mov	 eax, DWORD PTR [r8+52]
  00062	89 42 34	 mov	 DWORD PTR [rdx+52], eax
  00065	41 8b 40 38	 mov	 eax, DWORD PTR [r8+56]
  00069	89 42 38	 mov	 DWORD PTR [rdx+56], eax
  0006c	41 8b 40 3c	 mov	 eax, DWORD PTR [r8+60]
  00070	89 42 3c	 mov	 DWORD PTR [rdx+60], eax
$LN7@construct:

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00073	f3 c3		 fatret	 0
??$construct@VMatrix@geom@@AEBV12@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAVMatrix@geom@@AEBV34@@Z ENDP ; std::allocator_traits<std::allocator<geom::Matrix> >::construct<geom::Matrix,geom::Matrix const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAVMatrix@geom@@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$dead$ = 16
??$destroy@VMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAVMatrix@geom@@@Z PROC ; std::allocator_traits<std::allocator<geom::Matrix> >::destroy<geom::Matrix>, COMDAT

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);
; 758  : 		}

  00000	c2 00 00	 ret	 0
??$destroy@VMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAVMatrix@geom@@@Z ENDP ; std::allocator_traits<std::allocator<geom::Matrix> >::destroy<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$?0VMatrix@geom@@@?$allocator@PEAVMatrix@geom@@@std@@QEAA@AEBV?$allocator@VMatrix@geom@@@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$dead$ = 16
??$?0VMatrix@geom@@@?$allocator@PEAVMatrix@geom@@@std@@QEAA@AEBV?$allocator@VMatrix@geom@@@1@@Z PROC ; std::allocator<geom::Matrix * __ptr64>::allocator<geom::Matrix * __ptr64><geom::Matrix>, COMDAT

; 575  : 		{	// construct from a related allocator (do nothing)
; 576  : 		}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??$?0VMatrix@geom@@@?$allocator@PEAVMatrix@geom@@@std@@QEAA@AEBV?$allocator@VMatrix@geom@@@1@@Z ENDP ; std::allocator<geom::Matrix * __ptr64>::allocator<geom::Matrix * __ptr64><geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PEAVMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAPEAVMatrix@geom@@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$dead$ = 16
??$destroy@PEAVMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAPEAVMatrix@geom@@@Z PROC ; std::allocator_traits<std::allocator<geom::Matrix> >::destroy<geom::Matrix * __ptr64>, COMDAT

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);
; 758  : 		}

  00000	c2 00 00	 ret	 0
??$destroy@PEAVMatrix@geom@@@?$allocator_traits@V?$allocator@VMatrix@geom@@@std@@@std@@SAXAEAV?$allocator@VMatrix@geom@@@1@PEAPEAVMatrix@geom@@@Z ENDP ; std::allocator_traits<std::allocator<geom::Matrix> >::destroy<geom::Matrix * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Ptr_cat@PEAVMatrix@geom@@PEAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PEAPEAVMatrix@geom@@0@Z
_TEXT	SEGMENT
__formal$dead$ = 8
__formal$dead$ = 16
_Cat$ = 16
??$_Ptr_cat@PEAVMatrix@geom@@PEAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PEAPEAVMatrix@geom@@0@Z PROC ; std::_Ptr_cat<geom::Matrix * __ptr64,geom::Matrix * __ptr64>, COMDAT

; 437  : 	{	// return pointer category from pointers

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx

; 438  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 439  : 	return (_Cat);

  00005	0f b6 44 24 10	 movzx	 eax, BYTE PTR _Cat$[rsp]

; 440  : 	}

  0000a	c3		 ret	 0
??$_Ptr_cat@PEAVMatrix@geom@@PEAV12@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PEAPEAVMatrix@geom@@0@Z ENDP ; std::_Ptr_cat<geom::Matrix * __ptr64,geom::Matrix * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@PEAVMatrix@geom@@PEAV12@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@00AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
__formal$dead$ = 72
__formal$dead$ = 80
??$_Uninit_copy@PEAVMatrix@geom@@PEAV12@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@00AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<geom::Matrix * __ptr64,geom::Matrix * __ptr64>, COMDAT

; 401  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 402  : 	_DEBUG_RANGE(_First, _Last);
; 403  : 	_DEBUG_POINTER(_Dest);
; 404  : 	size_t _Count = (size_t)(_Last - _First);

  00006	48 2b d1	 sub	 rdx, rcx
  00009	49 8b c0	 mov	 rax, r8
  0000c	48 c1 fa 03	 sar	 rdx, 3

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  00010	48 8d 1c d5 00
	00 00 00	 lea	 rbx, QWORD PTR [rdx*8]
  00018	48 8b d1	 mov	 rdx, rcx
  0001b	48 8b c8	 mov	 rcx, rax
  0001e	4c 8b c3	 mov	 r8, rbx
  00021	e8 00 00 00 00	 call	 memmove
  00026	48 03 c3	 add	 rax, rbx

; 407  : 	}

  00029	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002d	5b		 pop	 rbx
  0002e	c3		 ret	 0
??$_Uninit_copy@PEAVMatrix@geom@@PEAV12@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@00AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<geom::Matrix * __ptr64,geom::Matrix * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PEAPEAVMatrix@geom@@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
??$_Val_type@PEAPEAVMatrix@geom@@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@@Z PROC ; std::_Val_type<geom::Matrix * __ptr64 * __ptr64>, COMDAT

; 711  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 712  : 	}

  00002	c3		 ret	 0
??$_Val_type@PEAPEAVMatrix@geom@@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@@Z ENDP ; std::_Val_type<geom::Matrix * __ptr64 * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_def_fill_n@PEAVMatrix@geom@@_KPEAV12@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
_First$ = 16
_Count$ = 24
__formal$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
??$_Uninit_def_fill_n@PEAVMatrix@geom@@_KPEAV12@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_def_fill_n<geom::Matrix * __ptr64,unsigned __int64,geom::Matrix * __ptr64>, COMDAT

; 659  : 	{	// copy _Count * _Valty() to raw _First, using _Al, scalar type

$LN12:
  00000	48 83 ec 08	 sub	 rsp, 8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00004	48 85 d2	 test	 rdx, rdx
  00007	74 13		 je	 SHORT $LN5@Uninit_def
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 660  : 	_Fill_n(_First, _Count, (_Valty)0);

  00009	48 89 3c 24	 mov	 QWORD PTR [rsp], rdi
  0000d	48 8b f9	 mov	 rdi, rcx
  00010	33 c0		 xor	 eax, eax
  00012	48 8b ca	 mov	 rcx, rdx
  00015	f3 48 ab	 rep stosq
  00018	48 8b 3c 24	 mov	 rdi, QWORD PTR [rsp]
$LN5@Uninit_def:

; 661  : 	}

  0001c	48 83 c4 08	 add	 rsp, 8
  00020	c3		 ret	 0
??$_Uninit_def_fill_n@PEAVMatrix@geom@@_KPEAV12@@std@@YAXPEAPEAVMatrix@geom@@_KAEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_def_fill_n<geom::Matrix * __ptr64,unsigned __int64,geom::Matrix * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@0AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
_First$dead$ = 8
_Last$dead$ = 16
_Al$dead$ = 24
__formal$dead$ = 32
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@0AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> > >, COMDAT

; 97   : 	}

  00000	c2 00 00	 ret	 0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@std@@@std@@YAXPEAPEAVMatrix@geom@@0AEAU?$_Wrap_alloc@V?$allocator@PEAVMatrix@geom@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<geom::Matrix * __ptr64> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEBV34@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_Val$ = 24
?construct@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEBV34@@Z PROC ; std::allocator<gfxu::VertexUVRGBA>::construct, COMDAT

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 41		 je	 SHORT $LN3@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  00005	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00008	89 02		 mov	 DWORD PTR [rdx], eax
  0000a	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0000e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00011	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00015	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00018	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0001c	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  0001f	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00023	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00026	41 0f b6 40 14	 movzx	 eax, BYTE PTR [r8+20]
  0002b	88 42 14	 mov	 BYTE PTR [rdx+20], al
  0002e	41 0f b6 40 15	 movzx	 eax, BYTE PTR [r8+21]
  00033	88 42 15	 mov	 BYTE PTR [rdx+21], al
  00036	41 0f b6 40 16	 movzx	 eax, BYTE PTR [r8+22]
  0003b	88 42 16	 mov	 BYTE PTR [rdx+22], al
  0003e	41 0f b6 40 17	 movzx	 eax, BYTE PTR [r8+23]
  00043	88 42 17	 mov	 BYTE PTR [rdx+23], al
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 607  : 		}

  00046	f3 c3		 fatret	 0
?construct@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEBV34@@Z ENDP ; std::allocator<gfxu::VertexUVRGBA>::construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ?construct@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@AEBV34@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_Val$ = 24
?construct@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@AEBV34@@Z PROC ; std::allocator<geom::Matrix>::construct, COMDAT

; 606  : 		::new ((void *)_Ptr) _Ty(_Val);

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 6e		 je	 SHORT $LN3@construct
  00005	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00008	89 02		 mov	 DWORD PTR [rdx], eax
  0000a	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0000e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00011	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00015	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00018	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0001c	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  0001f	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00023	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00026	41 8b 40 14	 mov	 eax, DWORD PTR [r8+20]
  0002a	89 42 14	 mov	 DWORD PTR [rdx+20], eax
  0002d	41 8b 40 18	 mov	 eax, DWORD PTR [r8+24]
  00031	89 42 18	 mov	 DWORD PTR [rdx+24], eax
  00034	41 8b 40 1c	 mov	 eax, DWORD PTR [r8+28]
  00038	89 42 1c	 mov	 DWORD PTR [rdx+28], eax
  0003b	41 8b 40 20	 mov	 eax, DWORD PTR [r8+32]
  0003f	89 42 20	 mov	 DWORD PTR [rdx+32], eax
  00042	41 8b 40 24	 mov	 eax, DWORD PTR [r8+36]
  00046	89 42 24	 mov	 DWORD PTR [rdx+36], eax
  00049	41 8b 40 28	 mov	 eax, DWORD PTR [r8+40]
  0004d	89 42 28	 mov	 DWORD PTR [rdx+40], eax
  00050	41 8b 40 2c	 mov	 eax, DWORD PTR [r8+44]
  00054	89 42 2c	 mov	 DWORD PTR [rdx+44], eax
  00057	41 8b 40 30	 mov	 eax, DWORD PTR [r8+48]
  0005b	89 42 30	 mov	 DWORD PTR [rdx+48], eax
  0005e	41 8b 40 34	 mov	 eax, DWORD PTR [r8+52]
  00062	89 42 34	 mov	 DWORD PTR [rdx+52], eax
  00065	41 8b 40 38	 mov	 eax, DWORD PTR [r8+56]
  00069	89 42 38	 mov	 DWORD PTR [rdx+56], eax
  0006c	41 8b 40 3c	 mov	 eax, DWORD PTR [r8+60]
  00070	89 42 3c	 mov	 DWORD PTR [rdx+60], eax
$LN3@construct:

; 607  : 		}

  00073	f3 c3		 fatret	 0
?construct@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@AEBV34@@Z ENDP ; std::allocator<geom::Matrix>::construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@AEAV12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEAV23@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_V0$ = 24
??$construct@VVertexUVRGBA@gfxu@@AEAV12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEAV23@@Z PROC ; std::allocator<gfxu::VertexUVRGBA>::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA & __ptr64>, COMDAT

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 41		 je	 SHORT $LN3@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  00005	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00008	89 02		 mov	 DWORD PTR [rdx], eax
  0000a	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0000e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00011	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00015	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00018	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0001c	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  0001f	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00023	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00026	41 0f b6 40 14	 movzx	 eax, BYTE PTR [r8+20]
  0002b	88 42 14	 mov	 BYTE PTR [rdx+20], al
  0002e	41 0f b6 40 15	 movzx	 eax, BYTE PTR [r8+21]
  00033	88 42 15	 mov	 BYTE PTR [rdx+21], al
  00036	41 0f b6 40 16	 movzx	 eax, BYTE PTR [r8+22]
  0003b	88 42 16	 mov	 BYTE PTR [rdx+22], al
  0003e	41 0f b6 40 17	 movzx	 eax, BYTE PTR [r8+23]
  00043	88 42 17	 mov	 BYTE PTR [rdx+23], al
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00046	f3 c3		 fatret	 0
??$construct@VVertexUVRGBA@gfxu@@AEAV12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@AEAV23@@Z ENDP ; std::allocator<gfxu::VertexUVRGBA>::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA & __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VVertexUVRGBA@gfxu@@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$dead$ = 16
??$destroy@VVertexUVRGBA@gfxu@@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@@Z PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::destroy<gfxu::VertexUVRGBA>, COMDAT

; 908  : 		{	// destroy object at _Ptr
; 909  : 		_Mytraits::destroy(*this, _Ptr);
; 910  : 		}

  00000	c2 00 00	 ret	 0
??$destroy@VVertexUVRGBA@gfxu@@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@@Z ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::destroy<gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@PEAVVertexUVRGBA@gfxu@@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
??$_Val_type@PEAVVertexUVRGBA@gfxu@@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@@Z PROC ; std::_Val_type<gfxu::VertexUVRGBA * __ptr64>, COMDAT

; 711  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 712  : 	}

  00002	c3		 ret	 0
??$_Val_type@PEAVVertexUVRGBA@gfxu@@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@@Z ENDP ; std::_Val_type<gfxu::VertexUVRGBA * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory
;	COMDAT ??$_Uninit_move@PEAVVertexUVRGBA@gfxu@@PEAV12@V?$allocator@VVertexUVRGBA@gfxu@@@std@@V12@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@00AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Dest$ = 24
_Al$dead$ = 32
__formal$dead$ = 40
__formal$dead$ = 48
??$_Uninit_move@PEAVVertexUVRGBA@gfxu@@PEAV12@V?$allocator@VVertexUVRGBA@gfxu@@@std@@V12@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@00AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_move<gfxu::VertexUVRGBA * __ptr64,gfxu::VertexUVRGBA * __ptr64,std::allocator<gfxu::VertexUVRGBA>,gfxu::VertexUVRGBA>, COMDAT

; 432  : 	for (; _First != _Last; ++_Dest, ++_First)

  00000	48 3b ca	 cmp	 rcx, rdx
  00003	74 62		 je	 SHORT $LN4@Uninit_mov
  00005	48 83 c1 08	 add	 rcx, 8
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL6@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00010	4d 85 c0	 test	 r8, r8
  00013	74 41		 je	 SHORT $LN24@Uninit_mov
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  00015	8b 41 f8	 mov	 eax, DWORD PTR [rcx-8]
  00018	41 89 00	 mov	 DWORD PTR [r8], eax
  0001b	8b 41 fc	 mov	 eax, DWORD PTR [rcx-4]
  0001e	41 89 40 04	 mov	 DWORD PTR [r8+4], eax
  00022	8b 01		 mov	 eax, DWORD PTR [rcx]
  00024	41 89 40 08	 mov	 DWORD PTR [r8+8], eax
  00028	8b 41 04	 mov	 eax, DWORD PTR [rcx+4]
  0002b	41 89 40 0c	 mov	 DWORD PTR [r8+12], eax
  0002f	8b 41 08	 mov	 eax, DWORD PTR [rcx+8]
  00032	41 89 40 10	 mov	 DWORD PTR [r8+16], eax
  00036	0f b6 41 0c	 movzx	 eax, BYTE PTR [rcx+12]
  0003a	41 88 40 14	 mov	 BYTE PTR [r8+20], al
  0003e	0f b6 41 0d	 movzx	 eax, BYTE PTR [rcx+13]
  00042	41 88 40 15	 mov	 BYTE PTR [r8+21], al
  00046	0f b6 41 0e	 movzx	 eax, BYTE PTR [rcx+14]
  0004a	41 88 40 16	 mov	 BYTE PTR [r8+22], al
  0004e	0f b6 41 0f	 movzx	 eax, BYTE PTR [rcx+15]
  00052	41 88 40 17	 mov	 BYTE PTR [r8+23], al
$LN24@Uninit_mov:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory

; 432  : 	for (; _First != _Last; ++_Dest, ++_First)

  00056	48 83 c1 18	 add	 rcx, 24
  0005a	49 83 c0 18	 add	 r8, 24
  0005e	48 8d 41 f8	 lea	 rax, QWORD PTR [rcx-8]
  00062	48 3b c2	 cmp	 rax, rdx
  00065	75 a9		 jne	 SHORT $LL6@Uninit_mov
$LN4@Uninit_mov:

; 433  : 		_Al.construct(_Dest, (_Valty&&)*_First);
; 434  : 	_CATCH_ALL
; 435  : 	for (; _Next != _Dest; ++_Next)
; 436  : 		_Al.destroy(_Next);
; 437  : 	_RERAISE;
; 438  : 	_CATCH_END
; 439  : 	return (_Dest);

  00067	49 8b c0	 mov	 rax, r8

; 440  : 	}

  0006a	c3		 ret	 0
??$_Uninit_move@PEAVVertexUVRGBA@gfxu@@PEAV12@V?$allocator@VVertexUVRGBA@gfxu@@@std@@V12@@std@@YAPEAVVertexUVRGBA@gfxu@@PEAV12@00AEAU?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_move<gfxu::VertexUVRGBA * __ptr64,gfxu::VertexUVRGBA * __ptr64,std::allocator<gfxu::VertexUVRGBA>,gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??$_Unchecked@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@YA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
_Iter$ = 16
??$_Unchecked@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@YA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00003	48 85 c0	 test	 rax, rax
  00006	75 0f		 jne	 SHORT $LN7@Unchecked
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  00008	48 89 01	 mov	 QWORD PTR [rcx], rax

; 50   : 		_Myoff = _Off;

  0000b	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  0000f	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 676  : 	return (_Iter._Unchecked());

  00013	48 8b c1	 mov	 rax, rcx

; 677  : 	}

  00016	c3		 ret	 0
$LN7@Unchecked:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00017	48 8b 00	 mov	 rax, QWORD PTR [rax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  0001a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 50   : 		_Myoff = _Off;

  0001d	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  00021	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 676  : 	return (_Iter._Unchecked());

  00025	48 8b c1	 mov	 rax, rcx

; 677  : 	}

  00028	c3		 ret	 0
??$_Unchecked@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@YA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Iter_cat@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@AEBV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
__formal$dead$ = 16
??$_Iter_cat@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@AEBV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z PROC ; std::_Iter_cat<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 399  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 400  : 	return (_Cat);

  00000	48 8b c1	 mov	 rax, rcx

; 401  : 	}

  00003	c3		 ret	 0
??$_Iter_cat@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@AEBV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ENDP ; std::_Iter_cat<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Reverse@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0Ubidirectional_iterator_tag@0@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
_First$ = 80
_Last$ = 88
__formal$dead$ = 96
??$_Reverse@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0Ubidirectional_iterator_tag@0@@Z PROC ; std::_Reverse<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 3352 : 	{	// reverse elements in [_First, _Last), bidirectional iterators

$LN41:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 40	 sub	 rsp, 64			; 00000040H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 128  : 		return (_Myoff == _Right._Myoff);

  0000a	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3352 : 	{	// reverse elements in [_First, _Last), bidirectional iterators

  0000e	48 8b da	 mov	 rbx, rdx
  00011	48 8b f9	 mov	 rdi, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 128  : 		return (_Myoff == _Right._Myoff);

  00014	48 39 41 08	 cmp	 QWORD PTR [rcx+8], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3353 : 	for (; _First != _Last && _First != --_Last; ++_First)

  00018	0f 84 7f 00 00
	00		 je	 $LN39@Reverse
  0001e	66 90		 npad	 2
$LL8@Reverse:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 80   : 		--_Myoff;

  00020	48 ff 4b 08	 dec	 QWORD PTR [rbx+8]
  00024	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]

; 128  : 		return (_Myoff == _Right._Myoff);

  00028	48 39 47 08	 cmp	 QWORD PTR [rdi+8], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3353 : 	for (; _First != _Last && _First != --_Last; ++_First)

  0002c	74 6f		 je	 SHORT $LN39@Reverse

; 3354 : 		_STD iter_swap(_First, _Last);

  0002e	f2 0f 10 03	 movsdx	 xmm0, QWORD PTR [rbx]
  00032	f2 0f 10 4b 08	 movsdx	 xmm1, QWORD PTR [rbx+8]
  00037	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR $T1[rsp], xmm0
  0003d	f2 0f 10 07	 movsdx	 xmm0, QWORD PTR [rdi]
  00041	f2 0f 11 4c 24
	28		 movsdx	 QWORD PTR $T1[rsp+8], xmm1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  0004c	4c 8b 40 10	 mov	 r8, QWORD PTR [rax+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  00050	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3354 : 		_STD iter_swap(_First, _Last);

  00054	f2 0f 10 4f 08	 movsdx	 xmm1, QWORD PTR [rdi+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00059	49 ff c8	 dec	 r8
  0005c	4c 23 44 24 28	 and	 r8, QWORD PTR $T1[rsp+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3354 : 		_STD iter_swap(_First, _Last);

  00061	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR $T2[rsp], xmm0
  00067	f2 0f 11 4c 24
	38		 movsdx	 QWORD PTR $T2[rsp+8], xmm1
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0006d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR $T2[rsp]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  00072	4a 8b 14 c2	 mov	 rdx, QWORD PTR [rdx+r8*8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00076	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  0007a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0007e	48 ff c8	 dec	 rax
  00081	48 23 44 24 38	 and	 rax, QWORD PTR $T2[rsp+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  00086	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0008a	e8 00 00 00 00	 call	 ??$swap@VMatrix@geom@@@std@@YAXAEAVMatrix@geom@@0@Z ; std::swap<geom::Matrix>
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 67   : 		++_Myoff;

  0008f	48 ff 47 08	 inc	 QWORD PTR [rdi+8]
  00093	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]

; 128  : 		return (_Myoff == _Right._Myoff);

  00097	48 3b 43 08	 cmp	 rax, QWORD PTR [rbx+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3353 : 	for (; _First != _Last && _First != --_Last; ++_First)

  0009b	75 83		 jne	 SHORT $LL8@Reverse
$LN39@Reverse:

; 3355 : 	}

  0009d	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000a2	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000a6	5f		 pop	 rdi
  000a7	c3		 ret	 0
??$_Reverse@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0Ubidirectional_iterator_tag@0@@Z ENDP ; std::_Reverse<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 64
$T3 = 80
_First$ = 112
_Mid$ = 120
_Last$ = 128
__formal$dead$ = 136
??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00Urandom_access_iterator_tag@0@@Z PROC ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 3427 : 	{	// rotate [_First, _Last), random-access iterators

$LN8:
  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 3428 : 	_Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));

  00004	41 0f 10 00	 movups	 xmm0, XMMWORD PTR [r8]
  00008	4c 8d 44 24 30	 lea	 r8, QWORD PTR $T1[rsp]
  0000d	0f 29 44 24 30	 movaps	 XMMWORD PTR $T1[rsp], xmm0
  00012	0f 10 02	 movups	 xmm0, XMMWORD PTR [rdx]
  00015	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T2[rsp]
  0001a	0f 29 44 24 40	 movaps	 XMMWORD PTR $T2[rsp], xmm0
  0001f	0f 10 01	 movups	 xmm0, XMMWORD PTR [rcx]
  00022	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T3[rsp]
  00027	0f 29 44 24 50	 movaps	 XMMWORD PTR $T3[rsp], xmm0
  0002c	e8 00 00 00 00	 call	 ??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,__int64,geom::Matrix>

; 3429 : 	}

  00031	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00035	c3		 ret	 0
??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00Urandom_access_iterator_tag@0@@Z ENDP ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
$T1 = 40
_Lock$2 = 80
_First$ = 80
_Lock$3 = 88
_Last$ = 88
$T4 = 96
??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z PROC ; std::distance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 821  : 	{	// return distance between iterators

$LN63:
  00000	4c 8b dc	 mov	 r11, rsp
  00003	57		 push	 rdi
  00004	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  00008	49 c7 43 d8 fe
	ff ff ff	 mov	 QWORD PTR [r11-40], -2
  00010	49 89 5b 20	 mov	 QWORD PTR [r11+32], rbx
  00014	48 8b fa	 mov	 rdi, rdx
  00017	48 8b d9	 mov	 rbx, rcx

; 822  : 	typename iterator_traits<_InIt>::difference_type _Off = 0;
; 823  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

  0001a	49 8d 43 e0	 lea	 rax, QWORD PTR [r11-32]
  0001e	49 89 43 18	 mov	 QWORD PTR [r11+24], rax

; 118  : 		{	// copy an iterator

  00022	33 c0		 xor	 eax, eax
  00024	49 89 43 e0	 mov	 QWORD PTR [r11-32], rax
  00028	49 89 43 e8	 mov	 QWORD PTR [r11-24], rax

; 119  : 		*this = _Right;
; 120  : 		}
; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  0002c	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  0002f	48 85 c0	 test	 rax, rax
  00032	74 28		 je	 SHORT $LN20@distance

; 125  : 			;
; 126  : 		else if (_Right._Myproxy != 0)
; 127  : 			_Adopt(_Right._Myproxy->_Mycont);

  00034	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  00037	48 85 c0	 test	 rax, rax
  0003a	75 18		 jne	 SHORT $LN21@distance

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  0003c	8d 50 03	 lea	 edx, QWORD PTR [rax+3]
  0003f	49 8d 4b 08	 lea	 rcx, QWORD PTR [r11+8]
  00043	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00048	48 8d 4c 24 50	 lea	 rcx, QWORD PTR _Lock$2[rsp]
  0004d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit

; 151  : 		else

  00052	eb 08		 jmp	 SHORT $LN20@distance
$LN21@distance:

; 152  : 			{	// have a parent, do adoption
; 153  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 154  : 
; 155  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 156  : 			if (_Myproxy != _Parent_proxy)
; 157  : 				{	// change parentage
; 158  : 				_Lockit _Lock(_LOCK_DEBUG);
; 159  : 				_Orphan_me();
; 160  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 161  : 				_Parent_proxy->_Myfirstiter = this;
; 162  : 				_Myproxy = _Parent_proxy;
; 163  : 				}
; 164  : 
; 165  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 			_Myproxy = _Parent_proxy;

  00054	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00057	48 89 44 24 28	 mov	 QWORD PTR $T1[rsp], rax
$LN20@distance:
  0005c	48 8b 47 10	 mov	 rax, QWORD PTR [rdi+16]
  00060	48 89 44 24 38	 mov	 QWORD PTR $T1[rsp+16], rax

; 119  : 		*this = _Right;
; 120  : 		}
; 121  : 
; 122  : 	_Iterator_base12& operator=(const _Iterator_base12& _Right)
; 123  : 		{	// assign an iterator
; 124  : 		if (_Myproxy == _Right._Myproxy)

  00065	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00068	48 85 c9	 test	 rcx, rcx
  0006b	74 24		 je	 SHORT $LN43@distance

; 128  : 		else
; 129  : 			{	// becoming invalid, disown current parent
; 130  : 			_Lockit _Lock(_LOCK_DEBUG);
; 131  : 			_Orphan_me();
; 132  : 			}
; 133  : 		return (*this);
; 134  : 		}
; 135  : 
; 136  : 	~_Iterator_base12() _NOEXCEPT
; 137  : 		{	// destroy the iterator
; 138  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 139  : 		_Lockit _Lock(_LOCK_DEBUG);
; 140  : 		_Orphan_me();
; 141  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 142  : 		}
; 143  : 
; 144  : 	void _Adopt(const _Container_base12 *_Parent)
; 145  : 		{	// adopt this iterator by parent
; 146  : 		if (_Parent == 0)

  0006d	48 83 39 00	 cmp	 QWORD PTR [rcx], 0
  00071	75 1e		 jne	 SHORT $LN43@distance

; 147  : 			{	// no future parent, just disown current parent
; 148  : 			_Lockit _Lock(_LOCK_DEBUG);

  00073	ba 03 00 00 00	 mov	 edx, 3
  00078	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Lock$3[rsp]
  0007d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 149  : 			_Orphan_me();
; 150  : 			}

  00082	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Lock$3[rsp]
  00087	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  0008c	48 8b 44 24 38	 mov	 rax, QWORD PTR $T1[rsp+16]
$LN43@distance:
  00091	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));

  00095	48 2b c1	 sub	 rax, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 825  : 	}

  00098	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  0009d	48 83 c4 40	 add	 rsp, 64			; 00000040H
  000a1	5f		 pop	 rdi
  000a2	c3		 ret	 0
??$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z ENDP ; std::distance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 40
_Lock$2 = 80
_First$ = 80
_Lock$3 = 88
_Last$ = 88
$T4 = 96
?dtor$0@?0???$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z@4HA PROC ; `std::distance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >'::`1'::dtor$0
  00000	48 8b 8a 60 00
	00 00		 mov	 rcx, QWORD PTR $T4[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@XZ
?dtor$0@?0???$distance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YA_JV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z@4HA ENDP ; `std::distance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_J@std@@YAXAEAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@_J@Z
_TEXT	SEGMENT
_Where$ = 8
_Off$ = 16
??$advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_J@std@@YAXAEAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@_J@Z PROC ; std::advance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,__int64>, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 640  : 		this->_Myoff += _Off;

  00000	48 01 51 10	 add	 QWORD PTR [rcx+16], rdx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 763  : 	}

  00004	c3		 ret	 0
??$advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_J@std@@YAXAEAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@_J@Z ENDP ; std::advance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,__int64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VMatrix@geom@@V12@@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@$$QEAV23@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_V0$ = 24
??$construct@VMatrix@geom@@V12@@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@$$QEAV23@@Z PROC ; std::allocator<geom::Matrix>::construct<geom::Matrix,geom::Matrix>, COMDAT

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 6e		 je	 SHORT $LN3@construct
  00005	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00008	89 02		 mov	 DWORD PTR [rdx], eax
  0000a	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0000e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00011	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00015	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00018	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0001c	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  0001f	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00023	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00026	41 8b 40 14	 mov	 eax, DWORD PTR [r8+20]
  0002a	89 42 14	 mov	 DWORD PTR [rdx+20], eax
  0002d	41 8b 40 18	 mov	 eax, DWORD PTR [r8+24]
  00031	89 42 18	 mov	 DWORD PTR [rdx+24], eax
  00034	41 8b 40 1c	 mov	 eax, DWORD PTR [r8+28]
  00038	89 42 1c	 mov	 DWORD PTR [rdx+28], eax
  0003b	41 8b 40 20	 mov	 eax, DWORD PTR [r8+32]
  0003f	89 42 20	 mov	 DWORD PTR [rdx+32], eax
  00042	41 8b 40 24	 mov	 eax, DWORD PTR [r8+36]
  00046	89 42 24	 mov	 DWORD PTR [rdx+36], eax
  00049	41 8b 40 28	 mov	 eax, DWORD PTR [r8+40]
  0004d	89 42 28	 mov	 DWORD PTR [rdx+40], eax
  00050	41 8b 40 2c	 mov	 eax, DWORD PTR [r8+44]
  00054	89 42 2c	 mov	 DWORD PTR [rdx+44], eax
  00057	41 8b 40 30	 mov	 eax, DWORD PTR [r8+48]
  0005b	89 42 30	 mov	 DWORD PTR [rdx+48], eax
  0005e	41 8b 40 34	 mov	 eax, DWORD PTR [r8+52]
  00062	89 42 34	 mov	 DWORD PTR [rdx+52], eax
  00065	41 8b 40 38	 mov	 eax, DWORD PTR [r8+56]
  00069	89 42 38	 mov	 DWORD PTR [rdx+56], eax
  0006c	41 8b 40 3c	 mov	 eax, DWORD PTR [r8+60]
  00070	89 42 3c	 mov	 DWORD PTR [rdx+60], eax
$LN3@construct:
  00073	f3 c3		 fatret	 0
??$construct@VMatrix@geom@@V12@@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@$$QEAV23@@Z ENDP ; std::allocator<geom::Matrix>::construct<geom::Matrix,geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$dead$ = 16
??$destroy@VMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@@Z PROC ; std::allocator<geom::Matrix>::destroy<geom::Matrix>, COMDAT

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

  00000	c2 00 00	 ret	 0
??$destroy@VMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QEAAXPEAVMatrix@geom@@@Z ENDP ; std::allocator<geom::Matrix>::destroy<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@PEAVMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QEAAXPEAPEAVMatrix@geom@@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$dead$ = 16
??$destroy@PEAVMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QEAAXPEAPEAVMatrix@geom@@@Z PROC ; std::allocator<geom::Matrix>::destroy<geom::Matrix * __ptr64>, COMDAT

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

  00000	c2 00 00	 ret	 0
??$destroy@PEAVMatrix@geom@@@?$allocator@VMatrix@geom@@@std@@QEAAXPEAPEAVMatrix@geom@@@Z ENDP ; std::allocator<geom::Matrix>::destroy<geom::Matrix * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Fill_n@PEAPEAVMatrix@geom@@_KPEAV12@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@_KAEBQEAV12@@Z
_TEXT	SEGMENT
_Dest$ = 8
_Count$ = 16
_Val$ = 24
??$_Fill_n@PEAPEAVMatrix@geom@@_KPEAV12@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@_KAEBQEAV12@@Z PROC ; std::_Fill_n<geom::Matrix * __ptr64 * __ptr64,unsigned __int64,geom::Matrix * __ptr64>, COMDAT

; 2678 : 	for (; 0 < _Count; --_Count, ++_Dest)

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 1b		 je	 SHORT $LN9@Fill_n
  00005	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL3@Fill_n:

; 2679 : 		*_Dest = _Val;

  00010	49 8b 00	 mov	 rax, QWORD PTR [r8]
  00013	48 83 c1 08	 add	 rcx, 8
  00017	48 89 41 f8	 mov	 QWORD PTR [rcx-8], rax
  0001b	48 ff ca	 dec	 rdx
  0001e	75 f0		 jne	 SHORT $LL3@Fill_n
$LN9@Fill_n:

; 2680 : 	return (_Dest);

  00020	48 8b c1	 mov	 rax, rcx

; 2681 : 	}

  00023	c3		 ret	 0
??$_Fill_n@PEAPEAVMatrix@geom@@_KPEAV12@@std@@YAPEAPEAVMatrix@geom@@PEAPEAV12@_KAEBQEAV12@@Z ENDP ; std::_Fill_n<geom::Matrix * __ptr64 * __ptr64,unsigned __int64,geom::Matrix * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ?_Unchecked@?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?_Unchecked@?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Unchecked, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00003	48 85 c0	 test	 rax, rax
  00006	75 0f		 jne	 SHORT $LN5@Unchecked
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  00008	48 89 02	 mov	 QWORD PTR [rdx], rax

; 50   : 		_Myoff = _Off;

  0000b	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  0000f	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax

; 599  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));

  00013	48 8b c2	 mov	 rax, rdx

; 600  : 		}

  00016	c3		 ret	 0
$LN5@Unchecked:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 178  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

  00017	48 8b 00	 mov	 rax, QWORD PTR [rax]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  0001a	48 89 02	 mov	 QWORD PTR [rdx], rax

; 50   : 		_Myoff = _Off;

  0001d	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00021	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax

; 599  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));

  00025	48 8b c2	 mov	 rax, rdx

; 600  : 		}

  00028	c3		 ret	 0
?_Unchecked@?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@2@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??E?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++, COMDAT

; 67   : 		++_Myoff;

  00000	48 ff 41 08	 inc	 QWORD PTR [rcx+8]

; 212  : 		++*(_Mybase *)this;
; 213  : 		return (*this);

  00004	48 8b c1	 mov	 rax, rcx

; 214  : 		}

  00007	c3		 ret	 0
??E?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??F?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator--, COMDAT

; 80   : 		--_Myoff;

  00000	48 ff 49 08	 dec	 QWORD PTR [rcx+8]

; 225  : 		--*(_Mybase *)this;
; 226  : 		return (*this);

  00004	48 8b c1	 mov	 rax, rcx

; 227  : 		}

  00007	c3		 ret	 0
??F?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??9?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??9?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator!=, COMDAT

; 128  : 		return (_Myoff == _Right._Myoff);

  00000	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  00004	48 39 51 08	 cmp	 QWORD PTR [rcx+8], rdx

; 133  : 		return (!(*this == _Right));

  00008	0f 95 c0	 setne	 al

; 134  : 		}

  0000b	c3		 ret	 0
??9?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
_Pdeque$ = 24
??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT

; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  00000	4c 89 01	 mov	 QWORD PTR [rcx], r8

; 50   : 		_Myoff = _Off;

  00003	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx

; 198  : 		}

  00007	48 8b c1	 mov	 rax, rcx
  0000a	c3		 ret	 0
??0?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??E?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++, COMDAT

; 67   : 		++_Myoff;

  00000	48 ff 41 08	 inc	 QWORD PTR [rcx+8]

; 68   : 		return (*this);

  00004	48 8b c1	 mov	 rax, rcx

; 69   : 		}

  00007	c3		 ret	 0
??E?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??F?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??F?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator--, COMDAT

; 80   : 		--_Myoff;

  00000	48 ff 49 08	 dec	 QWORD PTR [rcx+8]

; 81   : 		return (*this);

  00004	48 8b c1	 mov	 rax, rcx

; 82   : 		}

  00007	c3		 ret	 0
??F?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@XZ ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??8?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??8?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator==, COMDAT

; 128  : 		return (_Myoff == _Right._Myoff);

  00000	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  00004	48 39 51 08	 cmp	 QWORD PTR [rcx+8], rdx
  00008	0f 94 c0	 sete	 al

; 129  : 		}

  0000b	c3		 ret	 0
??8?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
_Pdeque$ = 24
??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >, COMDAT

; 47   : 		const _Container_base12 *_Pdeque)
; 48   : 		{	// construct with offset _Off
; 49   : 		_Mycont = (_Mydeque *)_Pdeque;

  00000	4c 89 01	 mov	 QWORD PTR [rcx], r8

; 50   : 		_Myoff = _Off;

  00003	48 89 51 08	 mov	 QWORD PTR [rcx+8], rdx

; 51   : 		}

  00007	48 8b c1	 mov	 rax, rcx
  0000a	c3		 ret	 0
??0?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAA@_KPEBU_Container_base12@1@@Z ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VVertexUVRGBA@gfxu@@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$dead$ = 16
??$destroy@VVertexUVRGBA@gfxu@@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@@Z PROC ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::destroy<gfxu::VertexUVRGBA>, COMDAT

; 756  : 		{	// destroy object at _Ptr
; 757  : 		_Al.destroy(_Ptr);
; 758  : 		}

  00000	c2 00 00	 ret	 0
??$destroy@VVertexUVRGBA@gfxu@@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@@Z ENDP ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::destroy<gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@V12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@$$QEAV23@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_V0$ = 24
??$construct@VVertexUVRGBA@gfxu@@V12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@$$QEAV23@@Z PROC ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>, COMDAT

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 41		 je	 SHORT $LN11@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  00005	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00008	89 02		 mov	 DWORD PTR [rdx], eax
  0000a	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0000e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00011	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00015	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00018	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0001c	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  0001f	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00023	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00026	41 0f b6 40 14	 movzx	 eax, BYTE PTR [r8+20]
  0002b	88 42 14	 mov	 BYTE PTR [rdx+20], al
  0002e	41 0f b6 40 15	 movzx	 eax, BYTE PTR [r8+21]
  00033	88 42 15	 mov	 BYTE PTR [rdx+21], al
  00036	41 0f b6 40 16	 movzx	 eax, BYTE PTR [r8+22]
  0003b	88 42 16	 mov	 BYTE PTR [rdx+22], al
  0003e	41 0f b6 40 17	 movzx	 eax, BYTE PTR [r8+23]
  00043	88 42 17	 mov	 BYTE PTR [rdx+23], al
$LN11@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 903  : _VARIADIC_EXPAND_0X(_WRAP_ALLOC_CONSTRUCT, , , , )

  00046	f3 c3		 fatret	 0
??$construct@VVertexUVRGBA@gfxu@@V12@@?$_Wrap_alloc@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@$$QEAV23@@Z ENDP ; std::_Wrap_alloc<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??$iter_swap@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@V12@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
??$iter_swap@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@V12@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z PROC ; std::iter_swap<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 25   : 	{	// swap *_Left and *_Right

  00003	4c 8b c9	 mov	 r9, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00006	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00009	4c 8b 40 10	 mov	 r8, QWORD PTR [rax+16]
  0000d	49 ff c8	 dec	 r8
  00010	4c 23 42 08	 and	 r8, QWORD PTR [rdx+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  00014	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00018	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  0001c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00020	4a 8b 14 c2	 mov	 rdx, QWORD PTR [rdx+r8*8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00024	48 ff c8	 dec	 rax
  00027	49 23 41 08	 and	 rax, QWORD PTR [r9+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  0002b	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0002f	e9 00 00 00 00	 jmp	 ??$swap@VMatrix@geom@@@std@@YAXAEAVMatrix@geom@@0@Z ; std::swap<geom::Matrix>
??$iter_swap@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@V12@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0@Z ENDP ; std::iter_swap<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Dist_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPEA_JV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
??$_Dist_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPEA_JV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z PROC ; std::_Dist_type<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 771  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 772  : 	}

  00002	c3		 ret	 0
??$_Dist_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPEA_JV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ENDP ; std::_Dist_type<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Val_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPEAVMatrix@geom@@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z
_TEXT	SEGMENT
__formal$dead$ = 8
??$_Val_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPEAVMatrix@geom@@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z PROC ; std::_Val_type<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >, COMDAT

; 711  : 	return (0);

  00000	33 c0		 xor	 eax, eax

; 712  : 	}

  00002	c3		 ret	 0
??$_Val_type@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@@std@@YAPEAVMatrix@geom@@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@@Z ENDP ; std::_Val_type<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z
_TEXT	SEGMENT
_Next1$1 = 32
_Next$2 = 48
_Tmp$3 = 64
_Tmp$4 = 80
$T5 = 96
_Tmp$6 = 112
_Tmp$7 = 128
$T8 = 144
$T9 = 160
$T10 = 176
_First$ = 240
_Mid$ = 248
_Last$ = 256
__formal$dead$ = 264
__formal$dead$ = 272
??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z PROC ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,__int64,geom::Matrix>, COMDAT

; 3395 : 	{	// rotate [_First, _Last), random-access iterators

$LN108:
  00000	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  00005	4c 89 6c 24 20	 mov	 QWORD PTR [rsp+32], r13
  0000a	55		 push	 rbp
  0000b	41 56		 push	 r14
  0000d	41 57		 push	 r15
  0000f	48 8d 6c 24 c1	 lea	 rbp, QWORD PTR [rsp-63]
  00014	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));

  0001b	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  0001f	48 8b 7a 08	 mov	 rdi, QWORD PTR [rdx+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3395 : 	{	// rotate [_First, _Last), random-access iterators

  00023	4c 8b f9	 mov	 r15, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));

  00026	48 2b f8	 sub	 rdi, rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3395 : 	{	// rotate [_First, _Last), random-access iterators

  00029	4d 8b e8	 mov	 r13, r8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));

  0002c	4d 8b 40 08	 mov	 r8, QWORD PTR [r8+8]
  00030	49 8b c8	 mov	 rcx, r8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3399 : 	for (_Diff _Factor = _Shift; _Factor != 0; )

  00033	4c 8b cf	 mov	 r9, rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));

  00036	48 2b c8	 sub	 rcx, rax
  00039	4c 8b f1	 mov	 r14, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3399 : 	for (_Diff _Factor = _Shift; _Factor != 0; )

  0003c	48 85 ff	 test	 rdi, rdi
  0003f	74 13		 je	 SHORT $LN8@Rotate
$LL9@Rotate:

; 3400 : 		{	// find subcycle count as GCD of shift count and length
; 3401 : 		_Diff _Tmp = _Count % _Factor;

  00041	49 8b c6	 mov	 rax, r14

; 3402 : 		_Count = _Factor;

  00044	4d 8b f1	 mov	 r14, r9
  00047	48 99		 cdq
  00049	49 f7 f9	 idiv	 r9

; 3403 : 		_Factor = _Tmp;

  0004c	4c 8b ca	 mov	 r9, rdx
  0004f	48 85 d2	 test	 rdx, rdx
  00052	75 ed		 jne	 SHORT $LL9@Rotate
$LN8@Rotate:

; 3404 : 		}
; 3405 : 
; 3406 : 	if (_Count < _Last - _First)

  00054	4c 3b f1	 cmp	 r14, rcx
  00057	0f 8d 61 01 00
	00		 jge	 $LN4@Rotate

; 3407 : 		for (; 0 < _Count; --_Count)

  0005d	4d 85 f6	 test	 r14, r14
  00060	0f 8e 58 01 00
	00		 jle	 $LN4@Rotate
  00066	48 89 9c 24 f0
	00 00 00	 mov	 QWORD PTR [rsp+240], rbx
  0006e	48 89 b4 24 f8
	00 00 00	 mov	 QWORD PTR [rsp+248], rsi
  00076	0f 29 b4 24 c0
	00 00 00	 movaps	 XMMWORD PTR [rsp+192], xmm6
  0007e	66 90		 npad	 2
$LL6@Rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 244  : 		_Myiter _Tmp = *this;

  00080	41 0f 10 07	 movups	 xmm0, XMMWORD PTR [r15]
  00084	0f 29 45 ef	 movaps	 XMMWORD PTR _Tmp$7[rbp-145], xmm0

; 93   : 		_Myoff += _Off;

  00088	66 0f 73 d8 08	 psrldq	 xmm0, 8
  0008d	66 48 0f 7e c6	 movq	 rsi, xmm0
  00092	49 03 f6	 add	 rsi, r14
  00095	48 89 75 f7	 mov	 QWORD PTR _Tmp$7[rbp-137], rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3410 : 			_RanIt _Next = _Hole;

  00099	0f 28 45 ef	 movaps	 xmm0, XMMWORD PTR _Tmp$7[rbp-145]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 93   : 		_Myoff += _Off;

  0009d	48 8d 04 3e	 lea	 rax, QWORD PTR [rsi+rdi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3410 : 			_RanIt _Next = _Hole;

  000a1	66 0f 7f 45 9f	 movdqa	 XMMWORD PTR _Next$2[rbp-145], xmm0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 128  : 		return (_Myoff == _Right._Myoff);

  000a6	49 3b c0	 cmp	 rax, r8
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3411 : 			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;

  000a9	75 15		 jne	 SHORT $LN12@Rotate
  000ab	49 8b 07	 mov	 rax, QWORD PTR [r15]
  000ae	48 89 45 cf	 mov	 QWORD PTR $T5[rbp-145], rax
  000b2	49 8b 47 08	 mov	 rax, QWORD PTR [r15+8]
  000b6	48 89 45 d7	 mov	 QWORD PTR $T5[rbp-137], rax
  000ba	48 8d 45 cf	 lea	 rax, QWORD PTR $T5[rbp-145]
  000be	eb 16		 jmp	 SHORT $LN13@Rotate
$LN12@Rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 244  : 		_Myiter _Tmp = *this;

  000c0	66 0f 7f 45 af	 movdqa	 XMMWORD PTR _Tmp$3[rbp-145], xmm0

; 93   : 		_Myoff += _Off;

  000c5	48 89 45 b7	 mov	 QWORD PTR _Tmp$3[rbp-137], rax

; 245  : 		return (_Tmp += _Off);

  000c9	0f 28 45 af	 movaps	 xmm0, XMMWORD PTR _Tmp$3[rbp-145]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3411 : 			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;

  000cd	48 8d 45 ff	 lea	 rax, QWORD PTR $T8[rbp-145]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 245  : 		return (_Tmp += _Off);

  000d1	66 0f 7f 45 ff	 movdqa	 XMMWORD PTR $T8[rbp-145], xmm0
$LN13@Rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3411 : 			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;

  000d6	0f 10 30	 movups	 xmm6, XMMWORD PTR [rax]
  000d9	0f 29 75 8f	 movaps	 XMMWORD PTR _Next1$1[rbp-145], xmm6
  000dd	48 8b 5d 97	 mov	 rbx, QWORD PTR _Next1$1[rbp-137]
  000e1	48 8b 45 8f	 mov	 rax, QWORD PTR _Next1$1[rbp-145]
  000e5	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL3@Rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  000f0	4c 8b 40 10	 mov	 r8, QWORD PTR [rax+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  000f4	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  000f8	48 8b 4d 9f	 mov	 rcx, QWORD PTR _Next$2[rbp-145]
  000fc	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  00100	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00104	49 ff c8	 dec	 r8
  00107	48 ff c8	 dec	 rax
  0010a	4c 23 c3	 and	 r8, rbx
  0010d	48 23 45 a7	 and	 rax, QWORD PTR _Next$2[rbp-137]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 26   : 	swap(*_Left, *_Right);

  00111	4a 8b 14 c2	 mov	 rdx, QWORD PTR [rdx+r8*8]
  00115	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00119	e8 00 00 00 00	 call	 ??$swap@VMatrix@geom@@@std@@YAXAEAVMatrix@geom@@0@Z ; std::swap<geom::Matrix>
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));

  0011e	4d 8b 45 08	 mov	 r8, QWORD PTR [r13+8]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3415 : 				_Next = _Next1;

  00122	66 0f 7f 75 9f	 movdqa	 XMMWORD PTR _Next$2[rbp-145], xmm6
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));

  00127	49 8b c0	 mov	 rax, r8
  0012a	48 2b c3	 sub	 rax, rbx
  0012d	48 8b c8	 mov	 rcx, rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3417 : 					: _First + (_Shift - (_Last - _Next1));

  00130	48 3b f8	 cmp	 rdi, rax
  00133	7d 1c		 jge	 SHORT $LN14@Rotate
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 93   : 		_Myoff += _Off;

  00135	48 8d 04 3b	 lea	 rax, QWORD PTR [rbx+rdi]

; 244  : 		_Myiter _Tmp = *this;

  00139	66 0f 7f 75 df	 movdqa	 XMMWORD PTR _Tmp$6[rbp-145], xmm6
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3417 : 					: _First + (_Shift - (_Last - _Next1));

  0013e	48 8d 5d 0f	 lea	 rbx, QWORD PTR $T9[rbp-145]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 93   : 		_Myoff += _Off;

  00142	48 89 45 e7	 mov	 QWORD PTR _Tmp$6[rbp-137], rax

; 245  : 		return (_Tmp += _Off);

  00146	0f 28 45 df	 movaps	 xmm0, XMMWORD PTR _Tmp$6[rbp-145]
  0014a	66 0f 7f 45 0f	 movdqa	 XMMWORD PTR $T9[rbp-145], xmm0
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3417 : 					: _First + (_Shift - (_Last - _Next1));

  0014f	eb 2c		 jmp	 SHORT $LN15@Rotate
$LN14@Rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 244  : 		_Myiter _Tmp = *this;

  00151	41 0f 10 07	 movups	 xmm0, XMMWORD PTR [r15]

; 93   : 		_Myoff += _Off;

  00155	48 8b cf	 mov	 rcx, rdi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3417 : 					: _First + (_Shift - (_Last - _Next1));

  00158	48 8d 5d 1f	 lea	 rbx, QWORD PTR $T10[rbp-145]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 93   : 		_Myoff += _Off;

  0015c	48 2b c8	 sub	 rcx, rax

; 244  : 		_Myiter _Tmp = *this;

  0015f	0f 29 45 bf	 movaps	 XMMWORD PTR _Tmp$4[rbp-145], xmm0

; 93   : 		_Myoff += _Off;

  00163	66 0f 73 d8 08	 psrldq	 xmm0, 8
  00168	66 48 0f 7e c0	 movq	 rax, xmm0
  0016d	48 03 c1	 add	 rax, rcx
  00170	48 89 45 c7	 mov	 QWORD PTR _Tmp$4[rbp-137], rax

; 245  : 		return (_Tmp += _Off);

  00174	0f 28 45 bf	 movaps	 xmm0, XMMWORD PTR _Tmp$4[rbp-145]
  00178	66 0f 7f 45 1f	 movdqa	 XMMWORD PTR $T10[rbp-145], xmm0
$LN15@Rotate:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3417 : 					: _First + (_Shift - (_Last - _Next1));

  0017d	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00180	48 8b 5b 08	 mov	 rbx, QWORD PTR [rbx+8]
  00184	48 89 45 8f	 mov	 QWORD PTR _Next1$1[rbp-145], rax
  00188	48 89 5d 97	 mov	 QWORD PTR _Next1$1[rbp-137], rbx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 128  : 		return (_Myoff == _Right._Myoff);

  0018c	48 3b de	 cmp	 rbx, rsi
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3418 : 				if (_Next1 == _Hole)

  0018f	74 09		 je	 SHORT $LN106@Rotate

; 3411 : 			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;

  00191	0f 28 75 8f	 movaps	 xmm6, XMMWORD PTR _Next1$1[rbp-145]
  00195	e9 56 ff ff ff	 jmp	 $LL3@Rotate
$LN106@Rotate:

; 3407 : 		for (; 0 < _Count; --_Count)

  0019a	49 ff ce	 dec	 r14
  0019d	4d 85 f6	 test	 r14, r14
  001a0	0f 8f da fe ff
	ff		 jg	 $LL6@Rotate
  001a6	0f 28 b4 24 c0
	00 00 00	 movaps	 xmm6, XMMWORD PTR [rsp+192]
  001ae	48 8b b4 24 f8
	00 00 00	 mov	 rsi, QWORD PTR [rsp+248]
  001b6	48 8b 9c 24 f0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+240]
$LN4@Rotate:

; 3419 : 					break;
; 3420 : 				}
; 3421 : 			}
; 3422 : 	}

  001be	4c 8d 9c 24 d0
	00 00 00	 lea	 r11, QWORD PTR [rsp+208]
  001c6	49 8b 7b 30	 mov	 rdi, QWORD PTR [r11+48]
  001ca	4d 8b 6b 38	 mov	 r13, QWORD PTR [r11+56]
  001ce	49 8b e3	 mov	 rsp, r11
  001d1	41 5f		 pop	 r15
  001d3	41 5e		 pop	 r14
  001d5	5d		 pop	 rbp
  001d6	c3		 ret	 0
??$_Rotate@V?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_JVMatrix@geom@@@std@@YAXV?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@00PEA_JPEAVMatrix@geom@@@Z ENDP ; std::_Rotate<std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,__int64,geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Distance2@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_J@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0AEA_JUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
_First$ = 8
_Last$ = 16
_Off$ = 24
__formal$dead$ = 32
??$_Distance2@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_J@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0AEA_JUrandom_access_iterator_tag@0@@Z PROC ; std::_Distance2<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,__int64>, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));

  00000	4c 8b 49 10	 mov	 r9, QWORD PTR [rcx+16]
  00004	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  00008	49 2b c1	 sub	 rax, r9
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 815  : 	_Off += _Last - _First;

  0000b	49 01 00	 add	 QWORD PTR [r8], rax

; 816  : 	}

  0000e	c3		 ret	 0
??$_Distance2@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_J@std@@YAXV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@0AEA_JUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,__int64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??$_Advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_J@std@@YAXAEAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@_JUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
_Where$ = 8
_Off$ = 16
__formal$dead$ = 24
??$_Advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_J@std@@YAXAEAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@_JUrandom_access_iterator_tag@0@@Z PROC ; std::_Advance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,__int64>, COMDAT
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque

; 640  : 		this->_Myoff += _Off;

  00000	48 01 51 10	 add	 QWORD PTR [rcx+16], rdx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 756  : 	}

  00004	c3		 ret	 0
??$_Advance@V?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@_J@std@@YAXAEAV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@0@_JUrandom_access_iterator_tag@0@@Z ENDP ; std::_Advance<std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >,__int64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-, COMDAT

; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));

  00000	4c 8b 42 10	 mov	 r8, QWORD PTR [rdx+16]
  00004	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00008	49 2b c0	 sub	 rax, r8

; 663  : 		return (*(_Mybase *)this - _Right);
; 664  : 		}

  0000b	c3		 ret	 0
??G?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEAVMatrix@geom@@XZ
_TEXT	SEGMENT
this$ = 8
??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEAVMatrix@geom@@XZ PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*, COMDAT

; 204  : 
; 205  : 	pointer operator->() const
; 206  : 		{	// return pointer to class object
; 207  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 208  : 		}
; 209  : 
; 210  : 	_Myiter& operator++()
; 211  : 		{	// preincrement
; 212  : 		++*(_Mybase *)this;
; 213  : 		return (*this);
; 214  : 		}
; 215  : 
; 216  : 	_Myiter operator++(int)
; 217  : 		{	// postincrement
; 218  : 		_Myiter _Tmp = *this;
; 219  : 		++*this;
; 220  : 		return (_Tmp);
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator--()
; 224  : 		{	// predecrement
; 225  : 		--*(_Mybase *)this;
; 226  : 		return (*this);
; 227  : 		}
; 228  : 
; 229  : 	_Myiter operator--(int)
; 230  : 		{	// postdecrement
; 231  : 		_Myiter _Tmp = *this;
; 232  : 		--*this;
; 233  : 		return (_Tmp);
; 234  : 		}
; 235  : 
; 236  : 	_Myiter& operator+=(difference_type _Off)
; 237  : 		{	// increment by integer
; 238  : 		*(_Mybase *)this += _Off;
; 239  : 		return (*this);
; 240  : 		}
; 241  : 
; 242  : 	_Myiter operator+(difference_type _Off) const
; 243  : 		{	// return this + integer
; 244  : 		_Myiter _Tmp = *this;
; 245  : 		return (_Tmp += _Off);
; 246  : 		}
; 247  : 
; 248  : 	_Myiter& operator-=(difference_type _Off)
; 249  : 		{	// decrement by integer
; 250  : 		return (*this += -_Off);
; 251  : 		}
; 252  : 
; 253  : 	_Myiter operator-(difference_type _Off) const
; 254  : 		{	// return this - integer
; 255  : 		_Myiter _Tmp = *this;
; 256  : 		return (_Tmp -= _Off);
; 257  : 		}
; 258  : 
; 259  : 	difference_type operator-(const _Mybase& _Right) const
; 260  : 		{	// return difference of iterators
; 261  : 		return (*(_Mybase *)this - _Right);
; 262  : 		}
; 263  : 
; 264  : 	reference operator[](difference_type _Off) const
; 265  : 		{	// subscript
; 266  : 		return (*(*this + _Off));
; 267  : 		}
; 268  : 	};
; 269  : 
; 270  : template<class _Mydeque> inline
; 271  : 	_Deque_unchecked_iterator<_Mydeque> operator+(
; 272  : 		typename _Deque_unchecked_iterator<_Mydeque>
; 273  : 			::difference_type _Off,
; 274  : 		_Deque_unchecked_iterator<_Mydeque> _Next)
; 275  : 	{	// add offset to iterator
; 276  : 	return (_Next += _Off);
; 277  : 	}
; 278  : 
; 279  : 		// TEMPLATE CLASS _Deque_const_iterator
; 280  : template<class _Mydeque>
; 281  : 	class _Deque_const_iterator
; 282  : 		: public _Iterator_base12
; 283  : 	{	// iterator for nonmutable deque
; 284  : public:
; 285  : 	typedef _Deque_const_iterator<_Mydeque> _Myiter;
; 286  : 	typedef random_access_iterator_tag iterator_category;
; 287  : 
; 288  : 	typedef typename _Mydeque::value_type value_type;
; 289  : 	typedef typename _Mydeque::size_type size_type;
; 290  : 	typedef typename _Mydeque::difference_type difference_type;
; 291  : 	typedef typename _Mydeque::const_pointer pointer;
; 292  : 	typedef typename _Mydeque::const_reference reference;
; 293  : 
; 294  : 	typedef _Mydeque _Mydeque_t;	// helper for expression evaluator
; 295  : 	enum {_EEN_DS = _DEQUESIZ};	// helper for expression evaluator
; 296  : 
; 297  : 	_Deque_const_iterator()
; 298  : 		{	// construct with null pointer
; 299  : 		_Setcont(0);
; 300  : 		_Myoff = 0;
; 301  : 		}
; 302  : 
; 303  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 304  : 		{	// construct with offset _Off in *_Pdeque
; 305  : 		_Setcont((_Mydeque *)_Pdeque);
; 306  : 		_Myoff = _Off;
; 307  : 		}
; 308  : 
; 309  : 	typedef _Deque_unchecked_const_iterator<_Mydeque> _Unchecked_type;
; 310  : 
; 311  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 312  : 		{	// reset from unchecked iterator
; 313  : 		this->_Myoff = _Right._Myoff;
; 314  : 		return (*this);
; 315  : 		}
; 316  : 
; 317  : 	_Unchecked_type _Unchecked() const
; 318  : 		{	// make an unchecked iterator
; 319  : 		return (_Unchecked_type(_Myoff, this->_Getcont()));
; 320  : 		}
; 321  : 
; 322  : 	reference operator*() const
; 323  : 		{	// return designated object
; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);
; 346  : 		}
; 347  : 
; 348  : 	pointer operator->() const
; 349  : 		{	// return pointer to class object
; 350  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 351  : 		}
; 352  : 
; 353  : 	_Myiter& operator++()
; 354  : 		{	// preincrement
; 355  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 356  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 357  : 		if (_Mycont == 0
; 358  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 359  : 		{	// report error
; 360  : 		_DEBUG_ERROR("deque iterator not incrementable");
; 361  : 		_SCL_SECURE_OUT_OF_RANGE;
; 362  : 		}
; 363  : 
; 364  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 365  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 366  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 367  : 		_SCL_SECURE_VALIDATE_RANGE(
; 368  : 			this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 369  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 370  : 
; 371  : 		++_Myoff;
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 385  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 386  : 		if (_Mycont == 0
; 387  : 			|| this->_Myoff <= _Mycont->_Myoff)
; 388  : 		{	// report error
; 389  : 		_DEBUG_ERROR("deque iterator not decrementable");
; 390  : 		_SCL_SECURE_OUT_OF_RANGE;
; 391  : 		}
; 392  : 
; 393  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 394  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 395  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 396  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff < this->_Myoff);
; 397  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 398  : 
; 399  : 		--_Myoff;
; 400  : 		return (*this);
; 401  : 		}
; 402  : 
; 403  : 	_Myiter operator--(int)
; 404  : 		{	// postdecrement
; 405  : 		_Myiter _Tmp = *this;
; 406  : 		--*this;
; 407  : 		return (_Tmp);
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator+=(difference_type _Off)
; 411  : 		{	// increment by integer
; 412  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 413  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 414  : 		if (_Mycont == 0
; 415  : 			|| this->_Myoff + _Off < _Mycont->_Myoff
; 416  : 			|| _Mycont->_Myoff + _Mycont->_Mysize < this->_Myoff + _Off)
; 417  : 			{	// report error
; 418  : 			_DEBUG_ERROR("deque iterator + offset out of range");
; 419  : 			_SCL_SECURE_OUT_OF_RANGE;
; 420  : 			}
; 421  : 
; 422  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 423  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 424  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 425  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff + _Off
; 426  : 			&& this->_Myoff + _Off <= _Mycont->_Myoff + _Mycont->_Mysize);
; 427  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 428  : 
; 429  : 		_Myoff += _Off;
; 430  : 		return (*this);
; 431  : 		}
; 432  : 
; 433  : 	_Myiter operator+(difference_type _Off) const
; 434  : 		{	// return this + integer
; 435  : 		_Myiter _Tmp = *this;
; 436  : 		return (_Tmp += _Off);
; 437  : 		}
; 438  : 
; 439  : 	_Myiter& operator-=(difference_type _Off)
; 440  : 		{	// decrement by integer
; 441  : 		return (*this += -_Off);
; 442  : 		}
; 443  : 
; 444  : 	_Myiter operator-(difference_type _Off) const
; 445  : 		{	// return this - integer
; 446  : 		_Myiter _Tmp = *this;
; 447  : 		return (_Tmp -= _Off);
; 448  : 		}
; 449  : 
; 450  : 	difference_type operator-(const _Myiter& _Right) const
; 451  : 		{	// return difference of iterators
; 452  : 		_Compat(_Right);
; 453  : 		return (_Right._Myoff <= this->_Myoff
; 454  : 			? this->_Myoff - _Right._Myoff
; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));
; 456  : 		}
; 457  : 
; 458  : 	reference operator[](difference_type _Off) const
; 459  : 		{	// subscript
; 460  : 		return (*(*this + _Off));
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const _Myiter& _Right) const
; 464  : 		{	// test for iterator equality
; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);
; 467  : 		}
; 468  : 
; 469  : 	bool operator!=(const _Myiter& _Right) const
; 470  : 		{	// test for iterator inequality
; 471  : 		return (!(*this == _Right));
; 472  : 		}
; 473  : 
; 474  : 	bool operator<(const _Myiter& _Right) const
; 475  : 		{	// test if this < _Right
; 476  : 		_Compat(_Right);
; 477  : 		return (this->_Myoff < _Right._Myoff);
; 478  : 		}
; 479  : 
; 480  : 	bool operator>(const _Myiter& _Right) const
; 481  : 		{	// test if this > _Right
; 482  : 		return (_Right < *this);
; 483  : 		}
; 484  : 
; 485  : 	bool operator<=(const _Myiter& _Right) const
; 486  : 		{	// test if this <= _Right
; 487  : 		return (!(_Right < *this));
; 488  : 		}
; 489  : 
; 490  : 	bool operator>=(const _Myiter& _Right) const
; 491  : 		{	// test if this >= _Right
; 492  : 		return (!(*this < _Right));
; 493  : 		}
; 494  : 
; 495  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 496  : 	void _Compat(const _Myiter& _Right) const
; 497  : 		{	// test for compatible iterator pair
; 498  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 499  : 		if (_Mycont == 0
; 500  : 			|| _Mycont != _Right._Getcont())
; 501  : 			{	// report error
; 502  : 			_DEBUG_ERROR("deque iterators incompatible");
; 503  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 504  : 			}
; 505  : 		}
; 506  : 
; 507  : 	void _Setcont(const _Mydeque *_Pdeque)
; 508  : 		{	// set container pointer
; 509  : 		this->_Adopt(_Pdeque);
; 510  : 		}
; 511  : 
; 512  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 513  : 	void _Compat(const _Myiter& _Right) const
; 514  : 		{	// test for compatible iterator pair
; 515  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 516  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 517  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont == _Right._Getcont());
; 518  : 		}
; 519  : 
; 520  : 	void _Setcont(const _Mydeque *_Pdeque)
; 521  : 		{	// set container pointer
; 522  : 		this->_Adopt(_Pdeque);
; 523  : 		}
; 524  : 
; 525  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 526  : 	void _Compat(const _Myiter&) const
; 527  : 		{	// test for compatible iterator pair
; 528  : 		}
; 529  : 
; 530  : 	void _Setcont(const _Mydeque *_Pdeque)
; 531  : 		{	// set container pointer
; 532  : 		this->_Adopt(_Pdeque);
; 533  : 		}
; 534  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 535  : 
; 536  : 	size_type _Myoff;	// offset of element in deque
; 537  : 	};
; 538  : 
; 539  : template<class _Mydeque> inline
; 540  : 	typename _Deque_const_iterator<_Mydeque>::_Unchecked_type
; 541  : 		_Unchecked(_Deque_const_iterator<_Mydeque> _Iter)
; 542  : 	{	// convert to unchecked
; 543  : 	return (_Iter._Unchecked());
; 544  : 	}
; 545  : 
; 546  : template<class _Mydeque> inline
; 547  : 	_Deque_const_iterator<_Mydeque>&
; 548  : 		_Rechecked(_Deque_const_iterator<_Mydeque>& _Iter,
; 549  : 			typename _Deque_const_iterator<_Mydeque>
; 550  : 				::_Unchecked_type _Right)
; 551  : 	{	// convert to checked
; 552  : 	return (_Iter._Rechecked(_Right));
; 553  : 	}
; 554  : 
; 555  : template<class _Mydeque> inline
; 556  : 	_Deque_const_iterator<_Mydeque> operator+(
; 557  : 		typename _Deque_const_iterator<_Mydeque>::difference_type _Off,
; 558  : 		_Deque_const_iterator<_Mydeque> _Next)
; 559  : 	{	// add offset to iterator
; 560  : 	return (_Next += _Off);
; 561  : 	}
; 562  : 
; 563  : 		// TEMPLATE CLASS _Deque_iterator
; 564  : template<class _Mydeque>
; 565  : 	class _Deque_iterator
; 566  : 		: public _Deque_const_iterator<_Mydeque>
; 567  : 		{	// iterator for mutable deque
; 568  : public:
; 569  : 	typedef _Deque_iterator<_Mydeque> _Myiter;
; 570  : 	typedef _Deque_const_iterator<_Mydeque> _Mybase;
; 571  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Deque_unchecked_type;
; 572  : 	typedef random_access_iterator_tag iterator_category;
; 573  : 
; 574  : 	typedef typename _Mydeque::value_type value_type;
; 575  : 	typedef typename _Mydeque::size_type size_type;
; 576  : 	typedef typename _Mydeque::difference_type difference_type;
; 577  : 	typedef typename _Mydeque::pointer pointer;
; 578  : 	typedef typename _Mydeque::reference reference;
; 579  : 
; 580  : 	_Deque_iterator()
; 581  : 		{	// construct with null deque pointer
; 582  : 		}
; 583  : 
; 584  : 	_Deque_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 585  : 		: _Mybase(_Off, _Pdeque)
; 586  : 		{	// construct with offset _Off in *_Pdeque
; 587  : 		}
; 588  : 
; 589  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Unchecked_type;
; 590  : 
; 591  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 592  : 		{	// reset from unchecked iterator
; 593  : 		this->_Myoff = _Right._Myoff;
; 594  : 		return (*this);
; 595  : 		}
; 596  : 
; 597  : 	_Unchecked_type _Unchecked() const
; 598  : 		{	// make an unchecked iterator
; 599  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));
; 600  : 		}
; 601  : 
; 602  : 	reference operator*() const
; 603  : 		{	// return designated object
; 604  : 		return ((reference)**(_Mybase *)this);
; 605  : 		}
; 606  : 
; 607  : 	pointer operator->() const
; 608  : 		{	// return pointer to class object
; 609  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 610  : 		}
; 611  : 
; 612  : 	_Myiter& operator++()
; 613  : 		{	// preincrement
; 614  : 		++*(_Mybase *)this;
; 615  : 		return (*this);
; 616  : 		}
; 617  : 
; 618  : 	_Myiter operator++(int)
; 619  : 		{	// postincrement
; 620  : 		_Myiter _Tmp = *this;
; 621  : 		++*this;
; 622  : 		return (_Tmp);
; 623  : 		}
; 624  : 
; 625  : 	_Myiter& operator--()
; 626  : 		{	// predecrement
; 627  : 		--*(_Mybase *)this;
; 628  : 		return (*this);
; 629  : 		}
; 630  : 
; 631  : 	_Myiter operator--(int)
; 632  : 		{	// postdecrement
; 633  : 		_Myiter _Tmp = *this;
; 634  : 		--*this;
; 635  : 		return (_Tmp);
; 636  : 		}
; 637  : 
; 638  : 	_Myiter& operator+=(difference_type _Off)
; 639  : 		{	// increment by integer
; 640  : 		this->_Myoff += _Off;
; 641  : 		return (*this);
; 642  : 		}
; 643  : 
; 644  : 	_Myiter operator+(difference_type _Off) const
; 645  : 		{	// return this + integer
; 646  : 		_Myiter _Tmp = *this;
; 647  : 		return (_Tmp += _Off);
; 648  : 		}
; 649  : 
; 650  : 	_Myiter& operator-=(difference_type _Off)
; 651  : 		{	// decrement by integer
; 652  : 		return (*this += -_Off);
; 653  : 		}
; 654  : 
; 655  : 	_Myiter operator-(difference_type _Off) const
; 656  : 		{	// return this - integer
; 657  : 		_Myiter _Tmp = *this;
; 658  : 		return (_Tmp -= _Off);
; 659  : 		}
; 660  : 
; 661  : 	difference_type operator-(const _Mybase& _Right) const
; 662  : 		{	// return difference of iterators
; 663  : 		return (*(_Mybase *)this - _Right);
; 664  : 		}
; 665  : 
; 666  : 	reference operator[](difference_type _Off) const
; 667  : 		{	// subscript
; 668  : 		return (*(*this + _Off));
; 669  : 		}
; 670  : 	};
; 671  : 
; 672  : template<class _Mydeque> inline
; 673  : 	typename _Deque_iterator<_Mydeque>::_Unchecked_type
; 674  : 		_Unchecked(_Deque_iterator<_Mydeque> _Iter)
; 675  : 	{	// convert to unchecked
; 676  : 	return (_Iter._Unchecked());
; 677  : 	}
; 678  : 
; 679  : template<class _Mydeque> inline
; 680  : 	_Deque_iterator<_Mydeque>&
; 681  : 		_Rechecked(_Deque_iterator<_Mydeque>& _Iter,
; 682  : 			typename _Deque_iterator<_Mydeque>
; 683  : 				::_Unchecked_type _Right)
; 684  : 	{	// convert to checked
; 685  : 	return (_Iter._Rechecked(_Right));
; 686  : 	}
; 687  : 
; 688  : template<class _Mydeque> inline
; 689  : 	_Deque_iterator<_Mydeque> operator+(
; 690  : 		typename _Deque_iterator<_Mydeque>::difference_type _Off,
; 691  : 		_Deque_iterator<_Mydeque> _Next)
; 692  : 	{	// add offset to iterator
; 693  : 	return (_Next += _Off);
; 694  : 	}
; 695  : 
; 696  : 		// deque TYPE WRAPPERS
; 697  : template<class _Value_type,
; 698  : 	class _Size_type,
; 699  : 	class _Difference_type,
; 700  : 	class _Pointer,
; 701  : 	class _Const_pointer,
; 702  : 	class _Reference,
; 703  : 	class _Const_reference,
; 704  : 	class _Mapptr_type>
; 705  : 	struct _Deque_iter_types
; 706  : 	{	// wraps types needed by iterators
; 707  : 	typedef _Value_type value_type;
; 708  : 	typedef _Size_type size_type;
; 709  : 	typedef _Difference_type difference_type;
; 710  : 	typedef _Pointer pointer;
; 711  : 	typedef _Const_pointer const_pointer;
; 712  : 	typedef _Reference reference;
; 713  : 	typedef _Const_reference const_reference;
; 714  : 	typedef _Mapptr_type _Mapptr;
; 715  : 	};
; 716  : 
; 717  : template<class _Ty>
; 718  : 	struct _Deque_simple_types
; 719  : 		: public _Simple_types<_Ty>
; 720  : 	{	// wraps types needed by iterators
; 721  : 	typedef _Ty **_Mapptr;
; 722  : 	};
; 723  : 
; 724  : template<class _Ty,
; 725  : 	class _Alloc0>
; 726  : 	struct _Deque_base_types
; 727  : 	{	// types needed for a container base
; 728  : 	typedef _Alloc0 _Alloc;
; 729  : 	typedef _Deque_base_types<_Ty, _Alloc> _Myt;
; 730  : 
; 731  :  #if _HAS_CPP0X
; 732  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 733  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 734  : 
; 735  :  #else /* _HAS_CPP0X */
; 736  : 	typedef typename _Alloc::template rebind<_Ty>::other _Alty;
; 737  :  #endif /* _HAS_CPP0X */
; 738  : 
; 739  : 	typedef typename _Alty::pointer _Tptr;
; 740  : 	typedef typename _Alty::template rebind<_Tptr>::other _Alpty;
; 741  : 	typedef typename _Alpty::pointer _Mapptr;
; 742  : 
; 743  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 744  : 		_Deque_simple_types<typename _Alty::value_type>,
; 745  : 		_Deque_iter_types<typename _Alty::value_type,
; 746  : 			typename _Alty::size_type,
; 747  : 			typename _Alty::difference_type,
; 748  : 			typename _Alty::pointer,
; 749  : 			typename _Alty::const_pointer,
; 750  : 			typename _Alty::reference,
; 751  : 			typename _Alty::const_reference,
; 752  : 			_Mapptr> >::type
; 753  : 		_Val_types;
; 754  : 	};
; 755  : 
; 756  : 		// TEMPLATE CLASS _Deque_val
; 757  : template<class _Val_types>
; 758  : 	class _Deque_val
; 759  : 		: public _Container_base12
; 760  : 	{	// base class for deque to hold data
; 761  : public:
; 762  : 	typedef _Deque_val<_Val_types> _Myt;
; 763  : 
; 764  : 	typedef typename _Val_types::value_type value_type;
; 765  : 	typedef typename _Val_types::size_type size_type;
; 766  : 	typedef typename _Val_types::difference_type difference_type;
; 767  : 	typedef typename _Val_types::pointer pointer;
; 768  : 	typedef typename _Val_types::const_pointer const_pointer;
; 769  : 	typedef typename _Val_types::reference reference;
; 770  : 	typedef typename _Val_types::const_reference const_reference;
; 771  : 	typedef typename _Val_types::_Mapptr _Mapptr;
; 772  : 
; 773  : 	typedef _Deque_iterator<_Myt> iterator;
; 774  : 	typedef _Deque_const_iterator<_Myt> const_iterator;
; 775  : 
; 776  : 	_Deque_val()
; 777  : 		{	// initialize values
; 778  : 		_Map = _Mapptr();
; 779  : 		_Mapsize = 0;
; 780  : 		_Myoff = 0;
; 781  : 		_Mysize = 0;
; 782  : 		}
; 783  : 
; 784  : 	size_type _Getblock(size_type _Off) const
; 785  : 		{	// determine block from offset
; 786  : 			// NB: _Mapsize and _DEQUESIZ are guaranteed to be powers of 2
; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00003	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]

; 202  : 		return ((reference)**(_Mybase *)this);

  00007	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 204  : 
; 205  : 	pointer operator->() const
; 206  : 		{	// return pointer to class object
; 207  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 208  : 		}
; 209  : 
; 210  : 	_Myiter& operator++()
; 211  : 		{	// preincrement
; 212  : 		++*(_Mybase *)this;
; 213  : 		return (*this);
; 214  : 		}
; 215  : 
; 216  : 	_Myiter operator++(int)
; 217  : 		{	// postincrement
; 218  : 		_Myiter _Tmp = *this;
; 219  : 		++*this;
; 220  : 		return (_Tmp);
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator--()
; 224  : 		{	// predecrement
; 225  : 		--*(_Mybase *)this;
; 226  : 		return (*this);
; 227  : 		}
; 228  : 
; 229  : 	_Myiter operator--(int)
; 230  : 		{	// postdecrement
; 231  : 		_Myiter _Tmp = *this;
; 232  : 		--*this;
; 233  : 		return (_Tmp);
; 234  : 		}
; 235  : 
; 236  : 	_Myiter& operator+=(difference_type _Off)
; 237  : 		{	// increment by integer
; 238  : 		*(_Mybase *)this += _Off;
; 239  : 		return (*this);
; 240  : 		}
; 241  : 
; 242  : 	_Myiter operator+(difference_type _Off) const
; 243  : 		{	// return this + integer
; 244  : 		_Myiter _Tmp = *this;
; 245  : 		return (_Tmp += _Off);
; 246  : 		}
; 247  : 
; 248  : 	_Myiter& operator-=(difference_type _Off)
; 249  : 		{	// decrement by integer
; 250  : 		return (*this += -_Off);
; 251  : 		}
; 252  : 
; 253  : 	_Myiter operator-(difference_type _Off) const
; 254  : 		{	// return this - integer
; 255  : 		_Myiter _Tmp = *this;
; 256  : 		return (_Tmp -= _Off);
; 257  : 		}
; 258  : 
; 259  : 	difference_type operator-(const _Mybase& _Right) const
; 260  : 		{	// return difference of iterators
; 261  : 		return (*(_Mybase *)this - _Right);
; 262  : 		}
; 263  : 
; 264  : 	reference operator[](difference_type _Off) const
; 265  : 		{	// subscript
; 266  : 		return (*(*this + _Off));
; 267  : 		}
; 268  : 	};
; 269  : 
; 270  : template<class _Mydeque> inline
; 271  : 	_Deque_unchecked_iterator<_Mydeque> operator+(
; 272  : 		typename _Deque_unchecked_iterator<_Mydeque>
; 273  : 			::difference_type _Off,
; 274  : 		_Deque_unchecked_iterator<_Mydeque> _Next)
; 275  : 	{	// add offset to iterator
; 276  : 	return (_Next += _Off);
; 277  : 	}
; 278  : 
; 279  : 		// TEMPLATE CLASS _Deque_const_iterator
; 280  : template<class _Mydeque>
; 281  : 	class _Deque_const_iterator
; 282  : 		: public _Iterator_base12
; 283  : 	{	// iterator for nonmutable deque
; 284  : public:
; 285  : 	typedef _Deque_const_iterator<_Mydeque> _Myiter;
; 286  : 	typedef random_access_iterator_tag iterator_category;
; 287  : 
; 288  : 	typedef typename _Mydeque::value_type value_type;
; 289  : 	typedef typename _Mydeque::size_type size_type;
; 290  : 	typedef typename _Mydeque::difference_type difference_type;
; 291  : 	typedef typename _Mydeque::const_pointer pointer;
; 292  : 	typedef typename _Mydeque::const_reference reference;
; 293  : 
; 294  : 	typedef _Mydeque _Mydeque_t;	// helper for expression evaluator
; 295  : 	enum {_EEN_DS = _DEQUESIZ};	// helper for expression evaluator
; 296  : 
; 297  : 	_Deque_const_iterator()
; 298  : 		{	// construct with null pointer
; 299  : 		_Setcont(0);
; 300  : 		_Myoff = 0;
; 301  : 		}
; 302  : 
; 303  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 304  : 		{	// construct with offset _Off in *_Pdeque
; 305  : 		_Setcont((_Mydeque *)_Pdeque);
; 306  : 		_Myoff = _Off;
; 307  : 		}
; 308  : 
; 309  : 	typedef _Deque_unchecked_const_iterator<_Mydeque> _Unchecked_type;
; 310  : 
; 311  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 312  : 		{	// reset from unchecked iterator
; 313  : 		this->_Myoff = _Right._Myoff;
; 314  : 		return (*this);
; 315  : 		}
; 316  : 
; 317  : 	_Unchecked_type _Unchecked() const
; 318  : 		{	// make an unchecked iterator
; 319  : 		return (_Unchecked_type(_Myoff, this->_Getcont()));
; 320  : 		}
; 321  : 
; 322  : 	reference operator*() const
; 323  : 		{	// return designated object
; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);
; 346  : 		}
; 347  : 
; 348  : 	pointer operator->() const
; 349  : 		{	// return pointer to class object
; 350  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 351  : 		}
; 352  : 
; 353  : 	_Myiter& operator++()
; 354  : 		{	// preincrement
; 355  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 356  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 357  : 		if (_Mycont == 0
; 358  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 359  : 		{	// report error
; 360  : 		_DEBUG_ERROR("deque iterator not incrementable");
; 361  : 		_SCL_SECURE_OUT_OF_RANGE;
; 362  : 		}
; 363  : 
; 364  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 365  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 366  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 367  : 		_SCL_SECURE_VALIDATE_RANGE(
; 368  : 			this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 369  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 370  : 
; 371  : 		++_Myoff;
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 385  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 386  : 		if (_Mycont == 0
; 387  : 			|| this->_Myoff <= _Mycont->_Myoff)
; 388  : 		{	// report error
; 389  : 		_DEBUG_ERROR("deque iterator not decrementable");
; 390  : 		_SCL_SECURE_OUT_OF_RANGE;
; 391  : 		}
; 392  : 
; 393  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 394  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 395  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 396  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff < this->_Myoff);
; 397  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 398  : 
; 399  : 		--_Myoff;
; 400  : 		return (*this);
; 401  : 		}
; 402  : 
; 403  : 	_Myiter operator--(int)
; 404  : 		{	// postdecrement
; 405  : 		_Myiter _Tmp = *this;
; 406  : 		--*this;
; 407  : 		return (_Tmp);
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator+=(difference_type _Off)
; 411  : 		{	// increment by integer
; 412  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 413  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 414  : 		if (_Mycont == 0
; 415  : 			|| this->_Myoff + _Off < _Mycont->_Myoff
; 416  : 			|| _Mycont->_Myoff + _Mycont->_Mysize < this->_Myoff + _Off)
; 417  : 			{	// report error
; 418  : 			_DEBUG_ERROR("deque iterator + offset out of range");
; 419  : 			_SCL_SECURE_OUT_OF_RANGE;
; 420  : 			}
; 421  : 
; 422  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 423  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 424  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 425  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff + _Off
; 426  : 			&& this->_Myoff + _Off <= _Mycont->_Myoff + _Mycont->_Mysize);
; 427  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 428  : 
; 429  : 		_Myoff += _Off;
; 430  : 		return (*this);
; 431  : 		}
; 432  : 
; 433  : 	_Myiter operator+(difference_type _Off) const
; 434  : 		{	// return this + integer
; 435  : 		_Myiter _Tmp = *this;
; 436  : 		return (_Tmp += _Off);
; 437  : 		}
; 438  : 
; 439  : 	_Myiter& operator-=(difference_type _Off)
; 440  : 		{	// decrement by integer
; 441  : 		return (*this += -_Off);
; 442  : 		}
; 443  : 
; 444  : 	_Myiter operator-(difference_type _Off) const
; 445  : 		{	// return this - integer
; 446  : 		_Myiter _Tmp = *this;
; 447  : 		return (_Tmp -= _Off);
; 448  : 		}
; 449  : 
; 450  : 	difference_type operator-(const _Myiter& _Right) const
; 451  : 		{	// return difference of iterators
; 452  : 		_Compat(_Right);
; 453  : 		return (_Right._Myoff <= this->_Myoff
; 454  : 			? this->_Myoff - _Right._Myoff
; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));
; 456  : 		}
; 457  : 
; 458  : 	reference operator[](difference_type _Off) const
; 459  : 		{	// subscript
; 460  : 		return (*(*this + _Off));
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const _Myiter& _Right) const
; 464  : 		{	// test for iterator equality
; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);
; 467  : 		}
; 468  : 
; 469  : 	bool operator!=(const _Myiter& _Right) const
; 470  : 		{	// test for iterator inequality
; 471  : 		return (!(*this == _Right));
; 472  : 		}
; 473  : 
; 474  : 	bool operator<(const _Myiter& _Right) const
; 475  : 		{	// test if this < _Right
; 476  : 		_Compat(_Right);
; 477  : 		return (this->_Myoff < _Right._Myoff);
; 478  : 		}
; 479  : 
; 480  : 	bool operator>(const _Myiter& _Right) const
; 481  : 		{	// test if this > _Right
; 482  : 		return (_Right < *this);
; 483  : 		}
; 484  : 
; 485  : 	bool operator<=(const _Myiter& _Right) const
; 486  : 		{	// test if this <= _Right
; 487  : 		return (!(_Right < *this));
; 488  : 		}
; 489  : 
; 490  : 	bool operator>=(const _Myiter& _Right) const
; 491  : 		{	// test if this >= _Right
; 492  : 		return (!(*this < _Right));
; 493  : 		}
; 494  : 
; 495  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 496  : 	void _Compat(const _Myiter& _Right) const
; 497  : 		{	// test for compatible iterator pair
; 498  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 499  : 		if (_Mycont == 0
; 500  : 			|| _Mycont != _Right._Getcont())
; 501  : 			{	// report error
; 502  : 			_DEBUG_ERROR("deque iterators incompatible");
; 503  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 504  : 			}
; 505  : 		}
; 506  : 
; 507  : 	void _Setcont(const _Mydeque *_Pdeque)
; 508  : 		{	// set container pointer
; 509  : 		this->_Adopt(_Pdeque);
; 510  : 		}
; 511  : 
; 512  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 513  : 	void _Compat(const _Myiter& _Right) const
; 514  : 		{	// test for compatible iterator pair
; 515  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 516  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 517  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont == _Right._Getcont());
; 518  : 		}
; 519  : 
; 520  : 	void _Setcont(const _Mydeque *_Pdeque)
; 521  : 		{	// set container pointer
; 522  : 		this->_Adopt(_Pdeque);
; 523  : 		}
; 524  : 
; 525  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 526  : 	void _Compat(const _Myiter&) const
; 527  : 		{	// test for compatible iterator pair
; 528  : 		}
; 529  : 
; 530  : 	void _Setcont(const _Mydeque *_Pdeque)
; 531  : 		{	// set container pointer
; 532  : 		this->_Adopt(_Pdeque);
; 533  : 		}
; 534  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 535  : 
; 536  : 	size_type _Myoff;	// offset of element in deque
; 537  : 	};
; 538  : 
; 539  : template<class _Mydeque> inline
; 540  : 	typename _Deque_const_iterator<_Mydeque>::_Unchecked_type
; 541  : 		_Unchecked(_Deque_const_iterator<_Mydeque> _Iter)
; 542  : 	{	// convert to unchecked
; 543  : 	return (_Iter._Unchecked());
; 544  : 	}
; 545  : 
; 546  : template<class _Mydeque> inline
; 547  : 	_Deque_const_iterator<_Mydeque>&
; 548  : 		_Rechecked(_Deque_const_iterator<_Mydeque>& _Iter,
; 549  : 			typename _Deque_const_iterator<_Mydeque>
; 550  : 				::_Unchecked_type _Right)
; 551  : 	{	// convert to checked
; 552  : 	return (_Iter._Rechecked(_Right));
; 553  : 	}
; 554  : 
; 555  : template<class _Mydeque> inline
; 556  : 	_Deque_const_iterator<_Mydeque> operator+(
; 557  : 		typename _Deque_const_iterator<_Mydeque>::difference_type _Off,
; 558  : 		_Deque_const_iterator<_Mydeque> _Next)
; 559  : 	{	// add offset to iterator
; 560  : 	return (_Next += _Off);
; 561  : 	}
; 562  : 
; 563  : 		// TEMPLATE CLASS _Deque_iterator
; 564  : template<class _Mydeque>
; 565  : 	class _Deque_iterator
; 566  : 		: public _Deque_const_iterator<_Mydeque>
; 567  : 		{	// iterator for mutable deque
; 568  : public:
; 569  : 	typedef _Deque_iterator<_Mydeque> _Myiter;
; 570  : 	typedef _Deque_const_iterator<_Mydeque> _Mybase;
; 571  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Deque_unchecked_type;
; 572  : 	typedef random_access_iterator_tag iterator_category;
; 573  : 
; 574  : 	typedef typename _Mydeque::value_type value_type;
; 575  : 	typedef typename _Mydeque::size_type size_type;
; 576  : 	typedef typename _Mydeque::difference_type difference_type;
; 577  : 	typedef typename _Mydeque::pointer pointer;
; 578  : 	typedef typename _Mydeque::reference reference;
; 579  : 
; 580  : 	_Deque_iterator()
; 581  : 		{	// construct with null deque pointer
; 582  : 		}
; 583  : 
; 584  : 	_Deque_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 585  : 		: _Mybase(_Off, _Pdeque)
; 586  : 		{	// construct with offset _Off in *_Pdeque
; 587  : 		}
; 588  : 
; 589  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Unchecked_type;
; 590  : 
; 591  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 592  : 		{	// reset from unchecked iterator
; 593  : 		this->_Myoff = _Right._Myoff;
; 594  : 		return (*this);
; 595  : 		}
; 596  : 
; 597  : 	_Unchecked_type _Unchecked() const
; 598  : 		{	// make an unchecked iterator
; 599  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));
; 600  : 		}
; 601  : 
; 602  : 	reference operator*() const
; 603  : 		{	// return designated object
; 604  : 		return ((reference)**(_Mybase *)this);
; 605  : 		}
; 606  : 
; 607  : 	pointer operator->() const
; 608  : 		{	// return pointer to class object
; 609  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 610  : 		}
; 611  : 
; 612  : 	_Myiter& operator++()
; 613  : 		{	// preincrement
; 614  : 		++*(_Mybase *)this;
; 615  : 		return (*this);
; 616  : 		}
; 617  : 
; 618  : 	_Myiter operator++(int)
; 619  : 		{	// postincrement
; 620  : 		_Myiter _Tmp = *this;
; 621  : 		++*this;
; 622  : 		return (_Tmp);
; 623  : 		}
; 624  : 
; 625  : 	_Myiter& operator--()
; 626  : 		{	// predecrement
; 627  : 		--*(_Mybase *)this;
; 628  : 		return (*this);
; 629  : 		}
; 630  : 
; 631  : 	_Myiter operator--(int)
; 632  : 		{	// postdecrement
; 633  : 		_Myiter _Tmp = *this;
; 634  : 		--*this;
; 635  : 		return (_Tmp);
; 636  : 		}
; 637  : 
; 638  : 	_Myiter& operator+=(difference_type _Off)
; 639  : 		{	// increment by integer
; 640  : 		this->_Myoff += _Off;
; 641  : 		return (*this);
; 642  : 		}
; 643  : 
; 644  : 	_Myiter operator+(difference_type _Off) const
; 645  : 		{	// return this + integer
; 646  : 		_Myiter _Tmp = *this;
; 647  : 		return (_Tmp += _Off);
; 648  : 		}
; 649  : 
; 650  : 	_Myiter& operator-=(difference_type _Off)
; 651  : 		{	// decrement by integer
; 652  : 		return (*this += -_Off);
; 653  : 		}
; 654  : 
; 655  : 	_Myiter operator-(difference_type _Off) const
; 656  : 		{	// return this - integer
; 657  : 		_Myiter _Tmp = *this;
; 658  : 		return (_Tmp -= _Off);
; 659  : 		}
; 660  : 
; 661  : 	difference_type operator-(const _Mybase& _Right) const
; 662  : 		{	// return difference of iterators
; 663  : 		return (*(_Mybase *)this - _Right);
; 664  : 		}
; 665  : 
; 666  : 	reference operator[](difference_type _Off) const
; 667  : 		{	// subscript
; 668  : 		return (*(*this + _Off));
; 669  : 		}
; 670  : 	};
; 671  : 
; 672  : template<class _Mydeque> inline
; 673  : 	typename _Deque_iterator<_Mydeque>::_Unchecked_type
; 674  : 		_Unchecked(_Deque_iterator<_Mydeque> _Iter)
; 675  : 	{	// convert to unchecked
; 676  : 	return (_Iter._Unchecked());
; 677  : 	}
; 678  : 
; 679  : template<class _Mydeque> inline
; 680  : 	_Deque_iterator<_Mydeque>&
; 681  : 		_Rechecked(_Deque_iterator<_Mydeque>& _Iter,
; 682  : 			typename _Deque_iterator<_Mydeque>
; 683  : 				::_Unchecked_type _Right)
; 684  : 	{	// convert to checked
; 685  : 	return (_Iter._Rechecked(_Right));
; 686  : 	}
; 687  : 
; 688  : template<class _Mydeque> inline
; 689  : 	_Deque_iterator<_Mydeque> operator+(
; 690  : 		typename _Deque_iterator<_Mydeque>::difference_type _Off,
; 691  : 		_Deque_iterator<_Mydeque> _Next)
; 692  : 	{	// add offset to iterator
; 693  : 	return (_Next += _Off);
; 694  : 	}
; 695  : 
; 696  : 		// deque TYPE WRAPPERS
; 697  : template<class _Value_type,
; 698  : 	class _Size_type,
; 699  : 	class _Difference_type,
; 700  : 	class _Pointer,
; 701  : 	class _Const_pointer,
; 702  : 	class _Reference,
; 703  : 	class _Const_reference,
; 704  : 	class _Mapptr_type>
; 705  : 	struct _Deque_iter_types
; 706  : 	{	// wraps types needed by iterators
; 707  : 	typedef _Value_type value_type;
; 708  : 	typedef _Size_type size_type;
; 709  : 	typedef _Difference_type difference_type;
; 710  : 	typedef _Pointer pointer;
; 711  : 	typedef _Const_pointer const_pointer;
; 712  : 	typedef _Reference reference;
; 713  : 	typedef _Const_reference const_reference;
; 714  : 	typedef _Mapptr_type _Mapptr;
; 715  : 	};
; 716  : 
; 717  : template<class _Ty>
; 718  : 	struct _Deque_simple_types
; 719  : 		: public _Simple_types<_Ty>
; 720  : 	{	// wraps types needed by iterators
; 721  : 	typedef _Ty **_Mapptr;
; 722  : 	};
; 723  : 
; 724  : template<class _Ty,
; 725  : 	class _Alloc0>
; 726  : 	struct _Deque_base_types
; 727  : 	{	// types needed for a container base
; 728  : 	typedef _Alloc0 _Alloc;
; 729  : 	typedef _Deque_base_types<_Ty, _Alloc> _Myt;
; 730  : 
; 731  :  #if _HAS_CPP0X
; 732  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 733  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 734  : 
; 735  :  #else /* _HAS_CPP0X */
; 736  : 	typedef typename _Alloc::template rebind<_Ty>::other _Alty;
; 737  :  #endif /* _HAS_CPP0X */
; 738  : 
; 739  : 	typedef typename _Alty::pointer _Tptr;
; 740  : 	typedef typename _Alty::template rebind<_Tptr>::other _Alpty;
; 741  : 	typedef typename _Alpty::pointer _Mapptr;
; 742  : 
; 743  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 744  : 		_Deque_simple_types<typename _Alty::value_type>,
; 745  : 		_Deque_iter_types<typename _Alty::value_type,
; 746  : 			typename _Alty::size_type,
; 747  : 			typename _Alty::difference_type,
; 748  : 			typename _Alty::pointer,
; 749  : 			typename _Alty::const_pointer,
; 750  : 			typename _Alty::reference,
; 751  : 			typename _Alty::const_reference,
; 752  : 			_Mapptr> >::type
; 753  : 		_Val_types;
; 754  : 	};
; 755  : 
; 756  : 		// TEMPLATE CLASS _Deque_val
; 757  : template<class _Val_types>
; 758  : 	class _Deque_val
; 759  : 		: public _Container_base12
; 760  : 	{	// base class for deque to hold data
; 761  : public:
; 762  : 	typedef _Deque_val<_Val_types> _Myt;
; 763  : 
; 764  : 	typedef typename _Val_types::value_type value_type;
; 765  : 	typedef typename _Val_types::size_type size_type;
; 766  : 	typedef typename _Val_types::difference_type difference_type;
; 767  : 	typedef typename _Val_types::pointer pointer;
; 768  : 	typedef typename _Val_types::const_pointer const_pointer;
; 769  : 	typedef typename _Val_types::reference reference;
; 770  : 	typedef typename _Val_types::const_reference const_reference;
; 771  : 	typedef typename _Val_types::_Mapptr _Mapptr;
; 772  : 
; 773  : 	typedef _Deque_iterator<_Myt> iterator;
; 774  : 	typedef _Deque_const_iterator<_Myt> const_iterator;
; 775  : 
; 776  : 	_Deque_val()
; 777  : 		{	// initialize values
; 778  : 		_Map = _Mapptr();
; 779  : 		_Mapsize = 0;
; 780  : 		_Myoff = 0;
; 781  : 		_Mysize = 0;
; 782  : 		}
; 783  : 
; 784  : 	size_type _Getblock(size_type _Off) const
; 785  : 		{	// determine block from offset
; 786  : 			// NB: _Mapsize and _DEQUESIZ are guaranteed to be powers of 2
; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0000b	48 ff ca	 dec	 rdx
  0000e	48 23 51 08	 and	 rdx, QWORD PTR [rcx+8]

; 202  : 		return ((reference)**(_Mybase *)this);

  00012	48 8b 04 d0	 mov	 rax, QWORD PTR [rax+rdx*8]

; 203  : 		}

  00016	c3		 ret	 0
??D?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEAVMatrix@geom@@XZ ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??H?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
_Off$ = 24
??H?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+, COMDAT

; 244  : 		_Myiter _Tmp = *this;

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00003	4c 8b 49 08	 mov	 r9, QWORD PTR [rcx+8]

; 245  : 		return (_Tmp += _Off);

  00007	48 89 02	 mov	 QWORD PTR [rdx], rax

; 93   : 		_Myoff += _Off;

  0000a	4d 03 c8	 add	 r9, r8

; 245  : 		return (_Tmp += _Off);

  0000d	48 8b c2	 mov	 rax, rdx
  00010	4c 89 4a 08	 mov	 QWORD PTR [rdx+8], r9

; 246  : 		}

  00014	c3		 ret	 0
??H?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA?AV01@_J@Z ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??G?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??G?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-, COMDAT

; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));

  00000	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00004	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00008	49 2b c0	 sub	 rax, r8

; 261  : 		return (*(_Mybase *)this - _Right);
; 262  : 		}

  0000b	c3		 ret	 0
??G?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@1@@Z ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??Y?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
??Y?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z PROC ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=, COMDAT

; 93   : 		_Myoff += _Off;

  00000	48 01 51 08	 add	 QWORD PTR [rcx+8], rdx

; 238  : 		*(_Mybase *)this += _Off;
; 239  : 		return (*this);

  00004	48 8b c1	 mov	 rax, rcx

; 240  : 		}

  00007	c3		 ret	 0
??Y?$_Deque_unchecked_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ENDP ; std::_Deque_unchecked_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEBVMatrix@geom@@XZ
_TEXT	SEGMENT
this$ = 8
??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEBVMatrix@geom@@XZ PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*, COMDAT

; 59   : 
; 60   : 	pointer operator->() const
; 61   : 		{	// return pointer to class object
; 62   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 63   : 		}
; 64   : 
; 65   : 	_Myiter& operator++()
; 66   : 		{	// preincrement
; 67   : 		++_Myoff;
; 68   : 		return (*this);
; 69   : 		}
; 70   : 
; 71   : 	_Myiter operator++(int)
; 72   : 		{	// postincrement
; 73   : 		_Myiter _Tmp = *this;
; 74   : 		++*this;
; 75   : 		return (_Tmp);
; 76   : 		}
; 77   : 
; 78   : 	_Myiter& operator--()
; 79   : 		{	// predecrement
; 80   : 		--_Myoff;
; 81   : 		return (*this);
; 82   : 		}
; 83   : 
; 84   : 	_Myiter operator--(int)
; 85   : 		{	// postdecrement
; 86   : 		_Myiter _Tmp = *this;
; 87   : 		--*this;
; 88   : 		return (_Tmp);
; 89   : 		}
; 90   : 
; 91   : 	_Myiter& operator+=(difference_type _Off)
; 92   : 		{	// increment by integer
; 93   : 		_Myoff += _Off;
; 94   : 		return (*this);
; 95   : 		}
; 96   : 
; 97   : 	_Myiter operator+(difference_type _Off) const
; 98   : 		{	// return this + integer
; 99   : 		_Myiter _Tmp = *this;
; 100  : 		return (_Tmp += _Off);
; 101  : 		}
; 102  : 
; 103  : 	_Myiter& operator-=(difference_type _Off)
; 104  : 		{	// decrement by integer
; 105  : 		return (*this += -_Off);
; 106  : 		}
; 107  : 
; 108  : 	_Myiter operator-(difference_type _Off) const
; 109  : 		{	// return this - integer
; 110  : 		_Myiter _Tmp = *this;
; 111  : 		return (_Tmp -= _Off);
; 112  : 		}
; 113  : 
; 114  : 	difference_type operator-(const _Myiter& _Right) const
; 115  : 		{	// return difference of iterators
; 116  : 		return (_Right._Myoff <= _Myoff
; 117  : 			? _Myoff - _Right._Myoff
; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));
; 119  : 		}
; 120  : 
; 121  : 	reference operator[](difference_type _Off) const
; 122  : 		{	// subscript
; 123  : 		return (*(*this + _Off));
; 124  : 		}
; 125  : 
; 126  : 	bool operator==(const _Myiter& _Right) const
; 127  : 		{	// test for iterator equality
; 128  : 		return (_Myoff == _Right._Myoff);
; 129  : 		}
; 130  : 
; 131  : 	bool operator!=(const _Myiter& _Right) const
; 132  : 		{	// test for iterator inequality
; 133  : 		return (!(*this == _Right));
; 134  : 		}
; 135  : 
; 136  : 	bool operator<(const _Myiter& _Right) const
; 137  : 		{	// test if this < _Right
; 138  : 		return (_Myoff < _Right._Myoff);
; 139  : 		}
; 140  : 
; 141  : 	bool operator>(const _Myiter& _Right) const
; 142  : 		{	// test if this > _Right
; 143  : 		return (_Right < *this);
; 144  : 		}
; 145  : 
; 146  : 	bool operator<=(const _Myiter& _Right) const
; 147  : 		{	// test if this <= _Right
; 148  : 		return (!(_Right < *this));
; 149  : 		}
; 150  : 
; 151  : 	bool operator>=(const _Myiter& _Right) const
; 152  : 		{	// test if this >= _Right
; 153  : 		return (!(*this < _Right));
; 154  : 		}
; 155  : 
; 156  : 	const _Container_base12 *_Getcont() const
; 157  : 		{	// get container pointer
; 158  : 		return (_Mycont);
; 159  : 		}
; 160  : 
; 161  : 	const _Mydeque *_Mycont;	// pointer to deque
; 162  : 	size_type _Myoff;	// offset of element in deque
; 163  : 	};
; 164  : 
; 165  : template<class _Mydeque> inline
; 166  : 	_Deque_unchecked_const_iterator<_Mydeque> operator+(
; 167  : 		typename _Deque_unchecked_const_iterator<_Mydeque>
; 168  : 			::difference_type _Off,
; 169  : 		_Deque_unchecked_const_iterator<_Mydeque> _Next)
; 170  : 	{	// add offset to iterator
; 171  : 	return (_Next += _Off);
; 172  : 	}
; 173  : 
; 174  : 		// TEMPLATE CLASS _Deque_unchecked_iterator
; 175  : template<class _Mydeque>
; 176  : 	class _Deque_unchecked_iterator
; 177  : 		: public _Deque_unchecked_const_iterator<_Mydeque>
; 178  : 	{	// iterator for mutable deque
; 179  : public:
; 180  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Myiter;
; 181  : 	typedef _Deque_unchecked_const_iterator<_Mydeque> _Mybase;
; 182  : 	typedef random_access_iterator_tag iterator_category;
; 183  : 
; 184  : 	typedef typename _Mydeque::value_type value_type;
; 185  : 	typedef typename _Mydeque::size_type size_type;
; 186  : 	typedef typename _Mydeque::difference_type difference_type;
; 187  : 	typedef typename _Mydeque::pointer pointer;
; 188  : 	typedef typename _Mydeque::reference reference;
; 189  : 
; 190  : 	_Deque_unchecked_iterator()
; 191  : 		{	// construct with null pointer
; 192  : 		}
; 193  : 
; 194  : 	_Deque_unchecked_iterator(size_type _Off,
; 195  : 		const _Container_base12 *_Pdeque)
; 196  : 		: _Mybase(_Off, _Pdeque)
; 197  : 		{	// construct with offset _Off
; 198  : 		}
; 199  : 
; 200  : 	reference operator*() const
; 201  : 		{	// return designated object
; 202  : 		return ((reference)**(_Mybase *)this);
; 203  : 		}
; 204  : 
; 205  : 	pointer operator->() const
; 206  : 		{	// return pointer to class object
; 207  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 208  : 		}
; 209  : 
; 210  : 	_Myiter& operator++()
; 211  : 		{	// preincrement
; 212  : 		++*(_Mybase *)this;
; 213  : 		return (*this);
; 214  : 		}
; 215  : 
; 216  : 	_Myiter operator++(int)
; 217  : 		{	// postincrement
; 218  : 		_Myiter _Tmp = *this;
; 219  : 		++*this;
; 220  : 		return (_Tmp);
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator--()
; 224  : 		{	// predecrement
; 225  : 		--*(_Mybase *)this;
; 226  : 		return (*this);
; 227  : 		}
; 228  : 
; 229  : 	_Myiter operator--(int)
; 230  : 		{	// postdecrement
; 231  : 		_Myiter _Tmp = *this;
; 232  : 		--*this;
; 233  : 		return (_Tmp);
; 234  : 		}
; 235  : 
; 236  : 	_Myiter& operator+=(difference_type _Off)
; 237  : 		{	// increment by integer
; 238  : 		*(_Mybase *)this += _Off;
; 239  : 		return (*this);
; 240  : 		}
; 241  : 
; 242  : 	_Myiter operator+(difference_type _Off) const
; 243  : 		{	// return this + integer
; 244  : 		_Myiter _Tmp = *this;
; 245  : 		return (_Tmp += _Off);
; 246  : 		}
; 247  : 
; 248  : 	_Myiter& operator-=(difference_type _Off)
; 249  : 		{	// decrement by integer
; 250  : 		return (*this += -_Off);
; 251  : 		}
; 252  : 
; 253  : 	_Myiter operator-(difference_type _Off) const
; 254  : 		{	// return this - integer
; 255  : 		_Myiter _Tmp = *this;
; 256  : 		return (_Tmp -= _Off);
; 257  : 		}
; 258  : 
; 259  : 	difference_type operator-(const _Mybase& _Right) const
; 260  : 		{	// return difference of iterators
; 261  : 		return (*(_Mybase *)this - _Right);
; 262  : 		}
; 263  : 
; 264  : 	reference operator[](difference_type _Off) const
; 265  : 		{	// subscript
; 266  : 		return (*(*this + _Off));
; 267  : 		}
; 268  : 	};
; 269  : 
; 270  : template<class _Mydeque> inline
; 271  : 	_Deque_unchecked_iterator<_Mydeque> operator+(
; 272  : 		typename _Deque_unchecked_iterator<_Mydeque>
; 273  : 			::difference_type _Off,
; 274  : 		_Deque_unchecked_iterator<_Mydeque> _Next)
; 275  : 	{	// add offset to iterator
; 276  : 	return (_Next += _Off);
; 277  : 	}
; 278  : 
; 279  : 		// TEMPLATE CLASS _Deque_const_iterator
; 280  : template<class _Mydeque>
; 281  : 	class _Deque_const_iterator
; 282  : 		: public _Iterator_base12
; 283  : 	{	// iterator for nonmutable deque
; 284  : public:
; 285  : 	typedef _Deque_const_iterator<_Mydeque> _Myiter;
; 286  : 	typedef random_access_iterator_tag iterator_category;
; 287  : 
; 288  : 	typedef typename _Mydeque::value_type value_type;
; 289  : 	typedef typename _Mydeque::size_type size_type;
; 290  : 	typedef typename _Mydeque::difference_type difference_type;
; 291  : 	typedef typename _Mydeque::const_pointer pointer;
; 292  : 	typedef typename _Mydeque::const_reference reference;
; 293  : 
; 294  : 	typedef _Mydeque _Mydeque_t;	// helper for expression evaluator
; 295  : 	enum {_EEN_DS = _DEQUESIZ};	// helper for expression evaluator
; 296  : 
; 297  : 	_Deque_const_iterator()
; 298  : 		{	// construct with null pointer
; 299  : 		_Setcont(0);
; 300  : 		_Myoff = 0;
; 301  : 		}
; 302  : 
; 303  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 304  : 		{	// construct with offset _Off in *_Pdeque
; 305  : 		_Setcont((_Mydeque *)_Pdeque);
; 306  : 		_Myoff = _Off;
; 307  : 		}
; 308  : 
; 309  : 	typedef _Deque_unchecked_const_iterator<_Mydeque> _Unchecked_type;
; 310  : 
; 311  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 312  : 		{	// reset from unchecked iterator
; 313  : 		this->_Myoff = _Right._Myoff;
; 314  : 		return (*this);
; 315  : 		}
; 316  : 
; 317  : 	_Unchecked_type _Unchecked() const
; 318  : 		{	// make an unchecked iterator
; 319  : 		return (_Unchecked_type(_Myoff, this->_Getcont()));
; 320  : 		}
; 321  : 
; 322  : 	reference operator*() const
; 323  : 		{	// return designated object
; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);
; 346  : 		}
; 347  : 
; 348  : 	pointer operator->() const
; 349  : 		{	// return pointer to class object
; 350  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 351  : 		}
; 352  : 
; 353  : 	_Myiter& operator++()
; 354  : 		{	// preincrement
; 355  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 356  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 357  : 		if (_Mycont == 0
; 358  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 359  : 		{	// report error
; 360  : 		_DEBUG_ERROR("deque iterator not incrementable");
; 361  : 		_SCL_SECURE_OUT_OF_RANGE;
; 362  : 		}
; 363  : 
; 364  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 365  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 366  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 367  : 		_SCL_SECURE_VALIDATE_RANGE(
; 368  : 			this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 369  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 370  : 
; 371  : 		++_Myoff;
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 385  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 386  : 		if (_Mycont == 0
; 387  : 			|| this->_Myoff <= _Mycont->_Myoff)
; 388  : 		{	// report error
; 389  : 		_DEBUG_ERROR("deque iterator not decrementable");
; 390  : 		_SCL_SECURE_OUT_OF_RANGE;
; 391  : 		}
; 392  : 
; 393  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 394  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 395  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 396  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff < this->_Myoff);
; 397  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 398  : 
; 399  : 		--_Myoff;
; 400  : 		return (*this);
; 401  : 		}
; 402  : 
; 403  : 	_Myiter operator--(int)
; 404  : 		{	// postdecrement
; 405  : 		_Myiter _Tmp = *this;
; 406  : 		--*this;
; 407  : 		return (_Tmp);
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator+=(difference_type _Off)
; 411  : 		{	// increment by integer
; 412  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 413  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 414  : 		if (_Mycont == 0
; 415  : 			|| this->_Myoff + _Off < _Mycont->_Myoff
; 416  : 			|| _Mycont->_Myoff + _Mycont->_Mysize < this->_Myoff + _Off)
; 417  : 			{	// report error
; 418  : 			_DEBUG_ERROR("deque iterator + offset out of range");
; 419  : 			_SCL_SECURE_OUT_OF_RANGE;
; 420  : 			}
; 421  : 
; 422  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 423  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 424  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 425  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff + _Off
; 426  : 			&& this->_Myoff + _Off <= _Mycont->_Myoff + _Mycont->_Mysize);
; 427  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 428  : 
; 429  : 		_Myoff += _Off;
; 430  : 		return (*this);
; 431  : 		}
; 432  : 
; 433  : 	_Myiter operator+(difference_type _Off) const
; 434  : 		{	// return this + integer
; 435  : 		_Myiter _Tmp = *this;
; 436  : 		return (_Tmp += _Off);
; 437  : 		}
; 438  : 
; 439  : 	_Myiter& operator-=(difference_type _Off)
; 440  : 		{	// decrement by integer
; 441  : 		return (*this += -_Off);
; 442  : 		}
; 443  : 
; 444  : 	_Myiter operator-(difference_type _Off) const
; 445  : 		{	// return this - integer
; 446  : 		_Myiter _Tmp = *this;
; 447  : 		return (_Tmp -= _Off);
; 448  : 		}
; 449  : 
; 450  : 	difference_type operator-(const _Myiter& _Right) const
; 451  : 		{	// return difference of iterators
; 452  : 		_Compat(_Right);
; 453  : 		return (_Right._Myoff <= this->_Myoff
; 454  : 			? this->_Myoff - _Right._Myoff
; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));
; 456  : 		}
; 457  : 
; 458  : 	reference operator[](difference_type _Off) const
; 459  : 		{	// subscript
; 460  : 		return (*(*this + _Off));
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const _Myiter& _Right) const
; 464  : 		{	// test for iterator equality
; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);
; 467  : 		}
; 468  : 
; 469  : 	bool operator!=(const _Myiter& _Right) const
; 470  : 		{	// test for iterator inequality
; 471  : 		return (!(*this == _Right));
; 472  : 		}
; 473  : 
; 474  : 	bool operator<(const _Myiter& _Right) const
; 475  : 		{	// test if this < _Right
; 476  : 		_Compat(_Right);
; 477  : 		return (this->_Myoff < _Right._Myoff);
; 478  : 		}
; 479  : 
; 480  : 	bool operator>(const _Myiter& _Right) const
; 481  : 		{	// test if this > _Right
; 482  : 		return (_Right < *this);
; 483  : 		}
; 484  : 
; 485  : 	bool operator<=(const _Myiter& _Right) const
; 486  : 		{	// test if this <= _Right
; 487  : 		return (!(_Right < *this));
; 488  : 		}
; 489  : 
; 490  : 	bool operator>=(const _Myiter& _Right) const
; 491  : 		{	// test if this >= _Right
; 492  : 		return (!(*this < _Right));
; 493  : 		}
; 494  : 
; 495  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 496  : 	void _Compat(const _Myiter& _Right) const
; 497  : 		{	// test for compatible iterator pair
; 498  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 499  : 		if (_Mycont == 0
; 500  : 			|| _Mycont != _Right._Getcont())
; 501  : 			{	// report error
; 502  : 			_DEBUG_ERROR("deque iterators incompatible");
; 503  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 504  : 			}
; 505  : 		}
; 506  : 
; 507  : 	void _Setcont(const _Mydeque *_Pdeque)
; 508  : 		{	// set container pointer
; 509  : 		this->_Adopt(_Pdeque);
; 510  : 		}
; 511  : 
; 512  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 513  : 	void _Compat(const _Myiter& _Right) const
; 514  : 		{	// test for compatible iterator pair
; 515  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 516  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 517  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont == _Right._Getcont());
; 518  : 		}
; 519  : 
; 520  : 	void _Setcont(const _Mydeque *_Pdeque)
; 521  : 		{	// set container pointer
; 522  : 		this->_Adopt(_Pdeque);
; 523  : 		}
; 524  : 
; 525  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 526  : 	void _Compat(const _Myiter&) const
; 527  : 		{	// test for compatible iterator pair
; 528  : 		}
; 529  : 
; 530  : 	void _Setcont(const _Mydeque *_Pdeque)
; 531  : 		{	// set container pointer
; 532  : 		this->_Adopt(_Pdeque);
; 533  : 		}
; 534  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 535  : 
; 536  : 	size_type _Myoff;	// offset of element in deque
; 537  : 	};
; 538  : 
; 539  : template<class _Mydeque> inline
; 540  : 	typename _Deque_const_iterator<_Mydeque>::_Unchecked_type
; 541  : 		_Unchecked(_Deque_const_iterator<_Mydeque> _Iter)
; 542  : 	{	// convert to unchecked
; 543  : 	return (_Iter._Unchecked());
; 544  : 	}
; 545  : 
; 546  : template<class _Mydeque> inline
; 547  : 	_Deque_const_iterator<_Mydeque>&
; 548  : 		_Rechecked(_Deque_const_iterator<_Mydeque>& _Iter,
; 549  : 			typename _Deque_const_iterator<_Mydeque>
; 550  : 				::_Unchecked_type _Right)
; 551  : 	{	// convert to checked
; 552  : 	return (_Iter._Rechecked(_Right));
; 553  : 	}
; 554  : 
; 555  : template<class _Mydeque> inline
; 556  : 	_Deque_const_iterator<_Mydeque> operator+(
; 557  : 		typename _Deque_const_iterator<_Mydeque>::difference_type _Off,
; 558  : 		_Deque_const_iterator<_Mydeque> _Next)
; 559  : 	{	// add offset to iterator
; 560  : 	return (_Next += _Off);
; 561  : 	}
; 562  : 
; 563  : 		// TEMPLATE CLASS _Deque_iterator
; 564  : template<class _Mydeque>
; 565  : 	class _Deque_iterator
; 566  : 		: public _Deque_const_iterator<_Mydeque>
; 567  : 		{	// iterator for mutable deque
; 568  : public:
; 569  : 	typedef _Deque_iterator<_Mydeque> _Myiter;
; 570  : 	typedef _Deque_const_iterator<_Mydeque> _Mybase;
; 571  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Deque_unchecked_type;
; 572  : 	typedef random_access_iterator_tag iterator_category;
; 573  : 
; 574  : 	typedef typename _Mydeque::value_type value_type;
; 575  : 	typedef typename _Mydeque::size_type size_type;
; 576  : 	typedef typename _Mydeque::difference_type difference_type;
; 577  : 	typedef typename _Mydeque::pointer pointer;
; 578  : 	typedef typename _Mydeque::reference reference;
; 579  : 
; 580  : 	_Deque_iterator()
; 581  : 		{	// construct with null deque pointer
; 582  : 		}
; 583  : 
; 584  : 	_Deque_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 585  : 		: _Mybase(_Off, _Pdeque)
; 586  : 		{	// construct with offset _Off in *_Pdeque
; 587  : 		}
; 588  : 
; 589  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Unchecked_type;
; 590  : 
; 591  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 592  : 		{	// reset from unchecked iterator
; 593  : 		this->_Myoff = _Right._Myoff;
; 594  : 		return (*this);
; 595  : 		}
; 596  : 
; 597  : 	_Unchecked_type _Unchecked() const
; 598  : 		{	// make an unchecked iterator
; 599  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));
; 600  : 		}
; 601  : 
; 602  : 	reference operator*() const
; 603  : 		{	// return designated object
; 604  : 		return ((reference)**(_Mybase *)this);
; 605  : 		}
; 606  : 
; 607  : 	pointer operator->() const
; 608  : 		{	// return pointer to class object
; 609  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 610  : 		}
; 611  : 
; 612  : 	_Myiter& operator++()
; 613  : 		{	// preincrement
; 614  : 		++*(_Mybase *)this;
; 615  : 		return (*this);
; 616  : 		}
; 617  : 
; 618  : 	_Myiter operator++(int)
; 619  : 		{	// postincrement
; 620  : 		_Myiter _Tmp = *this;
; 621  : 		++*this;
; 622  : 		return (_Tmp);
; 623  : 		}
; 624  : 
; 625  : 	_Myiter& operator--()
; 626  : 		{	// predecrement
; 627  : 		--*(_Mybase *)this;
; 628  : 		return (*this);
; 629  : 		}
; 630  : 
; 631  : 	_Myiter operator--(int)
; 632  : 		{	// postdecrement
; 633  : 		_Myiter _Tmp = *this;
; 634  : 		--*this;
; 635  : 		return (_Tmp);
; 636  : 		}
; 637  : 
; 638  : 	_Myiter& operator+=(difference_type _Off)
; 639  : 		{	// increment by integer
; 640  : 		this->_Myoff += _Off;
; 641  : 		return (*this);
; 642  : 		}
; 643  : 
; 644  : 	_Myiter operator+(difference_type _Off) const
; 645  : 		{	// return this + integer
; 646  : 		_Myiter _Tmp = *this;
; 647  : 		return (_Tmp += _Off);
; 648  : 		}
; 649  : 
; 650  : 	_Myiter& operator-=(difference_type _Off)
; 651  : 		{	// decrement by integer
; 652  : 		return (*this += -_Off);
; 653  : 		}
; 654  : 
; 655  : 	_Myiter operator-(difference_type _Off) const
; 656  : 		{	// return this - integer
; 657  : 		_Myiter _Tmp = *this;
; 658  : 		return (_Tmp -= _Off);
; 659  : 		}
; 660  : 
; 661  : 	difference_type operator-(const _Mybase& _Right) const
; 662  : 		{	// return difference of iterators
; 663  : 		return (*(_Mybase *)this - _Right);
; 664  : 		}
; 665  : 
; 666  : 	reference operator[](difference_type _Off) const
; 667  : 		{	// subscript
; 668  : 		return (*(*this + _Off));
; 669  : 		}
; 670  : 	};
; 671  : 
; 672  : template<class _Mydeque> inline
; 673  : 	typename _Deque_iterator<_Mydeque>::_Unchecked_type
; 674  : 		_Unchecked(_Deque_iterator<_Mydeque> _Iter)
; 675  : 	{	// convert to unchecked
; 676  : 	return (_Iter._Unchecked());
; 677  : 	}
; 678  : 
; 679  : template<class _Mydeque> inline
; 680  : 	_Deque_iterator<_Mydeque>&
; 681  : 		_Rechecked(_Deque_iterator<_Mydeque>& _Iter,
; 682  : 			typename _Deque_iterator<_Mydeque>
; 683  : 				::_Unchecked_type _Right)
; 684  : 	{	// convert to checked
; 685  : 	return (_Iter._Rechecked(_Right));
; 686  : 	}
; 687  : 
; 688  : template<class _Mydeque> inline
; 689  : 	_Deque_iterator<_Mydeque> operator+(
; 690  : 		typename _Deque_iterator<_Mydeque>::difference_type _Off,
; 691  : 		_Deque_iterator<_Mydeque> _Next)
; 692  : 	{	// add offset to iterator
; 693  : 	return (_Next += _Off);
; 694  : 	}
; 695  : 
; 696  : 		// deque TYPE WRAPPERS
; 697  : template<class _Value_type,
; 698  : 	class _Size_type,
; 699  : 	class _Difference_type,
; 700  : 	class _Pointer,
; 701  : 	class _Const_pointer,
; 702  : 	class _Reference,
; 703  : 	class _Const_reference,
; 704  : 	class _Mapptr_type>
; 705  : 	struct _Deque_iter_types
; 706  : 	{	// wraps types needed by iterators
; 707  : 	typedef _Value_type value_type;
; 708  : 	typedef _Size_type size_type;
; 709  : 	typedef _Difference_type difference_type;
; 710  : 	typedef _Pointer pointer;
; 711  : 	typedef _Const_pointer const_pointer;
; 712  : 	typedef _Reference reference;
; 713  : 	typedef _Const_reference const_reference;
; 714  : 	typedef _Mapptr_type _Mapptr;
; 715  : 	};
; 716  : 
; 717  : template<class _Ty>
; 718  : 	struct _Deque_simple_types
; 719  : 		: public _Simple_types<_Ty>
; 720  : 	{	// wraps types needed by iterators
; 721  : 	typedef _Ty **_Mapptr;
; 722  : 	};
; 723  : 
; 724  : template<class _Ty,
; 725  : 	class _Alloc0>
; 726  : 	struct _Deque_base_types
; 727  : 	{	// types needed for a container base
; 728  : 	typedef _Alloc0 _Alloc;
; 729  : 	typedef _Deque_base_types<_Ty, _Alloc> _Myt;
; 730  : 
; 731  :  #if _HAS_CPP0X
; 732  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 733  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 734  : 
; 735  :  #else /* _HAS_CPP0X */
; 736  : 	typedef typename _Alloc::template rebind<_Ty>::other _Alty;
; 737  :  #endif /* _HAS_CPP0X */
; 738  : 
; 739  : 	typedef typename _Alty::pointer _Tptr;
; 740  : 	typedef typename _Alty::template rebind<_Tptr>::other _Alpty;
; 741  : 	typedef typename _Alpty::pointer _Mapptr;
; 742  : 
; 743  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 744  : 		_Deque_simple_types<typename _Alty::value_type>,
; 745  : 		_Deque_iter_types<typename _Alty::value_type,
; 746  : 			typename _Alty::size_type,
; 747  : 			typename _Alty::difference_type,
; 748  : 			typename _Alty::pointer,
; 749  : 			typename _Alty::const_pointer,
; 750  : 			typename _Alty::reference,
; 751  : 			typename _Alty::const_reference,
; 752  : 			_Mapptr> >::type
; 753  : 		_Val_types;
; 754  : 	};
; 755  : 
; 756  : 		// TEMPLATE CLASS _Deque_val
; 757  : template<class _Val_types>
; 758  : 	class _Deque_val
; 759  : 		: public _Container_base12
; 760  : 	{	// base class for deque to hold data
; 761  : public:
; 762  : 	typedef _Deque_val<_Val_types> _Myt;
; 763  : 
; 764  : 	typedef typename _Val_types::value_type value_type;
; 765  : 	typedef typename _Val_types::size_type size_type;
; 766  : 	typedef typename _Val_types::difference_type difference_type;
; 767  : 	typedef typename _Val_types::pointer pointer;
; 768  : 	typedef typename _Val_types::const_pointer const_pointer;
; 769  : 	typedef typename _Val_types::reference reference;
; 770  : 	typedef typename _Val_types::const_reference const_reference;
; 771  : 	typedef typename _Val_types::_Mapptr _Mapptr;
; 772  : 
; 773  : 	typedef _Deque_iterator<_Myt> iterator;
; 774  : 	typedef _Deque_const_iterator<_Myt> const_iterator;
; 775  : 
; 776  : 	_Deque_val()
; 777  : 		{	// initialize values
; 778  : 		_Map = _Mapptr();
; 779  : 		_Mapsize = 0;
; 780  : 		_Myoff = 0;
; 781  : 		_Mysize = 0;
; 782  : 		}
; 783  : 
; 784  : 	size_type _Getblock(size_type _Off) const
; 785  : 		{	// determine block from offset
; 786  : 			// NB: _Mapsize and _DEQUESIZ are guaranteed to be powers of 2
; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  00000	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00003	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]

; 55   : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 56   : 		size_type _Off = _Myoff % _DEQUESIZ;
; 57   : 		return (_Mycont->_Map[_Block][_Off]);

  00007	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 59   : 
; 60   : 	pointer operator->() const
; 61   : 		{	// return pointer to class object
; 62   : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 63   : 		}
; 64   : 
; 65   : 	_Myiter& operator++()
; 66   : 		{	// preincrement
; 67   : 		++_Myoff;
; 68   : 		return (*this);
; 69   : 		}
; 70   : 
; 71   : 	_Myiter operator++(int)
; 72   : 		{	// postincrement
; 73   : 		_Myiter _Tmp = *this;
; 74   : 		++*this;
; 75   : 		return (_Tmp);
; 76   : 		}
; 77   : 
; 78   : 	_Myiter& operator--()
; 79   : 		{	// predecrement
; 80   : 		--_Myoff;
; 81   : 		return (*this);
; 82   : 		}
; 83   : 
; 84   : 	_Myiter operator--(int)
; 85   : 		{	// postdecrement
; 86   : 		_Myiter _Tmp = *this;
; 87   : 		--*this;
; 88   : 		return (_Tmp);
; 89   : 		}
; 90   : 
; 91   : 	_Myiter& operator+=(difference_type _Off)
; 92   : 		{	// increment by integer
; 93   : 		_Myoff += _Off;
; 94   : 		return (*this);
; 95   : 		}
; 96   : 
; 97   : 	_Myiter operator+(difference_type _Off) const
; 98   : 		{	// return this + integer
; 99   : 		_Myiter _Tmp = *this;
; 100  : 		return (_Tmp += _Off);
; 101  : 		}
; 102  : 
; 103  : 	_Myiter& operator-=(difference_type _Off)
; 104  : 		{	// decrement by integer
; 105  : 		return (*this += -_Off);
; 106  : 		}
; 107  : 
; 108  : 	_Myiter operator-(difference_type _Off) const
; 109  : 		{	// return this - integer
; 110  : 		_Myiter _Tmp = *this;
; 111  : 		return (_Tmp -= _Off);
; 112  : 		}
; 113  : 
; 114  : 	difference_type operator-(const _Myiter& _Right) const
; 115  : 		{	// return difference of iterators
; 116  : 		return (_Right._Myoff <= _Myoff
; 117  : 			? _Myoff - _Right._Myoff
; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));
; 119  : 		}
; 120  : 
; 121  : 	reference operator[](difference_type _Off) const
; 122  : 		{	// subscript
; 123  : 		return (*(*this + _Off));
; 124  : 		}
; 125  : 
; 126  : 	bool operator==(const _Myiter& _Right) const
; 127  : 		{	// test for iterator equality
; 128  : 		return (_Myoff == _Right._Myoff);
; 129  : 		}
; 130  : 
; 131  : 	bool operator!=(const _Myiter& _Right) const
; 132  : 		{	// test for iterator inequality
; 133  : 		return (!(*this == _Right));
; 134  : 		}
; 135  : 
; 136  : 	bool operator<(const _Myiter& _Right) const
; 137  : 		{	// test if this < _Right
; 138  : 		return (_Myoff < _Right._Myoff);
; 139  : 		}
; 140  : 
; 141  : 	bool operator>(const _Myiter& _Right) const
; 142  : 		{	// test if this > _Right
; 143  : 		return (_Right < *this);
; 144  : 		}
; 145  : 
; 146  : 	bool operator<=(const _Myiter& _Right) const
; 147  : 		{	// test if this <= _Right
; 148  : 		return (!(_Right < *this));
; 149  : 		}
; 150  : 
; 151  : 	bool operator>=(const _Myiter& _Right) const
; 152  : 		{	// test if this >= _Right
; 153  : 		return (!(*this < _Right));
; 154  : 		}
; 155  : 
; 156  : 	const _Container_base12 *_Getcont() const
; 157  : 		{	// get container pointer
; 158  : 		return (_Mycont);
; 159  : 		}
; 160  : 
; 161  : 	const _Mydeque *_Mycont;	// pointer to deque
; 162  : 	size_type _Myoff;	// offset of element in deque
; 163  : 	};
; 164  : 
; 165  : template<class _Mydeque> inline
; 166  : 	_Deque_unchecked_const_iterator<_Mydeque> operator+(
; 167  : 		typename _Deque_unchecked_const_iterator<_Mydeque>
; 168  : 			::difference_type _Off,
; 169  : 		_Deque_unchecked_const_iterator<_Mydeque> _Next)
; 170  : 	{	// add offset to iterator
; 171  : 	return (_Next += _Off);
; 172  : 	}
; 173  : 
; 174  : 		// TEMPLATE CLASS _Deque_unchecked_iterator
; 175  : template<class _Mydeque>
; 176  : 	class _Deque_unchecked_iterator
; 177  : 		: public _Deque_unchecked_const_iterator<_Mydeque>
; 178  : 	{	// iterator for mutable deque
; 179  : public:
; 180  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Myiter;
; 181  : 	typedef _Deque_unchecked_const_iterator<_Mydeque> _Mybase;
; 182  : 	typedef random_access_iterator_tag iterator_category;
; 183  : 
; 184  : 	typedef typename _Mydeque::value_type value_type;
; 185  : 	typedef typename _Mydeque::size_type size_type;
; 186  : 	typedef typename _Mydeque::difference_type difference_type;
; 187  : 	typedef typename _Mydeque::pointer pointer;
; 188  : 	typedef typename _Mydeque::reference reference;
; 189  : 
; 190  : 	_Deque_unchecked_iterator()
; 191  : 		{	// construct with null pointer
; 192  : 		}
; 193  : 
; 194  : 	_Deque_unchecked_iterator(size_type _Off,
; 195  : 		const _Container_base12 *_Pdeque)
; 196  : 		: _Mybase(_Off, _Pdeque)
; 197  : 		{	// construct with offset _Off
; 198  : 		}
; 199  : 
; 200  : 	reference operator*() const
; 201  : 		{	// return designated object
; 202  : 		return ((reference)**(_Mybase *)this);
; 203  : 		}
; 204  : 
; 205  : 	pointer operator->() const
; 206  : 		{	// return pointer to class object
; 207  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 208  : 		}
; 209  : 
; 210  : 	_Myiter& operator++()
; 211  : 		{	// preincrement
; 212  : 		++*(_Mybase *)this;
; 213  : 		return (*this);
; 214  : 		}
; 215  : 
; 216  : 	_Myiter operator++(int)
; 217  : 		{	// postincrement
; 218  : 		_Myiter _Tmp = *this;
; 219  : 		++*this;
; 220  : 		return (_Tmp);
; 221  : 		}
; 222  : 
; 223  : 	_Myiter& operator--()
; 224  : 		{	// predecrement
; 225  : 		--*(_Mybase *)this;
; 226  : 		return (*this);
; 227  : 		}
; 228  : 
; 229  : 	_Myiter operator--(int)
; 230  : 		{	// postdecrement
; 231  : 		_Myiter _Tmp = *this;
; 232  : 		--*this;
; 233  : 		return (_Tmp);
; 234  : 		}
; 235  : 
; 236  : 	_Myiter& operator+=(difference_type _Off)
; 237  : 		{	// increment by integer
; 238  : 		*(_Mybase *)this += _Off;
; 239  : 		return (*this);
; 240  : 		}
; 241  : 
; 242  : 	_Myiter operator+(difference_type _Off) const
; 243  : 		{	// return this + integer
; 244  : 		_Myiter _Tmp = *this;
; 245  : 		return (_Tmp += _Off);
; 246  : 		}
; 247  : 
; 248  : 	_Myiter& operator-=(difference_type _Off)
; 249  : 		{	// decrement by integer
; 250  : 		return (*this += -_Off);
; 251  : 		}
; 252  : 
; 253  : 	_Myiter operator-(difference_type _Off) const
; 254  : 		{	// return this - integer
; 255  : 		_Myiter _Tmp = *this;
; 256  : 		return (_Tmp -= _Off);
; 257  : 		}
; 258  : 
; 259  : 	difference_type operator-(const _Mybase& _Right) const
; 260  : 		{	// return difference of iterators
; 261  : 		return (*(_Mybase *)this - _Right);
; 262  : 		}
; 263  : 
; 264  : 	reference operator[](difference_type _Off) const
; 265  : 		{	// subscript
; 266  : 		return (*(*this + _Off));
; 267  : 		}
; 268  : 	};
; 269  : 
; 270  : template<class _Mydeque> inline
; 271  : 	_Deque_unchecked_iterator<_Mydeque> operator+(
; 272  : 		typename _Deque_unchecked_iterator<_Mydeque>
; 273  : 			::difference_type _Off,
; 274  : 		_Deque_unchecked_iterator<_Mydeque> _Next)
; 275  : 	{	// add offset to iterator
; 276  : 	return (_Next += _Off);
; 277  : 	}
; 278  : 
; 279  : 		// TEMPLATE CLASS _Deque_const_iterator
; 280  : template<class _Mydeque>
; 281  : 	class _Deque_const_iterator
; 282  : 		: public _Iterator_base12
; 283  : 	{	// iterator for nonmutable deque
; 284  : public:
; 285  : 	typedef _Deque_const_iterator<_Mydeque> _Myiter;
; 286  : 	typedef random_access_iterator_tag iterator_category;
; 287  : 
; 288  : 	typedef typename _Mydeque::value_type value_type;
; 289  : 	typedef typename _Mydeque::size_type size_type;
; 290  : 	typedef typename _Mydeque::difference_type difference_type;
; 291  : 	typedef typename _Mydeque::const_pointer pointer;
; 292  : 	typedef typename _Mydeque::const_reference reference;
; 293  : 
; 294  : 	typedef _Mydeque _Mydeque_t;	// helper for expression evaluator
; 295  : 	enum {_EEN_DS = _DEQUESIZ};	// helper for expression evaluator
; 296  : 
; 297  : 	_Deque_const_iterator()
; 298  : 		{	// construct with null pointer
; 299  : 		_Setcont(0);
; 300  : 		_Myoff = 0;
; 301  : 		}
; 302  : 
; 303  : 	_Deque_const_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 304  : 		{	// construct with offset _Off in *_Pdeque
; 305  : 		_Setcont((_Mydeque *)_Pdeque);
; 306  : 		_Myoff = _Off;
; 307  : 		}
; 308  : 
; 309  : 	typedef _Deque_unchecked_const_iterator<_Mydeque> _Unchecked_type;
; 310  : 
; 311  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 312  : 		{	// reset from unchecked iterator
; 313  : 		this->_Myoff = _Right._Myoff;
; 314  : 		return (*this);
; 315  : 		}
; 316  : 
; 317  : 	_Unchecked_type _Unchecked() const
; 318  : 		{	// make an unchecked iterator
; 319  : 		return (_Unchecked_type(_Myoff, this->_Getcont()));
; 320  : 		}
; 321  : 
; 322  : 	reference operator*() const
; 323  : 		{	// return designated object
; 324  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 325  : 
; 326  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 327  : 		if (_Mycont == 0
; 328  : 			|| this->_Myoff < _Mycont->_Myoff
; 329  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 330  : 		{	// report error
; 331  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 332  : 		_SCL_SECURE_OUT_OF_RANGE;
; 333  : 		}
; 334  : 
; 335  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 336  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 337  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 338  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 339  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 340  : 
; 341  : 		_Analysis_assume_(_Mycont != 0);
; 342  : 
; 343  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 344  : 		size_type _Off = _Myoff % _DEQUESIZ;
; 345  : 		return (_Mycont->_Map[_Block][_Off]);
; 346  : 		}
; 347  : 
; 348  : 	pointer operator->() const
; 349  : 		{	// return pointer to class object
; 350  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 351  : 		}
; 352  : 
; 353  : 	_Myiter& operator++()
; 354  : 		{	// preincrement
; 355  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 356  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 357  : 		if (_Mycont == 0
; 358  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 359  : 		{	// report error
; 360  : 		_DEBUG_ERROR("deque iterator not incrementable");
; 361  : 		_SCL_SECURE_OUT_OF_RANGE;
; 362  : 		}
; 363  : 
; 364  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 365  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 366  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 367  : 		_SCL_SECURE_VALIDATE_RANGE(
; 368  : 			this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 369  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 370  : 
; 371  : 		++_Myoff;
; 372  : 		return (*this);
; 373  : 		}
; 374  : 
; 375  : 	_Myiter operator++(int)
; 376  : 		{	// postincrement
; 377  : 		_Myiter _Tmp = *this;
; 378  : 		++*this;
; 379  : 		return (_Tmp);
; 380  : 		}
; 381  : 
; 382  : 	_Myiter& operator--()
; 383  : 		{	// predecrement
; 384  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 385  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 386  : 		if (_Mycont == 0
; 387  : 			|| this->_Myoff <= _Mycont->_Myoff)
; 388  : 		{	// report error
; 389  : 		_DEBUG_ERROR("deque iterator not decrementable");
; 390  : 		_SCL_SECURE_OUT_OF_RANGE;
; 391  : 		}
; 392  : 
; 393  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 394  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 395  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 396  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff < this->_Myoff);
; 397  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 398  : 
; 399  : 		--_Myoff;
; 400  : 		return (*this);
; 401  : 		}
; 402  : 
; 403  : 	_Myiter operator--(int)
; 404  : 		{	// postdecrement
; 405  : 		_Myiter _Tmp = *this;
; 406  : 		--*this;
; 407  : 		return (_Tmp);
; 408  : 		}
; 409  : 
; 410  : 	_Myiter& operator+=(difference_type _Off)
; 411  : 		{	// increment by integer
; 412  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 413  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 414  : 		if (_Mycont == 0
; 415  : 			|| this->_Myoff + _Off < _Mycont->_Myoff
; 416  : 			|| _Mycont->_Myoff + _Mycont->_Mysize < this->_Myoff + _Off)
; 417  : 			{	// report error
; 418  : 			_DEBUG_ERROR("deque iterator + offset out of range");
; 419  : 			_SCL_SECURE_OUT_OF_RANGE;
; 420  : 			}
; 421  : 
; 422  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 423  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 424  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 425  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff + _Off
; 426  : 			&& this->_Myoff + _Off <= _Mycont->_Myoff + _Mycont->_Mysize);
; 427  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 428  : 
; 429  : 		_Myoff += _Off;
; 430  : 		return (*this);
; 431  : 		}
; 432  : 
; 433  : 	_Myiter operator+(difference_type _Off) const
; 434  : 		{	// return this + integer
; 435  : 		_Myiter _Tmp = *this;
; 436  : 		return (_Tmp += _Off);
; 437  : 		}
; 438  : 
; 439  : 	_Myiter& operator-=(difference_type _Off)
; 440  : 		{	// decrement by integer
; 441  : 		return (*this += -_Off);
; 442  : 		}
; 443  : 
; 444  : 	_Myiter operator-(difference_type _Off) const
; 445  : 		{	// return this - integer
; 446  : 		_Myiter _Tmp = *this;
; 447  : 		return (_Tmp -= _Off);
; 448  : 		}
; 449  : 
; 450  : 	difference_type operator-(const _Myiter& _Right) const
; 451  : 		{	// return difference of iterators
; 452  : 		_Compat(_Right);
; 453  : 		return (_Right._Myoff <= this->_Myoff
; 454  : 			? this->_Myoff - _Right._Myoff
; 455  : 			: -(difference_type)(_Right._Myoff - this->_Myoff));
; 456  : 		}
; 457  : 
; 458  : 	reference operator[](difference_type _Off) const
; 459  : 		{	// subscript
; 460  : 		return (*(*this + _Off));
; 461  : 		}
; 462  : 
; 463  : 	bool operator==(const _Myiter& _Right) const
; 464  : 		{	// test for iterator equality
; 465  : 		_Compat(_Right);
; 466  : 		return (this->_Myoff == _Right._Myoff);
; 467  : 		}
; 468  : 
; 469  : 	bool operator!=(const _Myiter& _Right) const
; 470  : 		{	// test for iterator inequality
; 471  : 		return (!(*this == _Right));
; 472  : 		}
; 473  : 
; 474  : 	bool operator<(const _Myiter& _Right) const
; 475  : 		{	// test if this < _Right
; 476  : 		_Compat(_Right);
; 477  : 		return (this->_Myoff < _Right._Myoff);
; 478  : 		}
; 479  : 
; 480  : 	bool operator>(const _Myiter& _Right) const
; 481  : 		{	// test if this > _Right
; 482  : 		return (_Right < *this);
; 483  : 		}
; 484  : 
; 485  : 	bool operator<=(const _Myiter& _Right) const
; 486  : 		{	// test if this <= _Right
; 487  : 		return (!(_Right < *this));
; 488  : 		}
; 489  : 
; 490  : 	bool operator>=(const _Myiter& _Right) const
; 491  : 		{	// test if this >= _Right
; 492  : 		return (!(*this < _Right));
; 493  : 		}
; 494  : 
; 495  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 496  : 	void _Compat(const _Myiter& _Right) const
; 497  : 		{	// test for compatible iterator pair
; 498  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 499  : 		if (_Mycont == 0
; 500  : 			|| _Mycont != _Right._Getcont())
; 501  : 			{	// report error
; 502  : 			_DEBUG_ERROR("deque iterators incompatible");
; 503  : 			_SCL_SECURE_INVALID_ARGUMENT;
; 504  : 			}
; 505  : 		}
; 506  : 
; 507  : 	void _Setcont(const _Mydeque *_Pdeque)
; 508  : 		{	// set container pointer
; 509  : 		this->_Adopt(_Pdeque);
; 510  : 		}
; 511  : 
; 512  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 513  : 	void _Compat(const _Myiter& _Right) const
; 514  : 		{	// test for compatible iterator pair
; 515  : 		_Mydeque *_Mycont = ((_Mydeque *)this->_Getcont());
; 516  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 517  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont == _Right._Getcont());
; 518  : 		}
; 519  : 
; 520  : 	void _Setcont(const _Mydeque *_Pdeque)
; 521  : 		{	// set container pointer
; 522  : 		this->_Adopt(_Pdeque);
; 523  : 		}
; 524  : 
; 525  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 526  : 	void _Compat(const _Myiter&) const
; 527  : 		{	// test for compatible iterator pair
; 528  : 		}
; 529  : 
; 530  : 	void _Setcont(const _Mydeque *_Pdeque)
; 531  : 		{	// set container pointer
; 532  : 		this->_Adopt(_Pdeque);
; 533  : 		}
; 534  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 535  : 
; 536  : 	size_type _Myoff;	// offset of element in deque
; 537  : 	};
; 538  : 
; 539  : template<class _Mydeque> inline
; 540  : 	typename _Deque_const_iterator<_Mydeque>::_Unchecked_type
; 541  : 		_Unchecked(_Deque_const_iterator<_Mydeque> _Iter)
; 542  : 	{	// convert to unchecked
; 543  : 	return (_Iter._Unchecked());
; 544  : 	}
; 545  : 
; 546  : template<class _Mydeque> inline
; 547  : 	_Deque_const_iterator<_Mydeque>&
; 548  : 		_Rechecked(_Deque_const_iterator<_Mydeque>& _Iter,
; 549  : 			typename _Deque_const_iterator<_Mydeque>
; 550  : 				::_Unchecked_type _Right)
; 551  : 	{	// convert to checked
; 552  : 	return (_Iter._Rechecked(_Right));
; 553  : 	}
; 554  : 
; 555  : template<class _Mydeque> inline
; 556  : 	_Deque_const_iterator<_Mydeque> operator+(
; 557  : 		typename _Deque_const_iterator<_Mydeque>::difference_type _Off,
; 558  : 		_Deque_const_iterator<_Mydeque> _Next)
; 559  : 	{	// add offset to iterator
; 560  : 	return (_Next += _Off);
; 561  : 	}
; 562  : 
; 563  : 		// TEMPLATE CLASS _Deque_iterator
; 564  : template<class _Mydeque>
; 565  : 	class _Deque_iterator
; 566  : 		: public _Deque_const_iterator<_Mydeque>
; 567  : 		{	// iterator for mutable deque
; 568  : public:
; 569  : 	typedef _Deque_iterator<_Mydeque> _Myiter;
; 570  : 	typedef _Deque_const_iterator<_Mydeque> _Mybase;
; 571  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Deque_unchecked_type;
; 572  : 	typedef random_access_iterator_tag iterator_category;
; 573  : 
; 574  : 	typedef typename _Mydeque::value_type value_type;
; 575  : 	typedef typename _Mydeque::size_type size_type;
; 576  : 	typedef typename _Mydeque::difference_type difference_type;
; 577  : 	typedef typename _Mydeque::pointer pointer;
; 578  : 	typedef typename _Mydeque::reference reference;
; 579  : 
; 580  : 	_Deque_iterator()
; 581  : 		{	// construct with null deque pointer
; 582  : 		}
; 583  : 
; 584  : 	_Deque_iterator(size_type _Off, const _Container_base12 *_Pdeque)
; 585  : 		: _Mybase(_Off, _Pdeque)
; 586  : 		{	// construct with offset _Off in *_Pdeque
; 587  : 		}
; 588  : 
; 589  : 	typedef _Deque_unchecked_iterator<_Mydeque> _Unchecked_type;
; 590  : 
; 591  : 	_Myiter& _Rechecked(_Unchecked_type _Right)
; 592  : 		{	// reset from unchecked iterator
; 593  : 		this->_Myoff = _Right._Myoff;
; 594  : 		return (*this);
; 595  : 		}
; 596  : 
; 597  : 	_Unchecked_type _Unchecked() const
; 598  : 		{	// make an unchecked iterator
; 599  : 		return (_Unchecked_type(this->_Myoff, this->_Getcont()));
; 600  : 		}
; 601  : 
; 602  : 	reference operator*() const
; 603  : 		{	// return designated object
; 604  : 		return ((reference)**(_Mybase *)this);
; 605  : 		}
; 606  : 
; 607  : 	pointer operator->() const
; 608  : 		{	// return pointer to class object
; 609  : 		return (_STD pointer_traits<pointer>::pointer_to(**this));
; 610  : 		}
; 611  : 
; 612  : 	_Myiter& operator++()
; 613  : 		{	// preincrement
; 614  : 		++*(_Mybase *)this;
; 615  : 		return (*this);
; 616  : 		}
; 617  : 
; 618  : 	_Myiter operator++(int)
; 619  : 		{	// postincrement
; 620  : 		_Myiter _Tmp = *this;
; 621  : 		++*this;
; 622  : 		return (_Tmp);
; 623  : 		}
; 624  : 
; 625  : 	_Myiter& operator--()
; 626  : 		{	// predecrement
; 627  : 		--*(_Mybase *)this;
; 628  : 		return (*this);
; 629  : 		}
; 630  : 
; 631  : 	_Myiter operator--(int)
; 632  : 		{	// postdecrement
; 633  : 		_Myiter _Tmp = *this;
; 634  : 		--*this;
; 635  : 		return (_Tmp);
; 636  : 		}
; 637  : 
; 638  : 	_Myiter& operator+=(difference_type _Off)
; 639  : 		{	// increment by integer
; 640  : 		this->_Myoff += _Off;
; 641  : 		return (*this);
; 642  : 		}
; 643  : 
; 644  : 	_Myiter operator+(difference_type _Off) const
; 645  : 		{	// return this + integer
; 646  : 		_Myiter _Tmp = *this;
; 647  : 		return (_Tmp += _Off);
; 648  : 		}
; 649  : 
; 650  : 	_Myiter& operator-=(difference_type _Off)
; 651  : 		{	// decrement by integer
; 652  : 		return (*this += -_Off);
; 653  : 		}
; 654  : 
; 655  : 	_Myiter operator-(difference_type _Off) const
; 656  : 		{	// return this - integer
; 657  : 		_Myiter _Tmp = *this;
; 658  : 		return (_Tmp -= _Off);
; 659  : 		}
; 660  : 
; 661  : 	difference_type operator-(const _Mybase& _Right) const
; 662  : 		{	// return difference of iterators
; 663  : 		return (*(_Mybase *)this - _Right);
; 664  : 		}
; 665  : 
; 666  : 	reference operator[](difference_type _Off) const
; 667  : 		{	// subscript
; 668  : 		return (*(*this + _Off));
; 669  : 		}
; 670  : 	};
; 671  : 
; 672  : template<class _Mydeque> inline
; 673  : 	typename _Deque_iterator<_Mydeque>::_Unchecked_type
; 674  : 		_Unchecked(_Deque_iterator<_Mydeque> _Iter)
; 675  : 	{	// convert to unchecked
; 676  : 	return (_Iter._Unchecked());
; 677  : 	}
; 678  : 
; 679  : template<class _Mydeque> inline
; 680  : 	_Deque_iterator<_Mydeque>&
; 681  : 		_Rechecked(_Deque_iterator<_Mydeque>& _Iter,
; 682  : 			typename _Deque_iterator<_Mydeque>
; 683  : 				::_Unchecked_type _Right)
; 684  : 	{	// convert to checked
; 685  : 	return (_Iter._Rechecked(_Right));
; 686  : 	}
; 687  : 
; 688  : template<class _Mydeque> inline
; 689  : 	_Deque_iterator<_Mydeque> operator+(
; 690  : 		typename _Deque_iterator<_Mydeque>::difference_type _Off,
; 691  : 		_Deque_iterator<_Mydeque> _Next)
; 692  : 	{	// add offset to iterator
; 693  : 	return (_Next += _Off);
; 694  : 	}
; 695  : 
; 696  : 		// deque TYPE WRAPPERS
; 697  : template<class _Value_type,
; 698  : 	class _Size_type,
; 699  : 	class _Difference_type,
; 700  : 	class _Pointer,
; 701  : 	class _Const_pointer,
; 702  : 	class _Reference,
; 703  : 	class _Const_reference,
; 704  : 	class _Mapptr_type>
; 705  : 	struct _Deque_iter_types
; 706  : 	{	// wraps types needed by iterators
; 707  : 	typedef _Value_type value_type;
; 708  : 	typedef _Size_type size_type;
; 709  : 	typedef _Difference_type difference_type;
; 710  : 	typedef _Pointer pointer;
; 711  : 	typedef _Const_pointer const_pointer;
; 712  : 	typedef _Reference reference;
; 713  : 	typedef _Const_reference const_reference;
; 714  : 	typedef _Mapptr_type _Mapptr;
; 715  : 	};
; 716  : 
; 717  : template<class _Ty>
; 718  : 	struct _Deque_simple_types
; 719  : 		: public _Simple_types<_Ty>
; 720  : 	{	// wraps types needed by iterators
; 721  : 	typedef _Ty **_Mapptr;
; 722  : 	};
; 723  : 
; 724  : template<class _Ty,
; 725  : 	class _Alloc0>
; 726  : 	struct _Deque_base_types
; 727  : 	{	// types needed for a container base
; 728  : 	typedef _Alloc0 _Alloc;
; 729  : 	typedef _Deque_base_types<_Ty, _Alloc> _Myt;
; 730  : 
; 731  :  #if _HAS_CPP0X
; 732  : 	typedef _Wrap_alloc<_Alloc> _Alty0;
; 733  : 	typedef typename _Alty0::template rebind<_Ty>::other _Alty;
; 734  : 
; 735  :  #else /* _HAS_CPP0X */
; 736  : 	typedef typename _Alloc::template rebind<_Ty>::other _Alty;
; 737  :  #endif /* _HAS_CPP0X */
; 738  : 
; 739  : 	typedef typename _Alty::pointer _Tptr;
; 740  : 	typedef typename _Alty::template rebind<_Tptr>::other _Alpty;
; 741  : 	typedef typename _Alpty::pointer _Mapptr;
; 742  : 
; 743  : 	typedef typename _If<_Is_simple_alloc<_Alty>::value,
; 744  : 		_Deque_simple_types<typename _Alty::value_type>,
; 745  : 		_Deque_iter_types<typename _Alty::value_type,
; 746  : 			typename _Alty::size_type,
; 747  : 			typename _Alty::difference_type,
; 748  : 			typename _Alty::pointer,
; 749  : 			typename _Alty::const_pointer,
; 750  : 			typename _Alty::reference,
; 751  : 			typename _Alty::const_reference,
; 752  : 			_Mapptr> >::type
; 753  : 		_Val_types;
; 754  : 	};
; 755  : 
; 756  : 		// TEMPLATE CLASS _Deque_val
; 757  : template<class _Val_types>
; 758  : 	class _Deque_val
; 759  : 		: public _Container_base12
; 760  : 	{	// base class for deque to hold data
; 761  : public:
; 762  : 	typedef _Deque_val<_Val_types> _Myt;
; 763  : 
; 764  : 	typedef typename _Val_types::value_type value_type;
; 765  : 	typedef typename _Val_types::size_type size_type;
; 766  : 	typedef typename _Val_types::difference_type difference_type;
; 767  : 	typedef typename _Val_types::pointer pointer;
; 768  : 	typedef typename _Val_types::const_pointer const_pointer;
; 769  : 	typedef typename _Val_types::reference reference;
; 770  : 	typedef typename _Val_types::const_reference const_reference;
; 771  : 	typedef typename _Val_types::_Mapptr _Mapptr;
; 772  : 
; 773  : 	typedef _Deque_iterator<_Myt> iterator;
; 774  : 	typedef _Deque_const_iterator<_Myt> const_iterator;
; 775  : 
; 776  : 	_Deque_val()
; 777  : 		{	// initialize values
; 778  : 		_Map = _Mapptr();
; 779  : 		_Mapsize = 0;
; 780  : 		_Myoff = 0;
; 781  : 		_Mysize = 0;
; 782  : 		}
; 783  : 
; 784  : 	size_type _Getblock(size_type _Off) const
; 785  : 		{	// determine block from offset
; 786  : 			// NB: _Mapsize and _DEQUESIZ are guaranteed to be powers of 2
; 787  : 		return ((_Off / _DEQUESIZ) & (this->_Mapsize - 1));

  0000b	48 ff ca	 dec	 rdx
  0000e	48 23 51 08	 and	 rdx, QWORD PTR [rcx+8]

; 55   : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 56   : 		size_type _Off = _Myoff % _DEQUESIZ;
; 57   : 		return (_Mycont->_Map[_Block][_Off]);

  00012	48 8b 04 d0	 mov	 rax, QWORD PTR [rax+rdx*8]

; 58   : 		}

  00016	c3		 ret	 0
??D?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBAAEBVMatrix@geom@@XZ ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??G?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV01@@Z
_TEXT	SEGMENT
this$ = 8
_Right$ = 16
??G?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV01@@Z PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-, COMDAT

; 116  : 		return (_Right._Myoff <= _Myoff
; 117  : 			? _Myoff - _Right._Myoff
; 118  : 			: -(difference_type)(_Right._Myoff - _Myoff));

  00000	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00004	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00008	49 2b c0	 sub	 rax, r8

; 119  : 		}

  0000b	c3		 ret	 0
??G?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEBA_JAEBV01@@Z ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\deque
;	COMDAT ??Y?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
??Y?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z PROC ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=, COMDAT

; 93   : 		_Myoff += _Off;

  00000	48 01 51 08	 add	 QWORD PTR [rcx+8], rdx

; 94   : 		return (*this);

  00004	48 8b c1	 mov	 rax, rcx

; 95   : 		}

  00007	c3		 ret	 0
??Y?$_Deque_unchecked_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@VMatrix@geom@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ENDP ; std::_Deque_unchecked_const_iterator<std::_Deque_val<std::_Deque_simple_types<geom::Matrix> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$destroy@VVertexUVRGBA@gfxu@@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$dead$ = 16
??$destroy@VVertexUVRGBA@gfxu@@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@@Z PROC ; std::allocator<gfxu::VertexUVRGBA>::destroy<gfxu::VertexUVRGBA>, COMDAT

; 622  : 		{	// destroy object at _Ptr
; 623  : 		_Ptr->~_Uty();
; 624  : 		}

  00000	c2 00 00	 ret	 0
??$destroy@VVertexUVRGBA@gfxu@@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@@Z ENDP ; std::allocator<gfxu::VertexUVRGBA>::destroy<gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$forward@VVertexUVRGBA@gfxu@@@std@@YA$$QEAVVertexUVRGBA@gfxu@@AEAV12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@VVertexUVRGBA@gfxu@@@std@@YA$$QEAVVertexUVRGBA@gfxu@@AEAV12@@Z PROC ; std::forward<gfxu::VertexUVRGBA>, COMDAT

; 1776 : 	return (static_cast<_Ty&&>(_Arg));

  00000	48 8b c1	 mov	 rax, rcx

; 1777 : 	}

  00003	c3		 ret	 0
??$forward@VVertexUVRGBA@gfxu@@@std@@YA$$QEAVVertexUVRGBA@gfxu@@AEAV12@@Z ENDP ; std::forward<gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@$$QEAV34@@Z
_TEXT	SEGMENT
_Al$dead$ = 8
_Ptr$ = 16
_V0$ = 24
??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@$$QEAV34@@Z PROC ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>, COMDAT

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 41		 je	 SHORT $LN7@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  00005	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00008	89 02		 mov	 DWORD PTR [rdx], eax
  0000a	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0000e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00011	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00015	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00018	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0001c	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  0001f	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00023	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00026	41 0f b6 40 14	 movzx	 eax, BYTE PTR [r8+20]
  0002b	88 42 14	 mov	 BYTE PTR [rdx+20], al
  0002e	41 0f b6 40 15	 movzx	 eax, BYTE PTR [r8+21]
  00033	88 42 15	 mov	 BYTE PTR [rdx+21], al
  00036	41 0f b6 40 16	 movzx	 eax, BYTE PTR [r8+22]
  0003b	88 42 16	 mov	 BYTE PTR [rdx+22], al
  0003e	41 0f b6 40 17	 movzx	 eax, BYTE PTR [r8+23]
  00043	88 42 17	 mov	 BYTE PTR [rdx+23], al
$LN7@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 751  : _VARIADIC_EXPAND_0X(_ALLOC_TRAITS_SPECIAL_CONSTRUCT, , , , )

  00046	f3 c3		 fatret	 0
??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator_traits@V?$allocator@VVertexUVRGBA@gfxu@@@std@@@std@@SAXAEAV?$allocator@VVertexUVRGBA@gfxu@@@1@PEAVVertexUVRGBA@gfxu@@$$QEAV34@@Z ENDP ; std::allocator_traits<std::allocator<gfxu::VertexUVRGBA> >::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??$swap@VMatrix@geom@@@std@@YAXAEAVMatrix@geom@@0@Z
_TEXT	SEGMENT
_Tmp$ = 0
__$ArrayPad$ = 64
_Left$ = 96
_Right$ = 104
??$swap@VMatrix@geom@@@std@@YAXAEAVMatrix@geom@@0@Z PROC ; std::swap<geom::Matrix>, COMDAT

; 46   : 	{	// exchange values stored at _Left and _Right

$LN27:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000b	48 33 c4	 xor	 rax, rsp
  0000e	48 89 44 24 40	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 47   : 	_Ty _Tmp = _Move(_Left);

  00013	f2 0f 10 01	 movsdx	 xmm0, QWORD PTR [rcx]
  00017	f2 0f 10 49 08	 movsdx	 xmm1, QWORD PTR [rcx+8]
  0001c	4c 8b ca	 mov	 r9, rdx
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 212  : 	for(int i = 0; i < 16; i++)

  0001f	4d 8b c1	 mov	 r8, r9
  00022	48 8d 51 04	 lea	 rdx, QWORD PTR [rcx+4]
  00026	4c 2b c1	 sub	 r8, rcx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 47   : 	_Ty _Tmp = _Move(_Left);

  00029	f2 0f 11 04 24	 movsdx	 QWORD PTR _Tmp$[rsp], xmm0
  0002e	f2 0f 10 41 10	 movsdx	 xmm0, QWORD PTR [rcx+16]
  00033	f2 0f 11 4c 24
	08		 movsdx	 QWORD PTR _Tmp$[rsp+8], xmm1
  00039	f2 0f 10 49 18	 movsdx	 xmm1, QWORD PTR [rcx+24]
  0003e	f2 0f 11 44 24
	10		 movsdx	 QWORD PTR _Tmp$[rsp+16], xmm0
  00044	f2 0f 10 41 20	 movsdx	 xmm0, QWORD PTR [rcx+32]
  00049	f2 0f 11 4c 24
	18		 movsdx	 QWORD PTR _Tmp$[rsp+24], xmm1
  0004f	f2 0f 10 49 28	 movsdx	 xmm1, QWORD PTR [rcx+40]
  00054	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR _Tmp$[rsp+32], xmm0
  0005a	f2 0f 10 41 30	 movsdx	 xmm0, QWORD PTR [rcx+48]
  0005f	f2 0f 11 4c 24
	28		 movsdx	 QWORD PTR _Tmp$[rsp+40], xmm1
  00065	f2 0f 10 49 38	 movsdx	 xmm1, QWORD PTR [rcx+56]
  0006a	b9 02 00 00 00	 mov	 ecx, 2
  0006f	f2 0f 11 44 24
	30		 movsdx	 QWORD PTR _Tmp$[rsp+48], xmm0
  00075	f2 0f 11 4c 24
	38		 movsdx	 QWORD PTR _Tmp$[rsp+56], xmm1
  0007b	0f 1f 44 00 00	 npad	 5
$LL9@swap:
; File c:\users\glenn\documents\github\wind\project\wind\wind\geometry.cpp

; 214  : 		data[i] = mat.data[i];

  00080	41 8b 44 10 fc	 mov	 eax, DWORD PTR [r8+rdx-4]
  00085	48 8d 52 20	 lea	 rdx, QWORD PTR [rdx+32]
  00089	89 42 dc	 mov	 DWORD PTR [rdx-36], eax
  0008c	41 8b 44 10 e0	 mov	 eax, DWORD PTR [r8+rdx-32]
  00091	89 42 e0	 mov	 DWORD PTR [rdx-32], eax
  00094	41 8b 44 10 e4	 mov	 eax, DWORD PTR [r8+rdx-28]
  00099	89 42 e4	 mov	 DWORD PTR [rdx-28], eax
  0009c	41 8b 44 10 e8	 mov	 eax, DWORD PTR [r8+rdx-24]
  000a1	89 42 e8	 mov	 DWORD PTR [rdx-24], eax
  000a4	41 8b 44 10 ec	 mov	 eax, DWORD PTR [r8+rdx-20]
  000a9	89 42 ec	 mov	 DWORD PTR [rdx-20], eax
  000ac	41 8b 44 10 f0	 mov	 eax, DWORD PTR [r8+rdx-16]
  000b1	89 42 f0	 mov	 DWORD PTR [rdx-16], eax
  000b4	41 8b 44 10 f4	 mov	 eax, DWORD PTR [r8+rdx-12]
  000b9	89 42 f4	 mov	 DWORD PTR [rdx-12], eax
  000bc	41 8b 44 10 f8	 mov	 eax, DWORD PTR [r8+rdx-8]
  000c1	89 42 f8	 mov	 DWORD PTR [rdx-8], eax
  000c4	48 ff c9	 dec	 rcx
  000c7	75 b7		 jne	 SHORT $LL9@swap
  000c9	48 8b 04 24	 mov	 rax, QWORD PTR _Tmp$[rsp]
  000cd	49 89 01	 mov	 QWORD PTR [r9], rax
  000d0	48 8b 44 24 08	 mov	 rax, QWORD PTR _Tmp$[rsp+8]
  000d5	49 89 41 08	 mov	 QWORD PTR [r9+8], rax
  000d9	48 8b 44 24 10	 mov	 rax, QWORD PTR _Tmp$[rsp+16]
  000de	49 89 41 10	 mov	 QWORD PTR [r9+16], rax
  000e2	48 8b 44 24 18	 mov	 rax, QWORD PTR _Tmp$[rsp+24]
  000e7	49 89 41 18	 mov	 QWORD PTR [r9+24], rax
  000eb	48 8b 44 24 20	 mov	 rax, QWORD PTR _Tmp$[rsp+32]
  000f0	49 89 41 20	 mov	 QWORD PTR [r9+32], rax
  000f4	48 8b 44 24 28	 mov	 rax, QWORD PTR _Tmp$[rsp+40]
  000f9	49 89 41 28	 mov	 QWORD PTR [r9+40], rax
  000fd	48 8b 44 24 30	 mov	 rax, QWORD PTR _Tmp$[rsp+48]
  00102	49 89 41 30	 mov	 QWORD PTR [r9+48], rax
  00106	48 8b 44 24 38	 mov	 rax, QWORD PTR _Tmp$[rsp+56]
  0010b	49 89 41 38	 mov	 QWORD PTR [r9+56], rax
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility

; 50   : 	}

  0010f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00114	48 33 cc	 xor	 rcx, rsp
  00117	e8 00 00 00 00	 call	 __security_check_cookie
  0011c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00120	c3		 ret	 0
??$swap@VMatrix@geom@@@std@@YAXAEAVMatrix@geom@@0@Z ENDP ; std::swap<geom::Matrix>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0
;	COMDAT ??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@$$QEAV23@@Z
_TEXT	SEGMENT
this$dead$ = 8
_Ptr$ = 16
_V0$ = 24
??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@$$QEAV23@@Z PROC ; std::allocator<gfxu::VertexUVRGBA>::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>, COMDAT

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00000	48 85 d2	 test	 rdx, rdx
  00003	74 41		 je	 SHORT $LN3@construct
; File c:\users\glenn\documents\github\wind\project\wind\wind\graphics.cpp

; 85   : {}

  00005	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00008	89 02		 mov	 DWORD PTR [rdx], eax
  0000a	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  0000e	89 42 04	 mov	 DWORD PTR [rdx+4], eax
  00011	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00015	89 42 08	 mov	 DWORD PTR [rdx+8], eax
  00018	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0001c	89 42 0c	 mov	 DWORD PTR [rdx+12], eax
  0001f	41 8b 40 10	 mov	 eax, DWORD PTR [r8+16]
  00023	89 42 10	 mov	 DWORD PTR [rdx+16], eax
  00026	41 0f b6 40 14	 movzx	 eax, BYTE PTR [r8+20]
  0002b	88 42 14	 mov	 BYTE PTR [rdx+20], al
  0002e	41 0f b6 40 15	 movzx	 eax, BYTE PTR [r8+21]
  00033	88 42 15	 mov	 BYTE PTR [rdx+21], al
  00036	41 0f b6 40 16	 movzx	 eax, BYTE PTR [r8+22]
  0003b	88 42 16	 mov	 BYTE PTR [rdx+22], al
  0003e	41 0f b6 40 17	 movzx	 eax, BYTE PTR [r8+23]
  00043	88 42 17	 mov	 BYTE PTR [rdx+23], al
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xmemory0

; 617  : _VARIADIC_EXPAND_0X(_ALLOC_MEMBER_CONSTRUCT, , , , )

  00046	f3 c3		 fatret	 0
??$construct@VVertexUVRGBA@gfxu@@V12@@?$allocator@VVertexUVRGBA@gfxu@@@std@@QEAAXPEAVVertexUVRGBA@gfxu@@$$QEAV23@@Z ENDP ; std::allocator<gfxu::VertexUVRGBA>::construct<gfxu::VertexUVRGBA,gfxu::VertexUVRGBA>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\type_traits
;	COMDAT ??$_Move@AEAVMatrix@geom@@@std@@YA$$QEAVMatrix@geom@@AEAV12@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$_Move@AEAVMatrix@geom@@@std@@YA$$QEAVMatrix@geom@@AEAV12@@Z PROC ; std::_Move<geom::Matrix & __ptr64>, COMDAT

; 1799 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

  00000	48 8b c1	 mov	 rax, rcx

; 1800 : 	}

  00003	c3		 ret	 0
??$_Move@AEAVMatrix@geom@@@std@@YA$$QEAVMatrix@geom@@AEAV12@@Z ENDP ; std::_Move<geom::Matrix & __ptr64>
_TEXT	ENDS
END
