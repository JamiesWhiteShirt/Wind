; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?mbs@Mouse@@0PA_NA				; Mouse::mbs
PUBLIC	?keys@Keyboard@@0PA_NA				; Keyboard::keys
?mbs@Mouse@@0PA_NA DB 03H DUP (?)			; Mouse::mbs
	ALIGN	4

?keys@Keyboard@@0PA_NA DB 0100H DUP (?)			; Keyboard::keys
_BSS	ENDS
PUBLIC	??_FMouseAction@@QEAAXXZ			; MouseAction::`default constructor closure'
PUBLIC	??_FKeyboardAction@@QEAAXXZ			; KeyboardAction::`default constructor closure'
PUBLIC	??0?$List@VMouseAction@@$0BA@@@QEAA@XZ		; List<MouseAction,16>::List<MouseAction,16>
PUBLIC	??0?$List@VKeyboardAction@@$0BA@@@QEAA@XZ	; List<KeyboardAction,16>::List<KeyboardAction,16>
PUBLIC	?getMB@Mouse@@SA_NH@Z				; Mouse::getMB
PUBLIC	?setMB@Mouse@@SAXH_N@Z				; Mouse::setMB
PUBLIC	??0MouseAction@@QEAA@HHHH_N@Z			; MouseAction::MouseAction
PUBLIC	?getKey@Keyboard@@SA_NH@Z			; Keyboard::getKey
PUBLIC	?setKey@Keyboard@@SAXH_N@Z			; Keyboard::setKey
PUBLIC	??0KeyboardAction@@QEAA@H_N@Z			; KeyboardAction::KeyboardAction
PUBLIC	?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A ; Keyboard::actions
PUBLIC	?mut@Keyboard@@2Vmutex@std@@A			; Keyboard::mut
PUBLIC	?mut@Mouse@@2Vmutex@std@@A			; Mouse::mut
PUBLIC	?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A	; Mouse::actions
_Tuple_alloc DB	01H DUP (?)
	ALIGN	4

ignore	DB	01H DUP (?)
	ALIGN	4

?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A DB 084H DUP (?) ; Keyboard::actions
allocator_arg DB 01H DUP (?)
	ALIGN	8

?mut@Keyboard@@2Vmutex@std@@A DQ 01H DUP (?)		; Keyboard::mut
piecewise_construct DB 01H DUP (?)
	ALIGN	8

?mut@Mouse@@2Vmutex@std@@A DQ 01H DUP (?)		; Mouse::mut
?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A DB 0144H DUP (?) ; Mouse::actions
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getMB@Mouse@@SA_NH@Z DD imagerel $LN19
	DD	imagerel $LN19+68
	DD	imagerel $unwind$?getMB@Mouse@@SA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setMB@Mouse@@SAXH_N@Z DD imagerel $LN18
	DD	imagerel $LN18+83
	DD	imagerel $unwind$?setMB@Mouse@@SAXH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E?mut@Mouse@@2Vmutex@std@@A@@YAXXZ DD imagerel ??__E?mut@Mouse@@2Vmutex@std@@A@@YAXXZ
	DD	imagerel ??__E?mut@Mouse@@2Vmutex@std@@A@@YAXXZ+48
	DD	imagerel $unwind$??__E?mut@Mouse@@2Vmutex@std@@A@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getKey@Keyboard@@SA_NH@Z DD imagerel $LN19
	DD	imagerel $LN19+75
	DD	imagerel $unwind$?getKey@Keyboard@@SA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setKey@Keyboard@@SAXH_N@Z DD imagerel $LN18
	DD	imagerel $LN18+83
	DD	imagerel $unwind$?setKey@Keyboard@@SAXH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ DD imagerel ??__E?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ
	DD	imagerel ??__E?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ+48
	DD	imagerel $unwind$??__E?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setKey@Keyboard@@SAXH_N@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getKey@Keyboard@@SA_NH@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E?mut@Mouse@@2Vmutex@std@@A@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setMB@Mouse@@SAXH_N@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getMB@Mouse@@SA_NH@Z DD 020601H
	DD	030023206H
?actions$initializer$@Keyboard@@2P6AXXZEA DQ FLAT:??__E?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A@@YAXXZ ; Keyboard::actions$initializer$
?mut$initializer$@Keyboard@@2P6AXXZEA DQ FLAT:??__E?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ ; Keyboard::mut$initializer$
?actions$initializer$@Mouse@@2P6AXXZEA DQ FLAT:??__E?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A@@YAXXZ ; Mouse::actions$initializer$
?mut$initializer$@Mouse@@2P6AXXZEA DQ FLAT:??__E?mut@Mouse@@2Vmutex@std@@A@@YAXXZ ; Mouse::mut$initializer$
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??0KeyboardAction@@QEAA@H_N@Z
_TEXT	SEGMENT
this$ = 8
button$ = 16
released$ = 24
??0KeyboardAction@@QEAA@H_N@Z PROC			; KeyboardAction::KeyboardAction, COMDAT

; 5    : {

  00000	89 11		 mov	 DWORD PTR [rcx], edx
  00002	44 88 41 04	 mov	 BYTE PTR [rcx+4], r8b

; 6    : 
; 7    : }

  00006	48 8b c1	 mov	 rax, rcx
  00009	c3		 ret	 0
??0KeyboardAction@@QEAA@H_N@Z ENDP			; KeyboardAction::KeyboardAction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\users\erlend\documents\github\wind\project\wind\wind\list.h
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??__E?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A@@YAXXZ
text$yc	SEGMENT
??__E?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A@@YAXXZ PROC ; `dynamic initializer for 'Keyboard::actions'', COMDAT
; File c:\users\erlend\documents\github\wind\project\wind\wind\list.h

; 12   : 	List()

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A ; Keyboard::actions
  00007	b9 0f 00 00 00	 mov	 ecx, 15
  0000c	0f 1f 40 00	 npad	 4
$LL6@actions:
  00010	ff c9		 dec	 ecx
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 5    : {

  00012	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [rax], -1
  00018	c6 40 04 00	 mov	 BYTE PTR [rax+4], 0
  0001c	48 8d 40 08	 lea	 rax, QWORD PTR [rax+8]
  00020	79 ee		 jns	 SHORT $LL6@actions

; 10   : List<KeyboardAction, 16> Keyboard::actions;

  00022	f3 c3		 fatret	 0
??__E?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A@@YAXXZ ENDP ; `dynamic initializer for 'Keyboard::actions''
text$yc	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??__E?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ
text$yc	SEGMENT
??__E?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ PROC		; `dynamic initializer for 'Keyboard::mut'', COMDAT

; 11   : std::mutex Keyboard::mut;

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 63   : 	return (_Check_C_return(_Mtx_init(_Mtx, _Type)));

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mut@Keyboard@@2Vmutex@std@@A ; Keyboard::mut
  0000b	ba 02 00 00 00	 mov	 edx, 2
  00010	e8 00 00 00 00	 call	 _Mtx_init

; 32   : 	if (_Res != _Thrd_success)

  00015	85 c0		 test	 eax, eax
  00017	74 07		 je	 SHORT $LN9@mut

; 33   : 		_Throw_C_error(_Res);

  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN9@mut:
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 11   : std::mutex Keyboard::mut;

  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__F?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ ; `dynamic atexit destructor for 'Keyboard::mut''
  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	e9 00 00 00 00	 jmp	 atexit
??__E?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ ENDP		; `dynamic initializer for 'Keyboard::mut''
text$yc	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
;	COMDAT ??__F?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ PROC		; `dynamic atexit destructor for 'Keyboard::mut'', COMDAT

; 33   : 		_Mtx_destroy(&_Mtx);

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mut@Keyboard@@2Vmutex@std@@A ; Keyboard::mut
  00007	e9 00 00 00 00	 jmp	 _Mtx_destroy
??__F?mut@Keyboard@@2Vmutex@std@@A@@YAXXZ ENDP		; `dynamic atexit destructor for 'Keyboard::mut''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ?setKey@Keyboard@@SAXH_N@Z
_TEXT	SEGMENT
index$ = 48
value$ = 56
?setKey@Keyboard@@SAXH_N@Z PROC				; Keyboard::setKey, COMDAT

; 14   : {

$LN18:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 63 f9	 movsxd	 rdi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mut@Keyboard@@2Vmutex@std@@A ; Keyboard::mut
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 14   : {

  00014	0f b6 da	 movzx	 ebx, dl
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00017	e8 00 00 00 00	 call	 _Mtx_lock

; 32   : 	if (_Res != _Thrd_success)

  0001c	85 c0		 test	 eax, eax
  0001e	74 07		 je	 SHORT $LN7@setKey

; 33   : 		_Throw_C_error(_Res);

  00020	8b c8		 mov	 ecx, eax
  00022	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN7@setKey:
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 16   : 	keys[index] = value;

  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?keys@Keyboard@@0PA_NA ; Keyboard::keys
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mut@Keyboard@@2Vmutex@std@@A ; Keyboard::mut
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 16   : 	keys[index] = value;

  00035	88 1c 17	 mov	 BYTE PTR [rdi+rdx], bl
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  00038	e8 00 00 00 00	 call	 _Mtx_unlock

; 32   : 	if (_Res != _Thrd_success)

  0003d	85 c0		 test	 eax, eax
  0003f	74 07		 je	 SHORT $LN14@setKey

; 33   : 		_Throw_C_error(_Res);

  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN14@setKey:
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 18   : }

  00048	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
?setKey@Keyboard@@SAXH_N@Z ENDP				; Keyboard::setKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ?getKey@Keyboard@@SA_NH@Z
_TEXT	SEGMENT
index$ = 48
?getKey@Keyboard@@SA_NH@Z PROC				; Keyboard::getKey, COMDAT

; 21   : {

$LN19:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 63 d9	 movsxd	 rbx, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mut@Keyboard@@2Vmutex@std@@A ; Keyboard::mut
  00010	e8 00 00 00 00	 call	 _Mtx_lock

; 32   : 	if (_Res != _Thrd_success)

  00015	85 c0		 test	 eax, eax
  00017	74 07		 je	 SHORT $LN7@getKey

; 33   : 		_Throw_C_error(_Res);

  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN7@getKey:
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 23   : 	bool value = keys[index];

  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?keys@Keyboard@@0PA_NA ; Keyboard::keys
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mut@Keyboard@@2Vmutex@std@@A ; Keyboard::mut
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 23   : 	bool value = keys[index];

  0002e	0f b6 1c 13	 movzx	 ebx, BYTE PTR [rbx+rdx]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  00032	e8 00 00 00 00	 call	 _Mtx_unlock

; 32   : 	if (_Res != _Thrd_success)

  00037	85 c0		 test	 eax, eax
  00039	74 07		 je	 SHORT $LN17@getKey

; 33   : 		_Throw_C_error(_Res);

  0003b	8b c8		 mov	 ecx, eax
  0003d	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN17@getKey:
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 25   : 	return value;

  00042	0f b6 c3	 movzx	 eax, bl

; 26   : }

  00045	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00049	5b		 pop	 rbx
  0004a	c3		 ret	 0
?getKey@Keyboard@@SA_NH@Z ENDP				; Keyboard::getKey
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??0MouseAction@@QEAA@HHHH_N@Z
_TEXT	SEGMENT
this$ = 8
rx$ = 16
ry$ = 24
sc$ = 32
button$ = 40
released$ = 48
??0MouseAction@@QEAA@HHHH_N@Z PROC			; MouseAction::MouseAction, COMDAT

; 30   : {

  00000	8b 44 24 28	 mov	 eax, DWORD PTR button$[rsp]
  00004	89 11		 mov	 DWORD PTR [rcx], edx
  00006	44 89 41 04	 mov	 DWORD PTR [rcx+4], r8d
  0000a	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  0000d	0f b6 44 24 30	 movzx	 eax, BYTE PTR released$[rsp]
  00012	44 89 49 08	 mov	 DWORD PTR [rcx+8], r9d
  00016	88 41 10	 mov	 BYTE PTR [rcx+16], al

; 31   : 
; 32   : }

  00019	48 8b c1	 mov	 rax, rcx
  0001c	c3		 ret	 0
??0MouseAction@@QEAA@HHHH_N@Z ENDP			; MouseAction::MouseAction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\users\erlend\documents\github\wind\project\wind\wind\list.h
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??__E?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A@@YAXXZ
text$yc	SEGMENT
??__E?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A@@YAXXZ PROC ; `dynamic initializer for 'Mouse::actions'', COMDAT

; 35   : List<MouseAction, 16> Mouse::actions;

  00000	b9 0f 00 00 00	 mov	 ecx, 15
; File c:\users\erlend\documents\github\wind\project\wind\wind\list.h

; 12   : 	List()

  00005	48 8d 05 08 00
	00 00		 lea	 rax, OFFSET FLAT:?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A+8
  0000c	33 d2		 xor	 edx, edx
  0000e	66 90		 npad	 2
$LL6@actions:
  00010	ff c9		 dec	 ecx
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 30   : {

  00012	48 89 50 f8	 mov	 QWORD PTR [rax-8], rdx
  00016	89 10		 mov	 DWORD PTR [rax], edx
  00018	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [rax+4], -1
  0001f	88 50 08	 mov	 BYTE PTR [rax+8], dl
  00022	48 8d 40 14	 lea	 rax, QWORD PTR [rax+20]
  00026	79 e8		 jns	 SHORT $LL6@actions

; 35   : List<MouseAction, 16> Mouse::actions;

  00028	f3 c3		 fatret	 0
??__E?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A@@YAXXZ ENDP ; `dynamic initializer for 'Mouse::actions''
text$yc	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??__E?mut@Mouse@@2Vmutex@std@@A@@YAXXZ
text$yc	SEGMENT
??__E?mut@Mouse@@2Vmutex@std@@A@@YAXXZ PROC		; `dynamic initializer for 'Mouse::mut'', COMDAT

; 36   : std::mutex Mouse::mut;

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 63   : 	return (_Check_C_return(_Mtx_init(_Mtx, _Type)));

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mut@Mouse@@2Vmutex@std@@A ; Mouse::mut
  0000b	ba 02 00 00 00	 mov	 edx, 2
  00010	e8 00 00 00 00	 call	 _Mtx_init

; 32   : 	if (_Res != _Thrd_success)

  00015	85 c0		 test	 eax, eax
  00017	74 07		 je	 SHORT $LN9@mut

; 33   : 		_Throw_C_error(_Res);

  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN9@mut:
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 36   : std::mutex Mouse::mut;

  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__F?mut@Mouse@@2Vmutex@std@@A@@YAXXZ ; `dynamic atexit destructor for 'Mouse::mut''
  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	e9 00 00 00 00	 jmp	 atexit
??__E?mut@Mouse@@2Vmutex@std@@A@@YAXXZ ENDP		; `dynamic initializer for 'Mouse::mut''
text$yc	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\mutex
;	COMDAT ??__F?mut@Mouse@@2Vmutex@std@@A@@YAXXZ
text$yd	SEGMENT
??__F?mut@Mouse@@2Vmutex@std@@A@@YAXXZ PROC		; `dynamic atexit destructor for 'Mouse::mut'', COMDAT

; 33   : 		_Mtx_destroy(&_Mtx);

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mut@Mouse@@2Vmutex@std@@A ; Mouse::mut
  00007	e9 00 00 00 00	 jmp	 _Mtx_destroy
??__F?mut@Mouse@@2Vmutex@std@@A@@YAXXZ ENDP		; `dynamic atexit destructor for 'Mouse::mut''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ?setMB@Mouse@@SAXH_N@Z
_TEXT	SEGMENT
index$ = 48
value$ = 56
?setMB@Mouse@@SAXH_N@Z PROC				; Mouse::setMB, COMDAT

; 39   : {

$LN18:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 63 f9	 movsxd	 rdi, ecx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mut@Mouse@@2Vmutex@std@@A ; Mouse::mut
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 39   : {

  00014	0f b6 da	 movzx	 ebx, dl
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00017	e8 00 00 00 00	 call	 _Mtx_lock

; 32   : 	if (_Res != _Thrd_success)

  0001c	85 c0		 test	 eax, eax
  0001e	74 07		 je	 SHORT $LN7@setMB

; 33   : 		_Throw_C_error(_Res);

  00020	8b c8		 mov	 ecx, eax
  00022	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN7@setMB:
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 41   : 	mbs[index] = value;

  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?mbs@Mouse@@0PA_NA ; Mouse::mbs
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mut@Mouse@@2Vmutex@std@@A ; Mouse::mut
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 41   : 	mbs[index] = value;

  00035	88 1c 17	 mov	 BYTE PTR [rdi+rdx], bl
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  00038	e8 00 00 00 00	 call	 _Mtx_unlock

; 32   : 	if (_Res != _Thrd_success)

  0003d	85 c0		 test	 eax, eax
  0003f	74 07		 je	 SHORT $LN14@setMB

; 33   : 		_Throw_C_error(_Res);

  00041	8b c8		 mov	 ecx, eax
  00043	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN14@setMB:
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 43   : }

  00048	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
?setMB@Mouse@@SAXH_N@Z ENDP				; Mouse::setMB
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ?getMB@Mouse@@SA_NH@Z
_TEXT	SEGMENT
index$dead$ = 48
?getMB@Mouse@@SA_NH@Z PROC				; Mouse::getMB, COMDAT

; 46   : {

$LN19:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 68   : 	return (_Check_C_return(_Mtx_lock(_Mtx)));

  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mut@Mouse@@2Vmutex@std@@A ; Mouse::mut
  0000d	e8 00 00 00 00	 call	 _Mtx_lock

; 32   : 	if (_Res != _Thrd_success)

  00012	85 c0		 test	 eax, eax
  00014	74 07		 je	 SHORT $LN7@getMB

; 33   : 		_Throw_C_error(_Res);

  00016	8b c8		 mov	 ecx, eax
  00018	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN7@getMB:
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 48   : 	bool value = mbs[index];

  0001d	0f b6 1d 00 00
	00 00		 movzx	 ebx, BYTE PTR ?mbs@Mouse@@0PA_NA
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\thr\xthread

; 83   : 	return (_Check_C_return(_Mtx_unlock(_Mtx)));

  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?mut@Mouse@@2Vmutex@std@@A ; Mouse::mut
  0002b	e8 00 00 00 00	 call	 _Mtx_unlock

; 32   : 	if (_Res != _Thrd_success)

  00030	85 c0		 test	 eax, eax
  00032	74 07		 je	 SHORT $LN17@getMB

; 33   : 		_Throw_C_error(_Res);

  00034	8b c8		 mov	 ecx, eax
  00036	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN17@getMB:
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 50   : 	return value;

  0003b	0f b6 c3	 movzx	 eax, bl

; 51   : }

  0003e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00042	5b		 pop	 rbx
  00043	c3		 ret	 0
?getMB@Mouse@@SA_NH@Z ENDP				; Mouse::getMB
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\list.h
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\users\erlend\documents\github\wind\project\wind\wind\list.h
;	COMDAT ??0?$List@VKeyboardAction@@$0BA@@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??0?$List@VKeyboardAction@@$0BA@@@QEAA@XZ PROC		; List<KeyboardAction,16>::List<KeyboardAction,16>, COMDAT

; 12   : 	List()

  00000	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A ; Keyboard::actions
  00007	ba 0f 00 00 00	 mov	 edx, 15
  0000c	0f 1f 40 00	 npad	 4
$LL4@List:
  00010	ff ca		 dec	 edx
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 5    : {

  00012	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [rcx], -1
  00018	c6 41 04 00	 mov	 BYTE PTR [rcx+4], 0
  0001c	48 8d 49 08	 lea	 rcx, QWORD PTR [rcx+8]
  00020	79 ee		 jns	 SHORT $LL4@List
; File c:\users\erlend\documents\github\wind\project\wind\wind\list.h

; 15   : 	}

  00022	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?actions@Keyboard@@2V?$List@VKeyboardAction@@$0BA@@@A ; Keyboard::actions
  00029	c3		 ret	 0
??0?$List@VKeyboardAction@@$0BA@@@QEAA@XZ ENDP		; List<KeyboardAction,16>::List<KeyboardAction,16>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\list.h
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
; File c:\users\erlend\documents\github\wind\project\wind\wind\list.h
;	COMDAT ??0?$List@VMouseAction@@$0BA@@@QEAA@XZ
_TEXT	SEGMENT
this$dead$ = 8
??0?$List@VMouseAction@@$0BA@@@QEAA@XZ PROC		; List<MouseAction,16>::List<MouseAction,16>, COMDAT

; 12   : 	List()

  00000	b9 0f 00 00 00	 mov	 ecx, 15
  00005	48 8d 05 08 00
	00 00		 lea	 rax, OFFSET FLAT:?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A+8
  0000c	33 d2		 xor	 edx, edx
  0000e	66 90		 npad	 2
$LL4@List:
  00010	ff c9		 dec	 ecx
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp

; 30   : {

  00012	48 89 50 f8	 mov	 QWORD PTR [rax-8], rdx
  00016	89 10		 mov	 DWORD PTR [rax], edx
  00018	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [rax+4], -1
  0001f	88 50 08	 mov	 BYTE PTR [rax+8], dl
  00022	48 8d 40 14	 lea	 rax, QWORD PTR [rax+20]
  00026	79 e8		 jns	 SHORT $LL4@List
; File c:\users\erlend\documents\github\wind\project\wind\wind\list.h

; 15   : 	}

  00028	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?actions@Mouse@@2V?$List@VMouseAction@@$0BA@@@A ; Mouse::actions
  0002f	c3		 ret	 0
??0?$List@VMouseAction@@$0BA@@@QEAA@XZ ENDP		; List<MouseAction,16>::List<MouseAction,16>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??_FKeyboardAction@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
??_FKeyboardAction@@QEAAXXZ PROC			; KeyboardAction::`default constructor closure', COMDAT

; 5    : {

  00000	c7 01 ff ff ff
	ff		 mov	 DWORD PTR [rcx], -1
  00006	c6 41 04 00	 mov	 BYTE PTR [rcx+4], 0
  0000a	c3		 ret	 0
??_FKeyboardAction@@QEAAXXZ ENDP			; KeyboardAction::`default constructor closure'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\input.cpp
;	COMDAT ??_FMouseAction@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
??_FMouseAction@@QEAAXXZ PROC				; MouseAction::`default constructor closure', COMDAT

; 30   : {

  00000	33 c0		 xor	 eax, eax
  00002	c7 41 0c ff ff
	ff ff		 mov	 DWORD PTR [rcx+12], -1
  00009	48 89 01	 mov	 QWORD PTR [rcx], rax
  0000c	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  0000f	88 41 10	 mov	 BYTE PTR [rcx+16], al
  00012	c3		 ret	 0
??_FMouseAction@@QEAAXXZ ENDP				; MouseAction::`default constructor closure'
_TEXT	ENDS
END
