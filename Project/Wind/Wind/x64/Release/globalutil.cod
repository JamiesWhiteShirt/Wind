; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??$_Nrand@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@IM@std@@YAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@0@IM@Z ; std::_Nrand<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>,unsigned int,float>
PUBLIC	?_Get_bits@?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@AEAAIXZ ; std::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >::_Get_bits
PUBLIC	?_Adjust@?$uniform_int@I@std@@CAIIU?$integral_constant@_N$0A@@2@@Z ; std::uniform_int<unsigned int>::_Adjust
PUBLIC	?max@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::max
PUBLIC	?_Get_all_bits@?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAAIXZ ; std::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >::_Get_all_bits
PUBLIC	??R?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAAII@Z ; std::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >::operator()
PUBLIC	??0?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAA@AEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z ; std::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
PUBLIC	?_Adjust@?$uniform_int@I@std@@CAII@Z		; std::uniform_int<unsigned int>::_Adjust
PUBLIC	?min@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::min
PUBLIC	??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@M@std@@AEBAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@AEBUparam_type@01@@Z ; std::uniform_real<float>::_Eval<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
PUBLIC	??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_int@I@std@@AEBAIAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@II@Z ; std::uniform_int<unsigned int>::_Eval<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
PUBLIC	??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@M@std@@QEBAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z ; std::uniform_real<float>::operator()<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
PUBLIC	??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_int@I@std@@QEBAIAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z ; std::uniform_int<unsigned int>::operator()<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
PUBLIC	?_Init@param_type@?$uniform_real@M@std@@QEAAXMM@Z ; std::uniform_real<float>::param_type::_Init
PUBLIC	?_Init@param_type@?$uniform_int@I@std@@QEAAXII@Z ; std::uniform_int<unsigned int>::param_type::_Init
PUBLIC	??0param_type@?$uniform_real@M@std@@QEAA@MM@Z	; std::uniform_real<float>::param_type::param_type
PUBLIC	??0param_type@?$uniform_int@I@std@@QEAA@II@Z	; std::uniform_int<unsigned int>::param_type::param_type
PUBLIC	??0?$uniform_real@M@std@@QEAA@MM@Z		; std::uniform_real<float>::uniform_real<float>
PUBLIC	??0?$uniform_int@I@std@@QEAA@II@Z		; std::uniform_int<unsigned int>::uniform_int<unsigned int>
PUBLIC	?_Refill_upper@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_upper
PUBLIC	?_Refill_lower@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_lower
PUBLIC	?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAXKI@Z ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::seed
PUBLIC	??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAA@KII@Z ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>
PUBLIC	??0?$uniform_real_distribution@M@std@@QEAA@MM@Z	; std::uniform_real_distribution<float>::uniform_real_distribution<float>
PUBLIC	??0?$uniform_int_distribution@I@std@@QEAA@II@Z	; std::uniform_int_distribution<unsigned int>::uniform_int_distribution<unsigned int>
PUBLIC	??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator()
PUBLIC	?seed@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAAXK@Z ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::seed
PUBLIC	??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAA@I@Z ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>
PUBLIC	?getUint@Random@@QEAAIXZ			; Random::getUint
PUBLIC	?getFloat@Random@@QEAAMMM@Z			; Random::getFloat
PUBLIC	?getUint@Random@@QEAAIII@Z			; Random::getUint
PUBLIC	??0Random@@QEAA@I@Z				; Random::Random
allocator_arg DB 01H DUP (?)
	ALIGN	4

piecewise_construct DB 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Nrand@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@IM@std@@YAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@0@IM@Z DD imagerel $LN6
	DD	imagerel $LN6+70
	DD	imagerel $unwind$??$_Nrand@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@IM@std@@YAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@0@IM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_bits@?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@AEAAIXZ DD imagerel $LN26
	DD	imagerel $LN26+201
	DD	imagerel $unwind$?_Get_bits@?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@AEAAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_all_bits@?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAAIXZ DD imagerel $LN20
	DD	imagerel $LN20+81
	DD	imagerel $unwind$?_Get_all_bits@?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAAII@Z DD imagerel $LN26
	DD	imagerel $LN26+146
	DD	imagerel $unwind$??R?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@M@std@@AEBAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@AEBUparam_type@01@@Z DD imagerel $LN10
	DD	imagerel $LN10+77
	DD	imagerel $unwind$??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@M@std@@AEBAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@AEBUparam_type@01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_int@I@std@@AEBAIAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@II@Z DD imagerel $LN72
	DD	imagerel $LN72+181
	DD	imagerel $unwind$??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_int@I@std@@AEBAIAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@M@std@@QEBAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z DD imagerel $LN12
	DD	imagerel $LN12+77
	DD	imagerel $unwind$??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@M@std@@QEBAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ DD imagerel $LN15
	DD	imagerel $LN15+165
	DD	imagerel $unwind$??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getFloat@Random@@QEAAMMM@Z DD imagerel $LN22
	DD	imagerel $LN22+93
	DD	imagerel $unwind$?getFloat@Random@@QEAAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getUint@Random@@QEAAIII@Z DD imagerel $LN84
	DD	imagerel $LN84+139
	DD	imagerel $unwind$?getUint@Random@@QEAAIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Random@@QEAA@I@Z DD imagerel $LN26
	DD	imagerel $LN26+170
	DD	imagerel $unwind$??0Random@@QEAA@I@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Random@@QEAA@I@Z DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getUint@Random@@QEAAIII@Z DD 081401H
	DD	096414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getFloat@Random@@QEAAMMM@Z DD 051201H
	DD	027812H
	DD	036809H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@M@std@@QEBAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_int@I@std@@AEBAIAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@II@Z DD 0a5201H
	DD	087452H
	DD	076446H
	DD	065441H
	DD	09340bH
	DD	0e007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@M@std@@AEBAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@AEBUparam_type@01@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAAII@Z DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_all_bits@?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAAIXZ DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_bits@?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@AEAAIXZ DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Nrand@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@IM@std@@YAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@0@IM@Z DD 040b01H
	DD	02680bH
	DD	030025206H
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp
;	COMDAT ??0Random@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
seed$ = 16
??0Random@@QEAA@I@Z PROC				; Random::Random, COMDAT

; 5    : {

$LN26:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	48 89 7c 24 18	 mov	 QWORD PTR [rsp+24], rdi
  0000f	89 11		 mov	 DWORD PTR [rcx], edx
  00011	4c 8d 49 0c	 lea	 r9, QWORD PTR [rcx+12]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random

; 1339 : 		_Ty _Prev = this->_Ax[0] = _X0 & _WMSK;

  00015	41 ba 71 15 00
	00		 mov	 r10d, 5489		; 00001571H

; 1340 : 		for (int _Ix = 1; _Ix < _Nx; ++_Ix)

  0001b	41 b8 01 00 00
	00		 mov	 r8d, 1
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp

; 5    : {

  00021	41 bb 6f 02 00
	00		 mov	 r11d, 623		; 0000026fH
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random

; 1312 : 		{	// construct with specified seed

  00027	c7 81 88 13 00
	00 ff ff ff ff	 mov	 DWORD PTR [rcx+5000], -1 ; ffffffffH
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp

; 5    : {

  00031	49 8b f9	 mov	 rdi, r9
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random

; 1339 : 		_Ty _Prev = this->_Ax[0] = _X0 & _WMSK;

  00034	44 89 51 08	 mov	 DWORD PTR [rcx+8], r10d

; 1340 : 		for (int _Ix = 1; _Ix < _Nx; ++_Ix)

  00038	41 8b d8	 mov	 ebx, r8d
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp

; 5    : {

  0003b	41 8b f3	 mov	 esi, r11d
  0003e	66 90		 npad	 2
$LL9@Random:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random

; 1342 : 				(_Ix + _Fx * (_Prev ^ (_Prev >> (_Wx - 2)))) & _WMSK;

  00040	41 8b c2	 mov	 eax, r10d
  00043	48 8d 7f 04	 lea	 rdi, QWORD PTR [rdi+4]
  00047	c1 e8 1e	 shr	 eax, 30
  0004a	44 33 d0	 xor	 r10d, eax
  0004d	45 69 d2 65 89
	07 6c		 imul	 r10d, 1812433253	; 6c078965H
  00054	44 03 d3	 add	 r10d, ebx
  00057	ff c3		 inc	 ebx
  00059	44 89 57 fc	 mov	 DWORD PTR [rdi-4], r10d
  0005d	48 ff ce	 dec	 rsi
  00060	75 de		 jne	 SHORT $LL9@Random

; 1343 : 		this->_Idx = _Nx;

  00062	c7 41 04 70 02
	00 00		 mov	 DWORD PTR [rcx+4], 624	; 00000270H

; 1339 : 		_Ty _Prev = this->_Ax[0] = _X0 & _WMSK;

  00069	89 51 08	 mov	 DWORD PTR [rcx+8], edx
  0006c	0f 1f 40 00	 npad	 4
$LL16@Random:

; 1342 : 				(_Ix + _Fx * (_Prev ^ (_Prev >> (_Wx - 2)))) & _WMSK;

  00070	8b c2		 mov	 eax, edx
  00072	4d 8d 49 04	 lea	 r9, QWORD PTR [r9+4]
  00076	c1 e8 1e	 shr	 eax, 30
  00079	33 d0		 xor	 edx, eax
  0007b	69 d2 65 89 07
	6c		 imul	 edx, 1812433253		; 6c078965H
  00081	41 03 d0	 add	 edx, r8d
  00084	41 ff c0	 inc	 r8d
  00087	41 89 51 fc	 mov	 DWORD PTR [r9-4], edx
  0008b	49 ff cb	 dec	 r11
  0008e	75 e0		 jne	 SHORT $LL16@Random
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp

; 7    : }

  00090	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  00095	48 8b 74 24 10	 mov	 rsi, QWORD PTR [rsp+16]
  0009a	48 8b 7c 24 18	 mov	 rdi, QWORD PTR [rsp+24]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random

; 1343 : 		this->_Idx = _Nx;

  0009f	c7 41 04 70 02
	00 00		 mov	 DWORD PTR [rcx+4], 624	; 00000270H
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp

; 7    : }

  000a6	48 8b c1	 mov	 rax, rcx
  000a9	c3		 ret	 0
??0Random@@QEAA@I@Z ENDP				; Random::Random
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp
;	COMDAT ?getUint@Random@@QEAAIII@Z
_TEXT	SEGMENT
this$ = 48
min$dead$ = 56
max$dead$ = 64
?getUint@Random@@QEAAIII@Z PROC				; Random::getUint, COMDAT

; 10   : {

$LN84:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 20	 mov	 QWORD PTR [rsp+32], rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 11   : 	std::uniform_int_distribution<unsigned int> distribution(min, max);
; 12   : 	return distribution(randomEngine);

  00014	33 ed		 xor	 ebp, ebp
  00016	48 8d 59 04	 lea	 rbx, QWORD PTR [rcx+4]
  0001a	83 ce ff	 or	 esi, -1			; ffffffffH
  0001d	0f 1f 00	 npad	 3
$LL49@getUint:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3475 : 				_Ret <<= _Bits;

  00020	8b fd		 mov	 edi, ebp
$LL56@getUint:

; 3485 : 			}
; 3486 : 		}
; 3487 : 
; 3488 : 	_Udiff _Get_all_bits()
; 3489 : 		{	// return a random value
; 3490 : 		_Udiff _Ret = 0;
; 3491 : 
; 3492 : 		for (size_t _Num = 0; _Num < CHAR_BIT * sizeof (_Udiff);
; 3493 : 			_Num += _Bits)
; 3494 : 			{	// don't mask away any bits
; 3495 : 			_Ret <<= _Bits;
; 3496 : 			_Ret |= _Get_bits();
; 3497 : 			}
; 3498 : 
; 3499 : 		return (_Ret);
; 3500 : 		}
; 3501 : 
; 3502 : private:
; 3503 : 	_Udiff _Get_bits()
; 3504 : 		{	// return a random value within [0, _Bmask]
; 3505 : 		for (; ; )
; 3506 : 			{	// repeat until random value is in range
; 3507 : 			_Udiff _Val = _Ref() - (_Urng::min)();

  00022	48 8b cb	 mov	 rcx, rbx
  00025	e8 00 00 00 00	 call	 ??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator()

; 3508 : 
; 3509 : 			if (_Val <= _Bmask)

  0002a	3b c6		 cmp	 eax, esi
  0002c	77 f4		 ja	 SHORT $LL56@getUint

; 3473 : 			while (_Mask < _Udiff(_Index - 1))

  0002e	0b f8		 or	 edi, eax
  00030	83 fe 20	 cmp	 esi, 32			; 00000020H
  00033	72 eb		 jb	 SHORT $LL49@getUint

; 3476 : 				_Ret |= _Get_bits();
; 3477 : 				_Mask <<= _Bits;
; 3478 : 				_Mask |= _Bmask;
; 3479 : 				}
; 3480 : 
; 3481 : 			// _Ret is [0, _Mask],  _Index - 1 <= _Mask, return if unbiased
; 3482 : 			if (_Ret / _Index < _Mask / _Index
; 3483 : 				|| _Mask % _Index == _Udiff(_Index - 1))

  00035	b8 e1 83 0f 3e	 mov	 eax, 1041204193		; 3e0f83e1H
  0003a	44 8b ce	 mov	 r9d, esi
  0003d	f7 e6		 mul	 esi
  0003f	b8 e1 83 0f 3e	 mov	 eax, 1041204193		; 3e0f83e1H
  00044	44 8b c2	 mov	 r8d, edx
  00047	f7 e7		 mul	 edi
  00049	41 c1 e8 03	 shr	 r8d, 3
  0004d	41 8b c8	 mov	 ecx, r8d
  00050	c1 ea 03	 shr	 edx, 3
  00053	6b c9 21	 imul	 ecx, 33			; 00000021H
  00056	44 2b c9	 sub	 r9d, ecx
  00059	41 3b d0	 cmp	 edx, r8d
  0005c	72 06		 jb	 SHORT $LN75@getUint
  0005e	41 83 f9 20	 cmp	 r9d, 32			; 00000020H
  00062	75 bc		 jne	 SHORT $LL49@getUint
$LN75@getUint:
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp

; 13   : }

  00064	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00069	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  0006e	48 8b 74 24 48	 mov	 rsi, QWORD PTR [rsp+72]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3484 : 				return (_Ret % _Index);

  00073	b8 e1 83 0f 3e	 mov	 eax, 1041204193		; 3e0f83e1H
  00078	f7 e7		 mul	 edi
  0007a	c1 ea 03	 shr	 edx, 3
  0007d	6b d2 21	 imul	 edx, 33			; 00000021H
  00080	2b fa		 sub	 edi, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random

; 2673 : 		return (_Ty(_Adjust(_Uret + _Umin)));

  00082	8d 47 10	 lea	 eax, DWORD PTR [rdi+16]
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp

; 13   : }

  00085	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00089	5f		 pop	 rdi
  0008a	c3		 ret	 0
?getUint@Random@@QEAAIII@Z ENDP				; Random::getUint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp
;	COMDAT ?getFloat@Random@@QEAAMMM@Z
_TEXT	SEGMENT
this$ = 80
min$ = 88
max$ = 96
?getFloat@Random@@QEAAMMM@Z PROC			; Random::getFloat, COMDAT

; 21   : {

$LN22:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00004	0f 29 74 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm6

; 22   : 	std::uniform_real_distribution<float> distribution(min, max);
; 23   : 	return distribution(randomEngine);

  00009	48 83 c1 04	 add	 rcx, 4
  0000d	0f 29 7c 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm7
  00012	0f 28 f9	 movaps	 xmm7, xmm1
  00015	0f 28 f2	 movaps	 xmm6, xmm2
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random

; 52   : 		/ ((_Rty)(_Eng.max)() - (_Rty)_Emin + _Inc));

  00018	e8 00 00 00 00	 call	 ??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator()
  0001d	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __real@4f800000
  00025	0f 57 c0	 xorps	 xmm0, xmm0

; 3600 : 		return (_NRAND(_Eng, _Ty) * (_Par0._Max - _Par0._Min) + _Par0._Min);

  00028	f3 0f 5c f7	 subss	 xmm6, xmm7
  0002c	0f 57 db	 xorps	 xmm3, xmm3

; 52   : 		/ ((_Rty)(_Eng.max)() - (_Rty)_Emin + _Inc));

  0002f	8b c0		 mov	 eax, eax
  00031	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  00036	f3 0f 5c e3	 subss	 xmm4, xmm3
  0003a	f3 0f 58 25 00
	00 00 00	 addss	 xmm4, DWORD PTR __real@3f800000
  00042	f3 0f 5e c4	 divss	 xmm0, xmm4

; 3600 : 		return (_NRAND(_Eng, _Ty) * (_Par0._Max - _Par0._Min) + _Par0._Min);

  00046	f3 0f 59 c6	 mulss	 xmm0, xmm6
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp

; 24   : }

  0004a	0f 28 74 24 30	 movaps	 xmm6, XMMWORD PTR [rsp+48]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random

; 3600 : 		return (_NRAND(_Eng, _Ty) * (_Par0._Max - _Par0._Min) + _Par0._Min);

  0004f	f3 0f 58 c7	 addss	 xmm0, xmm7
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp

; 24   : }

  00053	0f 28 7c 24 20	 movaps	 xmm7, XMMWORD PTR [rsp+32]
  00058	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005c	c3		 ret	 0
?getFloat@Random@@QEAAMMM@Z ENDP			; Random::getFloat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\globalutil.cpp
;	COMDAT ?getUint@Random@@QEAAIXZ
_TEXT	SEGMENT
this$ = 8
?getUint@Random@@QEAAIXZ PROC				; Random::getUint, COMDAT

; 17   : 	return randomEngine();

  00000	48 83 c1 04	 add	 rcx, 4
  00004	e9 00 00 00 00	 jmp	 ??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator()
?getUint@Random@@QEAAIXZ ENDP				; Random::getUint
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 8
_X0$dead$ = 16
??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAA@I@Z PROC ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>, COMDAT

; 1313 : 		seed(_X0, _Fxarg);
; 1314 : 		}
; 1315 : 
; 1316 : 	mersenne_twister(const mersenne_twister& _Right)
; 1317 : 		{	// construct by copying
; 1318 : 		*this = _Right;
; 1319 : 		}
; 1320 : 
; 1321 : 	mersenne_twister(mersenne_twister& _Right)
; 1322 : 		{	// construct by copying
; 1323 : 		*this = _Right;
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Gen>
; 1327 : 		explicit mersenne_twister(_Gen& _Gx)
; 1328 : 		: _Dxval(_WMSK)
; 1329 : 		{	// construct with seed values from generator
; 1330 : 		seed(_Gx);
; 1331 : 		}
; 1332 : 
; 1333 : 	void seed(unsigned long _X0 = default_seed,
; 1334 : 		_Ty _Fx = (_Ty)1812433253)
; 1335 : 		{	// set initial values from specified value
; 1336 : 		_RNG_ASSERT(0 < _X0,
; 1337 : 			"invalid argument for mersenne_twister::seed");
; 1338 : 
; 1339 : 		_Ty _Prev = this->_Ax[0] = _X0 & _WMSK;

  00000	b8 71 15 00 00	 mov	 eax, 5489		; 00001571H

; 1312 : 		{	// construct with specified seed

  00005	c7 81 84 13 00
	00 ff ff ff ff	 mov	 DWORD PTR [rcx+4996], -1 ; ffffffffH

; 1340 : 		for (int _Ix = 1; _Ix < _Nx; ++_Ix)

  0000f	41 b8 01 00 00
	00		 mov	 r8d, 1

; 1312 : 		{	// construct with specified seed

  00015	4c 8d 49 08	 lea	 r9, QWORD PTR [rcx+8]
  00019	41 ba 6f 02 00
	00		 mov	 r10d, 623		; 0000026fH

; 1313 : 		seed(_X0, _Fxarg);
; 1314 : 		}
; 1315 : 
; 1316 : 	mersenne_twister(const mersenne_twister& _Right)
; 1317 : 		{	// construct by copying
; 1318 : 		*this = _Right;
; 1319 : 		}
; 1320 : 
; 1321 : 	mersenne_twister(mersenne_twister& _Right)
; 1322 : 		{	// construct by copying
; 1323 : 		*this = _Right;
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Gen>
; 1327 : 		explicit mersenne_twister(_Gen& _Gx)
; 1328 : 		: _Dxval(_WMSK)
; 1329 : 		{	// construct with seed values from generator
; 1330 : 		seed(_Gx);
; 1331 : 		}
; 1332 : 
; 1333 : 	void seed(unsigned long _X0 = default_seed,
; 1334 : 		_Ty _Fx = (_Ty)1812433253)
; 1335 : 		{	// set initial values from specified value
; 1336 : 		_RNG_ASSERT(0 < _X0,
; 1337 : 			"invalid argument for mersenne_twister::seed");
; 1338 : 
; 1339 : 		_Ty _Prev = this->_Ax[0] = _X0 & _WMSK;

  0001f	89 41 04	 mov	 DWORD PTR [rcx+4], eax
$LL7@mersenne_t:

; 1341 : 			_Prev = this->_Ax[_Ix] =
; 1342 : 				(_Ix + _Fx * (_Prev ^ (_Prev >> (_Wx - 2)))) & _WMSK;

  00022	8b d0		 mov	 edx, eax
  00024	4d 8d 49 04	 lea	 r9, QWORD PTR [r9+4]
  00028	c1 ea 1e	 shr	 edx, 30
  0002b	33 c2		 xor	 eax, edx
  0002d	69 c0 65 89 07
	6c		 imul	 eax, 1812433253		; 6c078965H
  00033	41 03 c0	 add	 eax, r8d
  00036	41 ff c0	 inc	 r8d
  00039	41 89 41 fc	 mov	 DWORD PTR [r9-4], eax
  0003d	49 ff ca	 dec	 r10
  00040	75 e0		 jne	 SHORT $LL7@mersenne_t

; 1343 : 		this->_Idx = _Nx;

  00042	c7 01 70 02 00
	00		 mov	 DWORD PTR [rcx], 624	; 00000270H

; 1535 : 		}

  00048	48 8b c1	 mov	 rax, rcx
  0004b	c3		 ret	 0
??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAA@I@Z ENDP ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ?seed@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAAXK@Z
_TEXT	SEGMENT
this$ = 8
_X0$ = 16
?seed@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAAXK@Z PROC ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::seed, COMDAT

; 1339 : 		_Ty _Prev = this->_Ax[0] = _X0 & _WMSK;

  00000	89 51 04	 mov	 DWORD PTR [rcx+4], edx

; 1340 : 		for (int _Ix = 1; _Ix < _Nx; ++_Ix)

  00003	41 b8 01 00 00
	00		 mov	 r8d, 1
  00009	4c 8d 49 08	 lea	 r9, QWORD PTR [rcx+8]
  0000d	41 ba 6f 02 00
	00		 mov	 r10d, 623		; 0000026fH
$LL5@seed:

; 1341 : 			_Prev = this->_Ax[_Ix] =
; 1342 : 				(_Ix + _Fx * (_Prev ^ (_Prev >> (_Wx - 2)))) & _WMSK;

  00013	8b c2		 mov	 eax, edx
  00015	4d 8d 49 04	 lea	 r9, QWORD PTR [r9+4]
  00019	c1 e8 1e	 shr	 eax, 30
  0001c	33 d0		 xor	 edx, eax
  0001e	69 d2 65 89 07
	6c		 imul	 edx, 1812433253		; 6c078965H
  00024	41 03 d0	 add	 edx, r8d
  00027	41 ff c0	 inc	 r8d
  0002a	41 89 51 fc	 mov	 DWORD PTR [r9-4], edx
  0002e	49 ff ca	 dec	 r10
  00031	75 e0		 jne	 SHORT $LL5@seed

; 1343 : 		this->_Idx = _Nx;

  00033	c7 01 70 02 00
	00		 mov	 DWORD PTR [rcx], 624	; 00000270H

; 1559 : 		_Mybase::seed(_X0, _Fx);
; 1560 : 		}

  00039	c3		 ret	 0
?seed@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAAXK@Z ENDP ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::seed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ
_TEXT	SEGMENT
this$ = 48
??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ PROC ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator(), COMDAT

; 1375 : 		{	// return next value

$LN15:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 1376 : 		if (this->_Idx == _Nx)

  00006	8b 01		 mov	 eax, DWORD PTR [rcx]
  00008	41 b9 70 02 00
	00		 mov	 r9d, 624		; 00000270H
  0000e	48 8b d9	 mov	 rbx, rcx
  00011	41 3b c1	 cmp	 eax, r9d
  00014	75 45		 jne	 SHORT $LN3@operator

; 1388 : 
; 1389 : 	void discard(unsigned long long _Nskip)
; 1390 : 		{	// discard _Nskip elements
; 1391 : 		for (; 0 < _Nskip; --_Nskip)
; 1392 : 			(*this)();
; 1393 : 		}
; 1394 : 
; 1395 : protected:
; 1396 : 
; 1397 : 	_Post_satisfies_(this->_Idx == 0)
; 1398 : 
; 1399 : 	void _Refill_lower()
; 1400 : 		{	// compute values for the lower half of the history array
; 1401 : 		int _Ix;
; 1402 : 		for (_Ix = 0; _Ix < _Nx - _Mx; ++_Ix)
; 1403 : 			{	// fill in lower region
; 1404 : 			_Ty _Tmp = (this->_Ax[_Ix + _Nx] & _HMSK)
; 1405 : 				| (this->_Ax[_Ix + _Nx + 1] & _LMSK);
; 1406 : 			this->_Ax[_Ix] = (_Tmp >> 1)
; 1407 : 				^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix + _Nx + _Mx];
; 1408 : 			}
; 1409 : 
; 1410 : 		for (; _Ix < _Nx - 1; ++_Ix)
; 1411 : 			{	// fill in upper region (avoids modulus operation)
; 1412 : 			_Ty _Tmp = (this->_Ax[_Ix +_Nx] & _HMSK)
; 1413 : 				| (this->_Ax[_Ix + _Nx + 1] & _LMSK);
; 1414 : 			this->_Ax[_Ix] = (_Tmp >> 1)
; 1415 : 				^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix - _Nx + _Mx];
; 1416 : 			}
; 1417 : 
; 1418 : 		_Ty _Tmp = (this->_Ax[_Ix + _Nx] & _HMSK) | (this->_Ax[0] & _LMSK);
; 1419 : 		this->_Ax[_Ix] = (_Tmp >> 1)
; 1420 : 			^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Mx - 1];
; 1421 : 		this->_Idx = 0;
; 1422 : 		}
; 1423 : 
; 1424 : 	void _Refill_upper()
; 1425 : 		{	// compute values for the upper half of the history array
; 1426 : 		int _Ix;
; 1427 : 		for (_Ix = _Nx; _Ix < 2 * _Nx; ++_Ix)

  00016	4c 8d 41 08	 lea	 r8, QWORD PTR [rcx+8]
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL8@operator:

; 1428 : 			{	// fill in values
; 1429 : 			_Ty _Tmp = (this->_Ax[_Ix - _Nx] & _HMSK)
; 1430 : 				| (this->_Ax[_Ix - _Nx + 1] & _LMSK);

  00020	41 8b 50 fc	 mov	 edx, DWORD PTR [r8-4]
  00024	4d 8d 40 04	 lea	 r8, QWORD PTR [r8+4]
  00028	41 33 50 fc	 xor	 edx, DWORD PTR [r8-4]
  0002c	0f ba f2 1f	 btr	 edx, 31
  00030	41 33 50 f8	 xor	 edx, DWORD PTR [r8-8]

; 1431 : 			this->_Ax[_Ix] = (_Tmp >> 1)
; 1432 : 				^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix - _Nx + _Mx];

  00034	8b c2		 mov	 eax, edx
  00036	24 01		 and	 al, 1
  00038	f6 d8		 neg	 al
  0003a	1b c9		 sbb	 ecx, ecx
  0003c	d1 ea		 shr	 edx, 1
  0003e	81 e1 df b0 08
	99		 and	 ecx, -1727483681	; 9908b0dfH
  00044	41 33 88 2c 06
	00 00		 xor	 ecx, DWORD PTR [r8+1580]
  0004b	33 ca		 xor	 ecx, edx
  0004d	41 89 88 b8 09
	00 00		 mov	 DWORD PTR [r8+2488], ecx
  00054	49 ff c9	 dec	 r9
  00057	75 c7		 jne	 SHORT $LL8@operator

; 1433 : 			}
; 1434 : 		}

  00059	eb 0c		 jmp	 SHORT $LN1@operator
$LN3@operator:

; 1377 : 			_Refill_upper();
; 1378 : 		else if (2 * _Nx <= this->_Idx)

  0005b	3d e0 04 00 00	 cmp	 eax, 1248		; 000004e0H
  00060	72 05		 jb	 SHORT $LN1@operator

; 1379 : 			_Refill_lower();

  00062	e8 00 00 00 00	 call	 ?_Refill_lower@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_lower
$LN1@operator:

; 1380 : 
; 1381 : 		_Ty _Res = this->_Ax[this->_Idx++] & _WMSK;

  00067	8b 03		 mov	 eax, DWORD PTR [rbx]
  00069	8b 54 83 04	 mov	 edx, DWORD PTR [rbx+rax*4+4]
  0006d	ff c0		 inc	 eax
  0006f	89 03		 mov	 DWORD PTR [rbx], eax

; 1382 : 		_Res ^= (_Res >> _Ux) & _Dxval;

  00071	8b 83 84 13 00
	00		 mov	 eax, DWORD PTR [rbx+4996]
  00077	8b ca		 mov	 ecx, edx
  00079	c1 e9 0b	 shr	 ecx, 11
  0007c	23 c1		 and	 eax, ecx
  0007e	33 d0		 xor	 edx, eax

; 1383 : 		_Res ^= (_Res << _Sx) & _Bx;

  00080	8b c2		 mov	 eax, edx
  00082	25 ad 58 3a ff	 and	 eax, -12953427		; ff3a58adH
  00087	c1 e0 07	 shl	 eax, 7
  0008a	33 d0		 xor	 edx, eax

; 1384 : 		_Res ^= (_Res << _Tx) & _Cx;

  0008c	8b c2		 mov	 eax, edx
  0008e	25 8c df ff ff	 and	 eax, -8308		; ffffdf8cH
  00093	c1 e0 0f	 shl	 eax, 15
  00096	33 d0		 xor	 edx, eax

; 1385 : 		_Res ^= (_Res & _WMSK) >> _Lx;

  00098	8b c2		 mov	 eax, edx
  0009a	c1 e8 12	 shr	 eax, 18
  0009d	33 c2		 xor	 eax, edx

; 1386 : 		return (_Res);
; 1387 : 		}

  0009f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a3	5b		 pop	 rbx
  000a4	c3		 ret	 0
??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ ENDP ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ??0?$uniform_int_distribution@I@std@@QEAA@II@Z
_TEXT	SEGMENT
this$ = 8
_Min0$dead$ = 16
_Max0$dead$ = 24
??0?$uniform_int_distribution@I@std@@QEAA@II@Z PROC	; std::uniform_int_distribution<unsigned int>::uniform_int_distribution<unsigned int>, COMDAT

; 2564 : 			_Min = _Min0;

  00000	c7 01 10 00 00
	00		 mov	 DWORD PTR [rcx], 16

; 2565 : 			_Max = _Max0;

  00006	c7 41 04 30 00
	00 00		 mov	 DWORD PTR [rcx+4], 48	; 00000030H

; 2752 : 		}

  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??0?$uniform_int_distribution@I@std@@QEAA@II@Z ENDP	; std::uniform_int_distribution<unsigned int>::uniform_int_distribution<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ??0?$uniform_real_distribution@M@std@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 8
_Min0$ = 16
_Max0$ = 24
??0?$uniform_real_distribution@M@std@@QEAA@MM@Z PROC	; std::uniform_real_distribution<float>::uniform_real_distribution<float>, COMDAT

; 3510 : 			_Min = _Min0;

  00000	f3 0f 11 09	 movss	 DWORD PTR [rcx], xmm1

; 3511 : 			_Max = _Max0;

  00004	f3 0f 11 51 04	 movss	 DWORD PTR [rcx+4], xmm2

; 3658 : 		}

  00009	48 8b c1	 mov	 rax, rcx
  0000c	c3		 ret	 0
??0?$uniform_real_distribution@M@std@@QEAA@MM@Z ENDP	; std::uniform_real_distribution<float>::uniform_real_distribution<float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAA@KII@Z
_TEXT	SEGMENT
this$ = 8
_X0$dead$ = 16
_Dxarg$dead$ = 24
_Fxarg$dead$ = 32
??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAA@KII@Z PROC ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>, COMDAT

; 1315 : 
; 1316 : 	mersenne_twister(const mersenne_twister& _Right)
; 1317 : 		{	// construct by copying
; 1318 : 		*this = _Right;
; 1319 : 		}
; 1320 : 
; 1321 : 	mersenne_twister(mersenne_twister& _Right)
; 1322 : 		{	// construct by copying
; 1323 : 		*this = _Right;
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Gen>
; 1327 : 		explicit mersenne_twister(_Gen& _Gx)
; 1328 : 		: _Dxval(_WMSK)
; 1329 : 		{	// construct with seed values from generator
; 1330 : 		seed(_Gx);
; 1331 : 		}
; 1332 : 
; 1333 : 	void seed(unsigned long _X0 = default_seed,
; 1334 : 		_Ty _Fx = (_Ty)1812433253)
; 1335 : 		{	// set initial values from specified value
; 1336 : 		_RNG_ASSERT(0 < _X0,
; 1337 : 			"invalid argument for mersenne_twister::seed");
; 1338 : 
; 1339 : 		_Ty _Prev = this->_Ax[0] = _X0 & _WMSK;

  00000	ba 71 15 00 00	 mov	 edx, 5489		; 00001571H

; 1312 : 		{	// construct with specified seed

  00005	c7 81 84 13 00
	00 ff ff ff ff	 mov	 DWORD PTR [rcx+4996], -1 ; ffffffffH

; 1340 : 		for (int _Ix = 1; _Ix < _Nx; ++_Ix)

  0000f	41 b8 01 00 00
	00		 mov	 r8d, 1

; 1312 : 		{	// construct with specified seed

  00015	4c 8d 49 08	 lea	 r9, QWORD PTR [rcx+8]
  00019	41 ba 6f 02 00
	00		 mov	 r10d, 623		; 0000026fH

; 1315 : 
; 1316 : 	mersenne_twister(const mersenne_twister& _Right)
; 1317 : 		{	// construct by copying
; 1318 : 		*this = _Right;
; 1319 : 		}
; 1320 : 
; 1321 : 	mersenne_twister(mersenne_twister& _Right)
; 1322 : 		{	// construct by copying
; 1323 : 		*this = _Right;
; 1324 : 		}
; 1325 : 
; 1326 : 	template<class _Gen>
; 1327 : 		explicit mersenne_twister(_Gen& _Gx)
; 1328 : 		: _Dxval(_WMSK)
; 1329 : 		{	// construct with seed values from generator
; 1330 : 		seed(_Gx);
; 1331 : 		}
; 1332 : 
; 1333 : 	void seed(unsigned long _X0 = default_seed,
; 1334 : 		_Ty _Fx = (_Ty)1812433253)
; 1335 : 		{	// set initial values from specified value
; 1336 : 		_RNG_ASSERT(0 < _X0,
; 1337 : 			"invalid argument for mersenne_twister::seed");
; 1338 : 
; 1339 : 		_Ty _Prev = this->_Ax[0] = _X0 & _WMSK;

  0001f	89 51 04	 mov	 DWORD PTR [rcx+4], edx
$LL5@mersenne_t:

; 1341 : 			_Prev = this->_Ax[_Ix] =
; 1342 : 				(_Ix + _Fx * (_Prev ^ (_Prev >> (_Wx - 2)))) & _WMSK;

  00022	8b c2		 mov	 eax, edx
  00024	4d 8d 49 04	 lea	 r9, QWORD PTR [r9+4]
  00028	c1 e8 1e	 shr	 eax, 30
  0002b	33 d0		 xor	 edx, eax
  0002d	69 d2 65 89 07
	6c		 imul	 edx, 1812433253		; 6c078965H
  00033	41 03 d0	 add	 edx, r8d
  00036	41 ff c0	 inc	 r8d
  00039	41 89 51 fc	 mov	 DWORD PTR [r9-4], edx
  0003d	49 ff ca	 dec	 r10
  00040	75 e0		 jne	 SHORT $LL5@mersenne_t

; 1343 : 		this->_Idx = _Nx;

  00042	c7 01 70 02 00
	00		 mov	 DWORD PTR [rcx], 624	; 00000270H

; 1313 : 		seed(_X0, _Fxarg);
; 1314 : 		}

  00048	48 8b c1	 mov	 rax, rcx
  0004b	c3		 ret	 0
??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAA@KII@Z ENDP ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAXKI@Z
_TEXT	SEGMENT
this$ = 8
_X0$ = 16
_Fx$dead$ = 24
?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAXKI@Z PROC ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::seed, COMDAT

; 1336 : 		_RNG_ASSERT(0 < _X0,
; 1337 : 			"invalid argument for mersenne_twister::seed");
; 1338 : 
; 1339 : 		_Ty _Prev = this->_Ax[0] = _X0 & _WMSK;

  00000	89 51 04	 mov	 DWORD PTR [rcx+4], edx

; 1340 : 		for (int _Ix = 1; _Ix < _Nx; ++_Ix)

  00003	41 b8 01 00 00
	00		 mov	 r8d, 1
  00009	4c 8d 49 08	 lea	 r9, QWORD PTR [rcx+8]
  0000d	41 ba 6f 02 00
	00		 mov	 r10d, 623		; 0000026fH
$LL3@seed:

; 1341 : 			_Prev = this->_Ax[_Ix] =
; 1342 : 				(_Ix + _Fx * (_Prev ^ (_Prev >> (_Wx - 2)))) & _WMSK;

  00013	8b c2		 mov	 eax, edx
  00015	4d 8d 49 04	 lea	 r9, QWORD PTR [r9+4]
  00019	c1 e8 1e	 shr	 eax, 30
  0001c	33 d0		 xor	 edx, eax
  0001e	69 d2 65 89 07
	6c		 imul	 edx, 1812433253		; 6c078965H
  00024	41 03 d0	 add	 edx, r8d
  00027	41 ff c0	 inc	 r8d
  0002a	41 89 51 fc	 mov	 DWORD PTR [r9-4], edx
  0002e	49 ff ca	 dec	 r10
  00031	75 e0		 jne	 SHORT $LL3@seed

; 1343 : 		this->_Idx = _Nx;

  00033	c7 01 70 02 00
	00		 mov	 DWORD PTR [rcx], 624	; 00000270H

; 1344 : 		}

  00039	c3		 ret	 0
?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAXKI@Z ENDP ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::seed
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ?_Refill_lower@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ
_TEXT	SEGMENT
this$ = 8
?_Refill_lower@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ PROC ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_lower, COMDAT

; 1400 : 		{	// compute values for the lower half of the history array

  00000	4c 8b d1	 mov	 r10, rcx

; 1401 : 		int _Ix;
; 1402 : 		for (_Ix = 0; _Ix < _Nx - _Mx; ++_Ix)

  00003	4c 8d 89 c4 09
	00 00		 lea	 r9, QWORD PTR [rcx+2500]
  0000a	41 bb e3 00 00
	00		 mov	 r11d, 227		; 000000e3H
$LL6@Refill_low:

; 1403 : 			{	// fill in lower region
; 1404 : 			_Ty _Tmp = (this->_Ax[_Ix + _Nx] & _HMSK)
; 1405 : 				| (this->_Ax[_Ix + _Nx + 1] & _LMSK);

  00010	41 8b 51 04	 mov	 edx, DWORD PTR [r9+4]
  00014	4d 8d 49 04	 lea	 r9, QWORD PTR [r9+4]
  00018	41 33 51 fc	 xor	 edx, DWORD PTR [r9-4]
  0001c	0f ba f2 1f	 btr	 edx, 31
  00020	41 33 51 fc	 xor	 edx, DWORD PTR [r9-4]

; 1406 : 			this->_Ax[_Ix] = (_Tmp >> 1)
; 1407 : 				^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix + _Nx + _Mx];

  00024	8b c2		 mov	 eax, edx
  00026	24 01		 and	 al, 1
  00028	f6 d8		 neg	 al
  0002a	1b c9		 sbb	 ecx, ecx
  0002c	d1 ea		 shr	 edx, 1
  0002e	81 e1 df b0 08
	99		 and	 ecx, -1727483681	; 9908b0dfH
  00034	41 33 89 30 06
	00 00		 xor	 ecx, DWORD PTR [r9+1584]
  0003b	33 ca		 xor	 ecx, edx
  0003d	41 89 89 3c f6
	ff ff		 mov	 DWORD PTR [r9-2500], ecx
  00044	49 ff cb	 dec	 r11
  00047	75 c7		 jne	 SHORT $LL6@Refill_low
  00049	4d 8d 8a 50 0d
	00 00		 lea	 r9, QWORD PTR [r10+3408]
  00050	41 bb 8c 01 00
	00		 mov	 r11d, 396		; 0000018cH
  00056	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL3@Refill_low:

; 1408 : 			}
; 1409 : 
; 1410 : 		for (; _Ix < _Nx - 1; ++_Ix)
; 1411 : 			{	// fill in upper region (avoids modulus operation)
; 1412 : 			_Ty _Tmp = (this->_Ax[_Ix +_Nx] & _HMSK)
; 1413 : 				| (this->_Ax[_Ix + _Nx + 1] & _LMSK);

  00060	41 8b 51 04	 mov	 edx, DWORD PTR [r9+4]
  00064	4d 8d 49 04	 lea	 r9, QWORD PTR [r9+4]
  00068	41 33 51 fc	 xor	 edx, DWORD PTR [r9-4]
  0006c	0f ba f2 1f	 btr	 edx, 31
  00070	41 33 51 fc	 xor	 edx, DWORD PTR [r9-4]

; 1414 : 			this->_Ax[_Ix] = (_Tmp >> 1)
; 1415 : 				^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix - _Nx + _Mx];

  00074	8b c2		 mov	 eax, edx
  00076	24 01		 and	 al, 1
  00078	f6 d8		 neg	 al
  0007a	1b c9		 sbb	 ecx, ecx
  0007c	d1 ea		 shr	 edx, 1
  0007e	81 e1 df b0 08
	99		 and	 ecx, -1727483681	; 9908b0dfH
  00084	41 33 89 b0 f2
	ff ff		 xor	 ecx, DWORD PTR [r9-3408]
  0008b	33 ca		 xor	 ecx, edx
  0008d	41 89 89 3c f6
	ff ff		 mov	 DWORD PTR [r9-2500], ecx
  00094	49 ff cb	 dec	 r11
  00097	75 c7		 jne	 SHORT $LL3@Refill_low

; 1416 : 			}
; 1417 : 
; 1418 : 		_Ty _Tmp = (this->_Ax[_Ix + _Nx] & _HMSK) | (this->_Ax[0] & _LMSK);

  00099	41 8b 92 80 13
	00 00		 mov	 edx, DWORD PTR [r10+4992]
  000a0	41 33 52 04	 xor	 edx, DWORD PTR [r10+4]
  000a4	0f ba f2 1f	 btr	 edx, 31
  000a8	41 33 92 80 13
	00 00		 xor	 edx, DWORD PTR [r10+4992]

; 1419 : 		this->_Ax[_Ix] = (_Tmp >> 1)
; 1420 : 			^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Mx - 1];

  000af	8b c2		 mov	 eax, edx
  000b1	24 01		 and	 al, 1
  000b3	f6 d8		 neg	 al
  000b5	1b c9		 sbb	 ecx, ecx
  000b7	d1 ea		 shr	 edx, 1
  000b9	81 e1 df b0 08
	99		 and	 ecx, -1727483681	; 9908b0dfH
  000bf	41 33 8a 34 06
	00 00		 xor	 ecx, DWORD PTR [r10+1588]
  000c6	33 ca		 xor	 ecx, edx
  000c8	41 89 8a c0 09
	00 00		 mov	 DWORD PTR [r10+2496], ecx

; 1421 : 		this->_Idx = 0;

  000cf	45 89 1a	 mov	 DWORD PTR [r10], r11d

; 1422 : 		}

  000d2	c3		 ret	 0
?_Refill_lower@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ ENDP ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_lower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ?_Refill_upper@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ
_TEXT	SEGMENT
this$ = 8
?_Refill_upper@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ PROC ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_upper, COMDAT

; 1426 : 		int _Ix;
; 1427 : 		for (_Ix = _Nx; _Ix < 2 * _Nx; ++_Ix)

  00000	48 8d 41 08	 lea	 rax, QWORD PTR [rcx+8]
  00004	41 b9 70 02 00
	00		 mov	 r9d, 624		; 00000270H
  0000a	66 0f 1f 44 00
	00		 npad	 6
$LL3@Refill_upp:

; 1428 : 			{	// fill in values
; 1429 : 			_Ty _Tmp = (this->_Ax[_Ix - _Nx] & _HMSK)
; 1430 : 				| (this->_Ax[_Ix - _Nx + 1] & _LMSK);

  00010	44 8b 40 fc	 mov	 r8d, DWORD PTR [rax-4]
  00014	48 8d 40 04	 lea	 rax, QWORD PTR [rax+4]
  00018	44 33 40 fc	 xor	 r8d, DWORD PTR [rax-4]
  0001c	41 0f ba f0 1f	 btr	 r8d, 31
  00021	44 33 40 f8	 xor	 r8d, DWORD PTR [rax-8]

; 1431 : 			this->_Ax[_Ix] = (_Tmp >> 1)
; 1432 : 				^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix - _Nx + _Mx];

  00025	41 8b c8	 mov	 ecx, r8d
  00028	80 e1 01	 and	 cl, 1
  0002b	f6 d9		 neg	 cl
  0002d	1b d2		 sbb	 edx, edx
  0002f	41 d1 e8	 shr	 r8d, 1
  00032	81 e2 df b0 08
	99		 and	 edx, -1727483681	; 9908b0dfH
  00038	33 90 2c 06 00
	00		 xor	 edx, DWORD PTR [rax+1580]
  0003e	41 33 d0	 xor	 edx, r8d
  00041	89 90 b8 09 00
	00		 mov	 DWORD PTR [rax+2488], edx
  00047	49 ff c9	 dec	 r9
  0004a	75 c4		 jne	 SHORT $LL3@Refill_upp

; 1433 : 			}
; 1434 : 		}

  0004c	f3 c3		 fatret	 0
?_Refill_upper@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ ENDP ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_upper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ??0?$uniform_int@I@std@@QEAA@II@Z
_TEXT	SEGMENT
this$ = 8
_Min0$dead$ = 16
_Max0$dead$ = 24
??0?$uniform_int@I@std@@QEAA@II@Z PROC			; std::uniform_int<unsigned int>::uniform_int<unsigned int>, COMDAT

; 2564 : 			_Min = _Min0;

  00000	c7 01 10 00 00
	00		 mov	 DWORD PTR [rcx], 16

; 2565 : 			_Max = _Max0;

  00006	c7 41 04 30 00
	00 00		 mov	 DWORD PTR [rcx+4], 48	; 00000030H

; 2576 : 		}

  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??0?$uniform_int@I@std@@QEAA@II@Z ENDP			; std::uniform_int<unsigned int>::uniform_int<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ??0?$uniform_real@M@std@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 8
_Min0$ = 16
_Max0$ = 24
??0?$uniform_real@M@std@@QEAA@MM@Z PROC			; std::uniform_real<float>::uniform_real<float>, COMDAT

; 3510 : 			_Min = _Min0;

  00000	f3 0f 11 09	 movss	 DWORD PTR [rcx], xmm1

; 3511 : 			_Max = _Max0;

  00004	f3 0f 11 51 04	 movss	 DWORD PTR [rcx+4], xmm2

; 3522 : 		}

  00009	48 8b c1	 mov	 rax, rcx
  0000c	c3		 ret	 0
??0?$uniform_real@M@std@@QEAA@MM@Z ENDP			; std::uniform_real<float>::uniform_real<float>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ??0param_type@?$uniform_int@I@std@@QEAA@II@Z
_TEXT	SEGMENT
this$ = 8
_Min0$dead$ = 16
_Max0$dead$ = 24
??0param_type@?$uniform_int@I@std@@QEAA@II@Z PROC	; std::uniform_int<unsigned int>::param_type::param_type, COMDAT

; 2539 : 
; 2540 : 		bool operator==(const param_type& _Right) const
; 2541 : 			{	// test for equality
; 2542 : 			return (_Min == _Right._Min && _Max == _Right._Max);
; 2543 : 			}
; 2544 : 
; 2545 : 		bool operator!=(const param_type& _Right) const
; 2546 : 			{	// test for inequality
; 2547 : 			return (!(*this == _Right));
; 2548 : 			}
; 2549 : 
; 2550 : 		result_type a() const
; 2551 : 			{	// return a value
; 2552 : 			return (_Min);
; 2553 : 			}
; 2554 : 
; 2555 : 		result_type b() const
; 2556 : 			{	// return b value
; 2557 : 			return (_Max);
; 2558 : 			}
; 2559 : 
; 2560 : 		void _Init(_Ty _Min0, _Ty _Max0)
; 2561 : 			{	// set internal state
; 2562 : 			_RNG_ASSERT(_Min0 <= _Max0,
; 2563 : 				"invalid min and max arguments for uniform_int");
; 2564 : 			_Min = _Min0;

  00000	c7 01 10 00 00
	00		 mov	 DWORD PTR [rcx], 16

; 2565 : 			_Max = _Max0;

  00006	c7 41 04 30 00
	00 00		 mov	 DWORD PTR [rcx+4], 48	; 00000030H

; 2536 : 			{	// construct from parameters
; 2537 : 			_Init(_Min0, _Max0);
; 2538 : 			}

  0000d	48 8b c1	 mov	 rax, rcx
  00010	c3		 ret	 0
??0param_type@?$uniform_int@I@std@@QEAA@II@Z ENDP	; std::uniform_int<unsigned int>::param_type::param_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ??0param_type@?$uniform_real@M@std@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 8
_Min0$ = 16
_Max0$ = 24
??0param_type@?$uniform_real@M@std@@QEAA@MM@Z PROC	; std::uniform_real<float>::param_type::param_type, COMDAT

; 3485 : 
; 3486 : 		bool operator==(const param_type& _Right) const
; 3487 : 			{	// test for equality
; 3488 : 			return (_Min == _Right._Min && _Max == _Right._Max);
; 3489 : 			}
; 3490 : 
; 3491 : 		bool operator!=(const param_type& _Right) const
; 3492 : 			{	// test for inequality
; 3493 : 			return (!(*this == _Right));
; 3494 : 			}
; 3495 : 
; 3496 : 		result_type a() const
; 3497 : 			{	// return a value
; 3498 : 			return (_Min);
; 3499 : 			}
; 3500 : 
; 3501 : 		result_type b() const
; 3502 : 			{	// return b value
; 3503 : 			return (_Max);
; 3504 : 			}
; 3505 : 
; 3506 : 		void _Init(_Ty _Min0, _Ty _Max0)
; 3507 : 			{	// set internal state
; 3508 : 			_RNG_ASSERT(_Min0 <= _Max0,
; 3509 : 				"invalid min and max arguments for uniform_real");
; 3510 : 			_Min = _Min0;

  00000	f3 0f 11 09	 movss	 DWORD PTR [rcx], xmm1

; 3511 : 			_Max = _Max0;

  00004	f3 0f 11 51 04	 movss	 DWORD PTR [rcx+4], xmm2

; 3481 : 			_Ty _Max0 = _Ty(1))
; 3482 : 			{	// construct from parameters
; 3483 : 			_Init(_Min0, _Max0);
; 3484 : 			}

  00009	48 8b c1	 mov	 rax, rcx
  0000c	c3		 ret	 0
??0param_type@?$uniform_real@M@std@@QEAA@MM@Z ENDP	; std::uniform_real<float>::param_type::param_type
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ?_Init@param_type@?$uniform_int@I@std@@QEAAXII@Z
_TEXT	SEGMENT
this$ = 8
_Min0$dead$ = 16
_Max0$dead$ = 24
?_Init@param_type@?$uniform_int@I@std@@QEAAXII@Z PROC	; std::uniform_int<unsigned int>::param_type::_Init, COMDAT

; 2562 : 			_RNG_ASSERT(_Min0 <= _Max0,
; 2563 : 				"invalid min and max arguments for uniform_int");
; 2564 : 			_Min = _Min0;

  00000	c7 01 10 00 00
	00		 mov	 DWORD PTR [rcx], 16

; 2565 : 			_Max = _Max0;

  00006	c7 41 04 30 00
	00 00		 mov	 DWORD PTR [rcx+4], 48	; 00000030H

; 2566 : 			}

  0000d	c3		 ret	 0
?_Init@param_type@?$uniform_int@I@std@@QEAAXII@Z ENDP	; std::uniform_int<unsigned int>::param_type::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ?_Init@param_type@?$uniform_real@M@std@@QEAAXMM@Z
_TEXT	SEGMENT
this$ = 8
_Min0$ = 16
_Max0$ = 24
?_Init@param_type@?$uniform_real@M@std@@QEAAXMM@Z PROC	; std::uniform_real<float>::param_type::_Init, COMDAT

; 3508 : 			_RNG_ASSERT(_Min0 <= _Max0,
; 3509 : 				"invalid min and max arguments for uniform_real");
; 3510 : 			_Min = _Min0;

  00000	f3 0f 11 09	 movss	 DWORD PTR [rcx], xmm1

; 3511 : 			_Max = _Max0;

  00004	f3 0f 11 51 04	 movss	 DWORD PTR [rcx+4], xmm2

; 3512 : 			}

  00009	c3		 ret	 0
?_Init@param_type@?$uniform_real@M@std@@QEAAXMM@Z ENDP	; std::uniform_real<float>::param_type::_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_int@I@std@@QEBAIAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Eng$ = 16
??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_int@I@std@@QEBAIAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z PROC ; std::uniform_int<unsigned int>::operator()<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >, COMDAT

; 2619 : 		{	// return next value
; 2620 : 		return (_Eval(_Eng, _Par._Min, _Par._Max));

  00000	44 8b 49 04	 mov	 r9d, DWORD PTR [rcx+4]
  00004	44 8b 01	 mov	 r8d, DWORD PTR [rcx]
  00007	e9 00 00 00 00	 jmp	 ??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_int@I@std@@AEBAIAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@II@Z ; std::uniform_int<unsigned int>::_Eval<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_int@I@std@@QEBAIAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z ENDP ; std::uniform_int<unsigned int>::operator()<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@M@std@@QEBAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Eng$ = 56
??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@M@std@@QEBAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z PROC ; std::uniform_real<float>::operator()<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >, COMDAT

; 3564 : 		result_type operator()(_Engine& _Eng) const

$LN12:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx

; 52   : 		/ ((_Rty)(_Eng.max)() - (_Rty)_Emin + _Inc));

  00009	48 8b ca	 mov	 rcx, rdx
  0000c	e8 00 00 00 00	 call	 ??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator()
  00011	8b c0		 mov	 eax, eax
  00013	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@4f800000
  0001b	0f 57 c0	 xorps	 xmm0, xmm0
  0001e	0f 57 db	 xorps	 xmm3, xmm3
  00021	f3 0f 5c c8	 subss	 xmm1, xmm0

; 3568 : 
; 3569 : 	template<class _Engine>
; 3570 : 		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
; 3571 : 		{	// return next value, given parameter package
; 3572 : 		return (_Eval(_Eng, _Par0));
; 3573 : 		}
; 3574 : 
; 3575 : 	template<class _Elem, class _Traits>
; 3576 : 		basic_istream<_Elem, _Traits>& _Read(
; 3577 : 			basic_istream<_Elem, _Traits>& _Istr)
; 3578 : 		{	// read state from _Istr
; 3579 : 		_Ty _Min0;
; 3580 : 		_Ty _Max0;
; 3581 : 		_In(_Istr, _Min0);
; 3582 : 		_In(_Istr, _Max0);
; 3583 : 		_Par._Init(_Min0, _Max0);
; 3584 : 		return (_Istr);
; 3585 : 		}
; 3586 : 
; 3587 : 	template<class _Elem, class _Traits>
; 3588 : 		basic_ostream<_Elem, _Traits>& _Write(
; 3589 : 			basic_ostream<_Elem, _Traits>& _Ostr) const
; 3590 : 		{	// write state to _Ostr
; 3591 : 		_Out(_Ostr, _Par._Min);
; 3592 : 		_Out(_Ostr, _Par._Max);
; 3593 : 		return (_Ostr);
; 3594 : 		}
; 3595 : 
; 3596 : private:
; 3597 : 	template<class _Engine>
; 3598 : 		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
; 3599 : 		{	// return next value
; 3600 : 		return (_NRAND(_Eng, _Ty) * (_Par0._Max - _Par0._Min) + _Par0._Min);

  00025	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [rbx+4]
  0002a	f3 0f 5c 03	 subss	 xmm0, DWORD PTR [rbx]

; 52   : 		/ ((_Rty)(_Eng.max)() - (_Rty)_Emin + _Inc));

  0002e	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  00036	f3 48 0f 2a d8	 cvtsi2ss xmm3, rax
  0003b	f3 0f 5e d9	 divss	 xmm3, xmm1

; 3568 : 
; 3569 : 	template<class _Engine>
; 3570 : 		result_type operator()(_Engine& _Eng, const param_type& _Par0) const
; 3571 : 		{	// return next value, given parameter package
; 3572 : 		return (_Eval(_Eng, _Par0));
; 3573 : 		}
; 3574 : 
; 3575 : 	template<class _Elem, class _Traits>
; 3576 : 		basic_istream<_Elem, _Traits>& _Read(
; 3577 : 			basic_istream<_Elem, _Traits>& _Istr)
; 3578 : 		{	// read state from _Istr
; 3579 : 		_Ty _Min0;
; 3580 : 		_Ty _Max0;
; 3581 : 		_In(_Istr, _Min0);
; 3582 : 		_In(_Istr, _Max0);
; 3583 : 		_Par._Init(_Min0, _Max0);
; 3584 : 		return (_Istr);
; 3585 : 		}
; 3586 : 
; 3587 : 	template<class _Elem, class _Traits>
; 3588 : 		basic_ostream<_Elem, _Traits>& _Write(
; 3589 : 			basic_ostream<_Elem, _Traits>& _Ostr) const
; 3590 : 		{	// write state to _Ostr
; 3591 : 		_Out(_Ostr, _Par._Min);
; 3592 : 		_Out(_Ostr, _Par._Max);
; 3593 : 		return (_Ostr);
; 3594 : 		}
; 3595 : 
; 3596 : private:
; 3597 : 	template<class _Engine>
; 3598 : 		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const
; 3599 : 		{	// return next value
; 3600 : 		return (_NRAND(_Eng, _Ty) * (_Par0._Max - _Par0._Min) + _Par0._Min);

  0003f	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00043	f3 0f 58 03	 addss	 xmm0, DWORD PTR [rbx]

; 3565 : 		{	// return next value
; 3566 : 		return (_Eval(_Eng, _Par));
; 3567 : 		}

  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5b		 pop	 rbx
  0004c	c3		 ret	 0
??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@M@std@@QEBAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z ENDP ; std::uniform_real<float>::operator()<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_int@I@std@@AEBAIAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@II@Z
_TEXT	SEGMENT
this$dead$ = 48
_Eng$ = 56
_Min$ = 64
_Max$ = 72
??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_int@I@std@@AEBAIAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@II@Z PROC ; std::uniform_int<unsigned int>::_Eval<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >, COMDAT

; 2659 : 		result_type _Eval(_Engine& _Eng, _Ty _Min, _Ty _Max) const

$LN72:
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	41 56		 push	 r14
  00007	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 2660 : 		{	// compute next value in range [_Min, _Max]
; 2661 : 		_Rng_from_urng<_Uty, _Engine> _Rng(_Eng);
; 2662 : 
; 2663 : 		const _Uty _Umin = _Adjust(_Uty(_Min));
; 2664 : 		const _Uty _Umax = _Adjust(_Uty(_Max));
; 2665 : 
; 2666 : 		_Uty _Uret = 0;
; 2667 : 
; 2668 : 		if (_Umax - _Umin == _Uty(-1))

  0000b	45 2b c8	 sub	 r9d, r8d
  0000e	45 8b f0	 mov	 r14d, r8d
  00011	48 8b da	 mov	 rbx, rdx
  00014	41 83 f9 ff	 cmp	 r9d, -1			; ffffffffH
  00018	75 22		 jne	 SHORT $LN2@Eval
  0001a	66 0f 1f 44 00
	00		 npad	 6
$LL29@Eval:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3507 : 			_Udiff _Val = _Ref() - (_Urng::min)();

  00020	48 8b cb	 mov	 rcx, rbx
  00023	e8 00 00 00 00	 call	 ??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator()

; 3508 : 
; 3509 : 			if (_Val <= _Bmask)

  00028	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  0002b	77 f3		 ja	 SHORT $LL29@Eval
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random

; 2673 : 		return (_Ty(_Adjust(_Uret + _Umin)));

  0002d	41 03 c6	 add	 eax, r14d

; 2674 : 		}

  00030	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	41 5e		 pop	 r14
  0003b	c3		 ret	 0
$LN2@Eval:
  0003c	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  00041	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi

; 2669 : 			_Uret = _Rng._Get_all_bits();
; 2670 : 		else
; 2671 : 			_Uret = _Rng(_Umax - _Umin + 1);

  00046	41 8d 69 01	 lea	 ebp, DWORD PTR [r9+1]
  0004a	8d 75 ff	 lea	 esi, DWORD PTR [rbp-1]
  0004d	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
$LL39@Eval:
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3470 : 			_Udiff _Ret = 0;	// random bits

  00052	33 ff		 xor	 edi, edi

; 3471 : 			_Udiff _Mask = 0;	// 2^N - 1, _Ret is within [0, _Mask]

  00054	33 c0		 xor	 eax, eax

; 3472 : 
; 3473 : 			while (_Mask < _Udiff(_Index - 1))

  00056	85 f6		 test	 esi, esi
  00058	74 1e		 je	 SHORT $LN36@Eval
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL37@Eval:

; 3474 : 				{	// need more random bits
; 3475 : 				_Ret <<= _Bits;

  00060	33 ff		 xor	 edi, edi
$LL44@Eval:

; 3507 : 			_Udiff _Val = _Ref() - (_Urng::min)();

  00062	48 8b cb	 mov	 rcx, rbx
  00065	e8 00 00 00 00	 call	 ??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator()

; 3508 : 
; 3509 : 			if (_Val <= _Bmask)

  0006a	83 f8 ff	 cmp	 eax, -1			; ffffffffH
  0006d	77 f3		 ja	 SHORT $LL44@Eval

; 3476 : 				_Ret |= _Get_bits();
; 3477 : 				_Mask <<= _Bits;
; 3478 : 				_Mask |= _Bmask;

  0006f	0b f8		 or	 edi, eax
  00071	83 c8 ff	 or	 eax, -1			; ffffffffH
  00074	3b c6		 cmp	 eax, esi
  00076	72 e8		 jb	 SHORT $LL37@Eval
$LN36@Eval:

; 3479 : 				}
; 3480 : 
; 3481 : 			// _Ret is [0, _Mask],  _Index - 1 <= _Mask, return if unbiased
; 3482 : 			if (_Ret / _Index < _Mask / _Index
; 3483 : 				|| _Mask % _Index == _Udiff(_Index - 1))

  00078	33 d2		 xor	 edx, edx
  0007a	f7 f5		 div	 ebp
  0007c	8b c8		 mov	 ecx, eax
  0007e	44 8b c2	 mov	 r8d, edx
  00081	33 d2		 xor	 edx, edx
  00083	8b c7		 mov	 eax, edi
  00085	f7 f5		 div	 ebp
  00087	3b c1		 cmp	 eax, ecx
  00089	72 05		 jb	 SHORT $LN63@Eval
  0008b	44 3b c6	 cmp	 r8d, esi
  0008e	75 c2		 jne	 SHORT $LL39@Eval
$LN63@Eval:
  00090	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random

; 2674 : 		}

  00095	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3484 : 				return (_Ret % _Index);

  0009a	8b c7		 mov	 eax, edi
  0009c	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
  000a1	33 d2		 xor	 edx, edx
  000a3	f7 f5		 div	 ebp
  000a5	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random

; 2673 : 		return (_Ty(_Adjust(_Uret + _Umin)));

  000aa	42 8d 04 32	 lea	 eax, DWORD PTR [rdx+r14]

; 2674 : 		}

  000ae	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000b2	41 5e		 pop	 r14
  000b4	c3		 ret	 0
??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_int@I@std@@AEBAIAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@II@Z ENDP ; std::uniform_int<unsigned int>::_Eval<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@M@std@@AEBAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@AEBUparam_type@01@@Z
_TEXT	SEGMENT
this$dead$ = 48
_Eng$ = 56
_Par0$ = 64
??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@M@std@@AEBAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@AEBUparam_type@01@@Z PROC ; std::uniform_real<float>::_Eval<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >, COMDAT

; 3598 : 		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const

$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 52   : 		/ ((_Rty)(_Eng.max)() - (_Rty)_Emin + _Inc));

  00006	48 8b ca	 mov	 rcx, rdx

; 3598 : 		result_type _Eval(_Engine& _Eng, const param_type& _Par0) const

  00009	49 8b d8	 mov	 rbx, r8

; 52   : 		/ ((_Rty)(_Eng.max)() - (_Rty)_Emin + _Inc));

  0000c	e8 00 00 00 00	 call	 ??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator()
  00011	8b c0		 mov	 eax, eax
  00013	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR __real@4f800000
  0001b	0f 57 c0	 xorps	 xmm0, xmm0
  0001e	0f 57 db	 xorps	 xmm3, xmm3
  00021	f3 0f 5c c8	 subss	 xmm1, xmm0

; 3599 : 		{	// return next value
; 3600 : 		return (_NRAND(_Eng, _Ty) * (_Par0._Max - _Par0._Min) + _Par0._Min);

  00025	f3 0f 10 43 04	 movss	 xmm0, DWORD PTR [rbx+4]
  0002a	f3 0f 5c 03	 subss	 xmm0, DWORD PTR [rbx]

; 52   : 		/ ((_Rty)(_Eng.max)() - (_Rty)_Emin + _Inc));

  0002e	f3 0f 58 0d 00
	00 00 00	 addss	 xmm1, DWORD PTR __real@3f800000
  00036	f3 48 0f 2a d8	 cvtsi2ss xmm3, rax
  0003b	f3 0f 5e d9	 divss	 xmm3, xmm1

; 3599 : 		{	// return next value
; 3600 : 		return (_NRAND(_Eng, _Ty) * (_Par0._Max - _Par0._Min) + _Par0._Min);

  0003f	f3 0f 59 c3	 mulss	 xmm0, xmm3
  00043	f3 0f 58 03	 addss	 xmm0, DWORD PTR [rbx]

; 3601 : 		}

  00047	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004b	5b		 pop	 rbx
  0004c	c3		 ret	 0
??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@M@std@@AEBAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@AEBUparam_type@01@@Z ENDP ; std::uniform_real<float>::_Eval<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ?min@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ
_TEXT	SEGMENT
?min@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ PROC ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::min, COMDAT

; 1593 : 		{	// return minimum possible generated value
; 1594 : 		return (0);

  00000	33 c0		 xor	 eax, eax

; 1595 : 		}

  00002	c3		 ret	 0
?min@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ ENDP ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ?_Adjust@?$uniform_int@I@std@@CAII@Z
_TEXT	SEGMENT
_Uval$ = 8
?_Adjust@?$uniform_int@I@std@@CAII@Z PROC		; std::uniform_int<unsigned int>::_Adjust, COMDAT

; 2678 : 		return (_Adjust(_Uval, is_signed<_Ty>()));

  00000	8b c1		 mov	 eax, ecx

; 2679 : 		}

  00002	c3		 ret	 0
?_Adjust@?$uniform_int@I@std@@CAII@Z ENDP		; std::uniform_int<unsigned int>::_Adjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??0?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAA@AEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Func$ = 16
??0?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAA@AEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z PROC ; std::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >, COMDAT

; 3461 : 		{	// construct from URNG

  00000	48 89 11	 mov	 QWORD PTR [rcx], rdx
  00003	48 c7 41 08 20
	00 00 00	 mov	 QWORD PTR [rcx+8], 32	; 00000020H
  0000b	c7 41 10 ff ff
	ff ff		 mov	 DWORD PTR [rcx+16], -1	; ffffffffH

; 3462 : 		for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)
; 3463 : 			--_Bits;
; 3464 : 		}

  00012	48 8b c1	 mov	 rax, rcx
  00015	c3		 ret	 0
??0?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAA@AEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z ENDP ; std::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??R?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAAII@Z
_TEXT	SEGMENT
this$ = 48
_Index$ = 56
??R?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAAII@Z PROC ; std::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >::operator(), COMDAT

; 3467 : 		{	// adapt _Urng closed range to [0, _Index)

$LN26:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 6c 24 10	 mov	 QWORD PTR [rsp+16], rbp
  0000a	48 89 74 24 18	 mov	 QWORD PTR [rsp+24], rsi
  0000f	48 89 7c 24 20	 mov	 QWORD PTR [rsp+32], rdi
  00014	41 56		 push	 r14
  00016	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001a	44 8b f2	 mov	 r14d, edx
  0001d	48 8b d9	 mov	 rbx, rcx
  00020	8d 6a ff	 lea	 ebp, DWORD PTR [rdx-1]
$LL6@operator:

; 3468 : 		for (; ; )
; 3469 : 			{	// try a sample random value
; 3470 : 			_Udiff _Ret = 0;	// random bits

  00023	33 f6		 xor	 esi, esi

; 3471 : 			_Udiff _Mask = 0;	// 2^N - 1, _Ret is within [0, _Mask]

  00025	33 ff		 xor	 edi, edi

; 3472 : 
; 3473 : 			while (_Mask < _Udiff(_Index - 1))

  00027	85 ed		 test	 ebp, ebp
  00029	74 27		 je	 SHORT $LN3@operator
  0002b	0f 1f 44 00 00	 npad	 5
$LL4@operator:

; 3474 : 				{	// need more random bits
; 3475 : 				_Ret <<= _Bits;

  00030	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00034	d3 e6		 shl	 esi, cl
$LL11@operator:

; 3487 : 
; 3488 : 	_Udiff _Get_all_bits()
; 3489 : 		{	// return a random value
; 3490 : 		_Udiff _Ret = 0;
; 3491 : 
; 3492 : 		for (size_t _Num = 0; _Num < CHAR_BIT * sizeof (_Udiff);
; 3493 : 			_Num += _Bits)
; 3494 : 			{	// don't mask away any bits
; 3495 : 			_Ret <<= _Bits;
; 3496 : 			_Ret |= _Get_bits();
; 3497 : 			}
; 3498 : 
; 3499 : 		return (_Ret);
; 3500 : 		}
; 3501 : 
; 3502 : private:
; 3503 : 	_Udiff _Get_bits()
; 3504 : 		{	// return a random value within [0, _Bmask]
; 3505 : 		for (; ; )
; 3506 : 			{	// repeat until random value is in range
; 3507 : 			_Udiff _Val = _Ref() - (_Urng::min)();

  00036	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00039	e8 00 00 00 00	 call	 ??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator()

; 3508 : 
; 3509 : 			if (_Val <= _Bmask)

  0003e	3b 43 10	 cmp	 eax, DWORD PTR [rbx+16]
  00041	77 f3		 ja	 SHORT $LL11@operator

; 3476 : 				_Ret |= _Get_bits();

  00043	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00047	0b f0		 or	 esi, eax

; 3477 : 				_Mask <<= _Bits;

  00049	d3 e7		 shl	 edi, cl

; 3478 : 				_Mask |= _Bmask;

  0004b	0b 7b 10	 or	 edi, DWORD PTR [rbx+16]
  0004e	3b fd		 cmp	 edi, ebp
  00050	72 de		 jb	 SHORT $LL4@operator
$LN3@operator:

; 3479 : 				}
; 3480 : 
; 3481 : 			// _Ret is [0, _Mask],  _Index - 1 <= _Mask, return if unbiased
; 3482 : 			if (_Ret / _Index < _Mask / _Index
; 3483 : 				|| _Mask % _Index == _Udiff(_Index - 1))

  00052	33 d2		 xor	 edx, edx
  00054	8b c7		 mov	 eax, edi
  00056	41 f7 f6	 div	 r14d
  00059	8b c8		 mov	 ecx, eax
  0005b	44 8b c2	 mov	 r8d, edx
  0005e	33 d2		 xor	 edx, edx
  00060	8b c6		 mov	 eax, esi
  00062	41 f7 f6	 div	 r14d
  00065	3b c1		 cmp	 eax, ecx
  00067	72 05		 jb	 SHORT $LN21@operator
  00069	44 3b c5	 cmp	 r8d, ebp
  0006c	75 b5		 jne	 SHORT $LL6@operator
$LN21@operator:

; 3484 : 				return (_Ret % _Index);
; 3485 : 			}
; 3486 : 		}

  0006e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00073	48 8b 6c 24 38	 mov	 rbp, QWORD PTR [rsp+56]
  00078	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  0007d	8b c6		 mov	 eax, esi
  0007f	48 8b 74 24 40	 mov	 rsi, QWORD PTR [rsp+64]
  00084	33 d2		 xor	 edx, edx
  00086	41 f7 f6	 div	 r14d
  00089	8b c2		 mov	 eax, edx
  0008b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008f	41 5e		 pop	 r14
  00091	c3		 ret	 0
??R?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAAII@Z ENDP ; std::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Get_all_bits@?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAAIXZ
_TEXT	SEGMENT
this$ = 48
?_Get_all_bits@?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAAIXZ PROC ; std::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >::_Get_all_bits, COMDAT

; 3489 : 		{	// return a random value

$LN20:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 3490 : 		_Udiff _Ret = 0;

  0000f	33 ff		 xor	 edi, edi
  00011	48 8b d9	 mov	 rbx, rcx

; 3491 : 
; 3492 : 		for (size_t _Num = 0; _Num < CHAR_BIT * sizeof (_Udiff);

  00014	8b f7		 mov	 esi, edi
  00016	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL3@Get_all_bi:

; 3493 : 			_Num += _Bits)
; 3494 : 			{	// don't mask away any bits
; 3495 : 			_Ret <<= _Bits;

  00020	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00024	d3 e7		 shl	 edi, cl
$LL8@Get_all_bi:

; 3501 : 
; 3502 : private:
; 3503 : 	_Udiff _Get_bits()
; 3504 : 		{	// return a random value within [0, _Bmask]
; 3505 : 		for (; ; )
; 3506 : 			{	// repeat until random value is in range
; 3507 : 			_Udiff _Val = _Ref() - (_Urng::min)();

  00026	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00029	e8 00 00 00 00	 call	 ??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator()

; 3508 : 
; 3509 : 			if (_Val <= _Bmask)

  0002e	3b 43 10	 cmp	 eax, DWORD PTR [rbx+16]
  00031	77 f3		 ja	 SHORT $LL8@Get_all_bi

; 3496 : 			_Ret |= _Get_bits();

  00033	48 03 73 08	 add	 rsi, QWORD PTR [rbx+8]
  00037	0b f8		 or	 edi, eax
  00039	48 83 fe 20	 cmp	 rsi, 32			; 00000020H
  0003d	72 e1		 jb	 SHORT $LL3@Get_all_bi

; 3497 : 			}
; 3498 : 
; 3499 : 		return (_Ret);
; 3500 : 		}

  0003f	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00044	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00049	8b c7		 mov	 eax, edi
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5f		 pop	 rdi
  00050	c3		 ret	 0
?_Get_all_bits@?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@QEAAIXZ ENDP ; std::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >::_Get_all_bits
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ?max@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ
_TEXT	SEGMENT
?max@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ PROC ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::max, COMDAT

; 1598 : 		{	// return maximum possible generated value
; 1599 : 		return (_Mybase::_WMSK);

  00000	83 c8 ff	 or	 eax, -1			; ffffffffH

; 1600 : 		}

  00003	c3		 ret	 0
?max@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ ENDP ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ?_Adjust@?$uniform_int@I@std@@CAIIU?$integral_constant@_N$0A@@2@@Z
_TEXT	SEGMENT
_Uval$ = 8
__formal$dead$ = 16
?_Adjust@?$uniform_int@I@std@@CAIIU?$integral_constant@_N$0A@@2@@Z PROC ; std::uniform_int<unsigned int>::_Adjust, COMDAT

; 2693 : 		return (_Uval);

  00000	8b c1		 mov	 eax, ecx

; 2694 : 		}

  00002	c3		 ret	 0
?_Adjust@?$uniform_int@I@std@@CAIIU?$integral_constant@_N$0A@@2@@Z ENDP ; std::uniform_int<unsigned int>::_Adjust
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ?_Get_bits@?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@AEAAIXZ
_TEXT	SEGMENT
this$ = 48
?_Get_bits@?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@AEAAIXZ PROC ; std::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >::_Get_bits, COMDAT

; 3504 : 		{	// return a random value within [0, _Bmask]

$LN26:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b f9	 mov	 rdi, rcx
  0000d	0f 1f 00	 npad	 3
$LL3@Get_bits:

; 3505 : 		for (; ; )
; 3506 : 			{	// repeat until random value is in range
; 3507 : 			_Udiff _Val = _Ref() - (_Urng::min)();

  00010	48 8b 1f	 mov	 rbx, QWORD PTR [rdi]
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random

; 1376 : 		if (this->_Idx == _Nx)

  00013	8b 03		 mov	 eax, DWORD PTR [rbx]
  00015	3d 70 02 00 00	 cmp	 eax, 624		; 00000270H
  0001a	75 52		 jne	 SHORT $LN8@Get_bits

; 1386 : 		return (_Res);
; 1387 : 		}
; 1388 : 
; 1389 : 	void discard(unsigned long long _Nskip)
; 1390 : 		{	// discard _Nskip elements
; 1391 : 		for (; 0 < _Nskip; --_Nskip)
; 1392 : 			(*this)();
; 1393 : 		}
; 1394 : 
; 1395 : protected:
; 1396 : 
; 1397 : 	_Post_satisfies_(this->_Idx == 0)
; 1398 : 
; 1399 : 	void _Refill_lower()
; 1400 : 		{	// compute values for the lower half of the history array
; 1401 : 		int _Ix;
; 1402 : 		for (_Ix = 0; _Ix < _Nx - _Mx; ++_Ix)
; 1403 : 			{	// fill in lower region
; 1404 : 			_Ty _Tmp = (this->_Ax[_Ix + _Nx] & _HMSK)
; 1405 : 				| (this->_Ax[_Ix + _Nx + 1] & _LMSK);
; 1406 : 			this->_Ax[_Ix] = (_Tmp >> 1)
; 1407 : 				^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix + _Nx + _Mx];
; 1408 : 			}
; 1409 : 
; 1410 : 		for (; _Ix < _Nx - 1; ++_Ix)
; 1411 : 			{	// fill in upper region (avoids modulus operation)
; 1412 : 			_Ty _Tmp = (this->_Ax[_Ix +_Nx] & _HMSK)
; 1413 : 				| (this->_Ax[_Ix + _Nx + 1] & _LMSK);
; 1414 : 			this->_Ax[_Ix] = (_Tmp >> 1)
; 1415 : 				^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix - _Nx + _Mx];
; 1416 : 			}
; 1417 : 
; 1418 : 		_Ty _Tmp = (this->_Ax[_Ix + _Nx] & _HMSK) | (this->_Ax[0] & _LMSK);
; 1419 : 		this->_Ax[_Ix] = (_Tmp >> 1)
; 1420 : 			^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Mx - 1];
; 1421 : 		this->_Idx = 0;
; 1422 : 		}
; 1423 : 
; 1424 : 	void _Refill_upper()
; 1425 : 		{	// compute values for the upper half of the history array
; 1426 : 		int _Ix;
; 1427 : 		for (_Ix = _Nx; _Ix < 2 * _Nx; ++_Ix)

  0001c	48 8d 43 08	 lea	 rax, QWORD PTR [rbx+8]
  00020	41 b9 70 02 00
	00		 mov	 r9d, 624		; 00000270H
  00026	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL13@Get_bits:

; 1428 : 			{	// fill in values
; 1429 : 			_Ty _Tmp = (this->_Ax[_Ix - _Nx] & _HMSK)
; 1430 : 				| (this->_Ax[_Ix - _Nx + 1] & _LMSK);

  00030	44 8b 40 fc	 mov	 r8d, DWORD PTR [rax-4]
  00034	48 8d 40 04	 lea	 rax, QWORD PTR [rax+4]
  00038	44 33 40 fc	 xor	 r8d, DWORD PTR [rax-4]
  0003c	41 0f ba f0 1f	 btr	 r8d, 31
  00041	44 33 40 f8	 xor	 r8d, DWORD PTR [rax-8]

; 1431 : 			this->_Ax[_Ix] = (_Tmp >> 1)
; 1432 : 				^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix - _Nx + _Mx];

  00045	41 8b c8	 mov	 ecx, r8d
  00048	80 e1 01	 and	 cl, 1
  0004b	f6 d9		 neg	 cl
  0004d	1b d2		 sbb	 edx, edx
  0004f	41 d1 e8	 shr	 r8d, 1
  00052	81 e2 df b0 08
	99		 and	 edx, -1727483681	; 9908b0dfH
  00058	33 90 2c 06 00
	00		 xor	 edx, DWORD PTR [rax+1580]
  0005e	41 33 d0	 xor	 edx, r8d
  00061	89 90 b8 09 00
	00		 mov	 DWORD PTR [rax+2488], edx
  00067	49 ff c9	 dec	 r9
  0006a	75 c4		 jne	 SHORT $LL13@Get_bits

; 1377 : 			_Refill_upper();
; 1378 : 		else if (2 * _Nx <= this->_Idx)

  0006c	eb 0f		 jmp	 SHORT $LN6@Get_bits
$LN8@Get_bits:
  0006e	3d e0 04 00 00	 cmp	 eax, 1248		; 000004e0H
  00073	72 08		 jb	 SHORT $LN6@Get_bits

; 1379 : 			_Refill_lower();

  00075	48 8b cb	 mov	 rcx, rbx
  00078	e8 00 00 00 00	 call	 ?_Refill_lower@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_lower
$LN6@Get_bits:

; 1380 : 
; 1381 : 		_Ty _Res = this->_Ax[this->_Idx++] & _WMSK;

  0007d	8b 03		 mov	 eax, DWORD PTR [rbx]
  0007f	8b 54 83 04	 mov	 edx, DWORD PTR [rbx+rax*4+4]
  00083	ff c0		 inc	 eax
  00085	89 03		 mov	 DWORD PTR [rbx], eax

; 1382 : 		_Res ^= (_Res >> _Ux) & _Dxval;

  00087	8b 83 84 13 00
	00		 mov	 eax, DWORD PTR [rbx+4996]
  0008d	8b ca		 mov	 ecx, edx
  0008f	c1 e9 0b	 shr	 ecx, 11
  00092	23 c1		 and	 eax, ecx
  00094	33 d0		 xor	 edx, eax

; 1383 : 		_Res ^= (_Res << _Sx) & _Bx;

  00096	8b c2		 mov	 eax, edx
  00098	25 ad 58 3a ff	 and	 eax, -12953427		; ff3a58adH
  0009d	c1 e0 07	 shl	 eax, 7
  000a0	33 d0		 xor	 edx, eax

; 1384 : 		_Res ^= (_Res << _Tx) & _Cx;

  000a2	8b c2		 mov	 eax, edx
  000a4	25 8c df ff ff	 and	 eax, -8308		; ffffdf8cH
  000a9	c1 e0 0f	 shl	 eax, 15
  000ac	33 d0		 xor	 edx, eax

; 1385 : 		_Res ^= (_Res & _WMSK) >> _Lx;

  000ae	8b c2		 mov	 eax, edx
  000b0	c1 e8 12	 shr	 eax, 18
  000b3	33 c2		 xor	 eax, edx
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility

; 3509 : 			if (_Val <= _Bmask)

  000b5	3b 47 10	 cmp	 eax, DWORD PTR [rdi+16]
  000b8	0f 87 52 ff ff
	ff		 ja	 $LL3@Get_bits

; 3510 : 				return (_Val);
; 3511 : 			}
; 3512 : 		}

  000be	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c3	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c7	5f		 pop	 rdi
  000c8	c3		 ret	 0
?_Get_bits@?$_Rng_from_urng@IV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@AEAAIXZ ENDP ; std::_Rng_from_urng<unsigned int,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >::_Get_bits
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\random
;	COMDAT ??$_Nrand@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@IM@std@@YAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@0@IM@Z
_TEXT	SEGMENT
_Eng$ = 64
_Emin$ = 72
_Inc$ = 80
??$_Nrand@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@IM@std@@YAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@0@IM@Z PROC ; std::_Nrand<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>,unsigned int,float>, COMDAT

; 50   : 	{	// scale random value to [0, 1), integer engine

$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00006	0f 29 74 24 20	 movaps	 XMMWORD PTR [rsp+32], xmm6
  0000b	8b da		 mov	 ebx, edx
  0000d	0f 28 f2	 movaps	 xmm6, xmm2

; 51   : 	return ((_Eng() - _Emin)
; 52   : 		/ ((_Rty)(_Eng.max)() - (_Rty)_Emin + _Inc));

  00010	e8 00 00 00 00	 call	 ??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator()
  00015	f3 0f 10 1d 00
	00 00 00	 movss	 xmm3, DWORD PTR __real@4f800000
  0001d	0f 57 c0	 xorps	 xmm0, xmm0
  00020	0f 57 c9	 xorps	 xmm1, xmm1
  00023	f3 48 0f 2a cb	 cvtsi2ss xmm1, rbx
  00028	2b c3		 sub	 eax, ebx
  0002a	f3 48 0f 2a c0	 cvtsi2ss xmm0, rax
  0002f	f3 0f 5c d9	 subss	 xmm3, xmm1
  00033	f3 0f 58 de	 addss	 xmm3, xmm6

; 53   : 	}

  00037	0f 28 74 24 20	 movaps	 xmm6, XMMWORD PTR [rsp+32]
  0003c	f3 0f 5e c3	 divss	 xmm0, xmm3
  00040	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00044	5b		 pop	 rbx
  00045	c3		 ret	 0
??$_Nrand@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@IM@std@@YAMAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@0@IM@Z ENDP ; std::_Nrand<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>,unsigned int,float>
_TEXT	ENDS
END
