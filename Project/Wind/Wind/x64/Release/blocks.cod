; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?DN@Relatives@@3PEAVBlockEdge@@EA		; Relatives::DN
PUBLIC	?W@Relatives@@3PEAVBlockFace@@EA		; Relatives::W
PUBLIC	?DS@Relatives@@3PEAVBlockEdge@@EA		; Relatives::DS
PUBLIC	?WDS@Relatives@@3PEAVBlockCorner@@EA		; Relatives::WDS
PUBLIC	?ES@Relatives@@3PEAVBlockEdge@@EA		; Relatives::ES
PUBLIC	?US@Relatives@@3PEAVBlockEdge@@EA		; Relatives::US
PUBLIC	?WUS@Relatives@@3PEAVBlockCorner@@EA		; Relatives::WUS
PUBLIC	?ED@Relatives@@3PEAVBlockEdge@@EA		; Relatives::ED
PUBLIC	?WD@Relatives@@3PEAVBlockEdge@@EA		; Relatives::WD
PUBLIC	?U@Relatives@@3PEAVBlockFace@@EA		; Relatives::U
PUBLIC	?EUS@Relatives@@3PEAVBlockCorner@@EA		; Relatives::EUS
PUBLIC	?UN@Relatives@@3PEAVBlockEdge@@EA		; Relatives::UN
PUBLIC	?WS@Relatives@@3PEAVBlockEdge@@EA		; Relatives::WS
PUBLIC	?N@Relatives@@3PEAVBlockFace@@EA		; Relatives::N
PUBLIC	?EDS@Relatives@@3PEAVBlockCorner@@EA		; Relatives::EDS
PUBLIC	?EUN@Relatives@@3PEAVBlockCorner@@EA		; Relatives::EUN
PUBLIC	?S@Relatives@@3PEAVBlockFace@@EA		; Relatives::S
PUBLIC	?WUN@Relatives@@3PEAVBlockCorner@@EA		; Relatives::WUN
PUBLIC	?WDN@Relatives@@3PEAVBlockCorner@@EA		; Relatives::WDN
PUBLIC	?EN@Relatives@@3PEAVBlockEdge@@EA		; Relatives::EN
PUBLIC	?WN@Relatives@@3PEAVBlockEdge@@EA		; Relatives::WN
PUBLIC	?WU@Relatives@@3PEAVBlockEdge@@EA		; Relatives::WU
PUBLIC	?D@Relatives@@3PEAVBlockFace@@EA		; Relatives::D
PUBLIC	?EDN@Relatives@@3PEAVBlockCorner@@EA		; Relatives::EDN
PUBLIC	?E@Relatives@@3PEAVBlockFace@@EA		; Relatives::E
PUBLIC	?EU@Relatives@@3PEAVBlockEdge@@EA		; Relatives::EU
PUBLIC	??_7BlockAir@@6B@				; BlockAir::`vftable'
PUBLIC	??_R0?AVBlockAir@@@8				; BlockAir `RTTI Type Descriptor'
PUBLIC	??_R4Block@@6B@					; Block::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVBlock@@@8				; Block `RTTI Type Descriptor'
PUBLIC	??_R3BlockFluid@@8				; BlockFluid::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4BlockFluid@@6B@				; BlockFluid::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@Block@@8				; Block::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3Block@@8					; Block::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2BlockAir@@8				; BlockAir::`RTTI Base Class Array'
PUBLIC	??_7Block@@6B@					; Block::`vftable'
PUBLIC	??_7BlockFluid@@6B@				; BlockFluid::`vftable'
PUBLIC	?air@Blocks@@3PEAVBlockAir@@EA			; Blocks::air
PUBLIC	?stone@Blocks@@3PEAVBlock@@EA			; Blocks::stone
PUBLIC	?blockArray@Blocks@@3PAPEAVBlock@@A		; Blocks::blockArray
PUBLIC	?water@Blocks@@3PEAVBlockFluid@@EA		; Blocks::water
PUBLIC	??_R3BlockAir@@8				; BlockAir::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@BlockAir@@8			; BlockAir::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2BlockFluid@@8				; BlockFluid::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@BlockFluid@@8			; BlockFluid::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?num@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::num
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2_KB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?value@?$_GcdX@$00$00@std@@2_JB			; std::_GcdX<1,1>::value
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?value@?$_Abs@$00@std@@2_JB			; std::_Abs<1>::value
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?num@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::num
PUBLIC	?value@?$integral_constant@H$0A@@std@@2HB	; std::integral_constant<int,0>::value
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB		; std::_GcdX<1,10000000>::value
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_Gcd<10000000,10000000>::value
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?value@?$_GcdX@$00$0A@@std@@2_JB		; std::_GcdX<1,0>::value
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?is_steady@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_steady
PUBLIC	?is_monotonic@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_monotonic
PUBLIC	?is_monotonic@system_clock@chrono@std@@2_NB	; std::chrono::system_clock::is_monotonic
PUBLIC	?is_steady@steady_clock@chrono@std@@2_NB	; std::chrono::steady_clock::is_steady
PUBLIC	?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?value@?$_Gcd@$00$00@std@@2_JB			; std::_Gcd<1,1>::value
PUBLIC	?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?value@?$_Abs@$0DLJKMKAA@@std@@2_JB		; std::_Abs<1000000000>::value
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?value@?$_Abs@$0GE@@std@@2_JB			; std::_Abs<100>::value
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?value@?$_GcdX@$0GE@$0A@@std@@2_JB		; std::_GcdX<100,0>::value
PUBLIC	?value@?$_Abs@$0JIJGIA@@std@@2_JB		; std::_Abs<10000000>::value
PUBLIC	?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_GcdX<100,1000000000>::value
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2_KB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?den@?$ratio@$00$0JIJGIA@@std@@2_JB		; std::ratio<1,10000000>::den
PUBLIC	?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB	; std::_GcdX<1000000000,100>::value
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB	; std::_Gcd<100,1000000000>::value
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB	; std::_GcdX<10000000,10000000>::value
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?value@?$integral_constant@_K$0A@@std@@2_KB	; std::integral_constant<unsigned __int64,0>::value
PUBLIC	?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB		; std::_GcdX<10000000,1>::value
PUBLIC	?den@?$ratio@$00$00@std@@2_JB			; std::ratio<1,1>::den
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB		; std::_GcdX<10000000,0>::value
PUBLIC	?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB		; std::_Gcd<1,10000000>::value
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	??_R0?AVBlockFluid@@@8				; BlockFluid `RTTI Type Descriptor'
PUBLIC	??_R4BlockAir@@6B@				; BlockAir::`RTTI Complete Object Locator'
PUBLIC	??_R2Block@@8					; Block::`RTTI Base Class Array'
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	??3@YAXPEAX@Z:PROC				; operator delete
EXTRN	__security_check_cookie:PROC
?DN@Relatives@@3PEAVBlockEdge@@EA DQ 01H DUP (?)	; Relatives::DN
?W@Relatives@@3PEAVBlockFace@@EA DQ 01H DUP (?)		; Relatives::W
?DS@Relatives@@3PEAVBlockEdge@@EA DQ 01H DUP (?)	; Relatives::DS
?WDS@Relatives@@3PEAVBlockCorner@@EA DQ 01H DUP (?)	; Relatives::WDS
?ES@Relatives@@3PEAVBlockEdge@@EA DQ 01H DUP (?)	; Relatives::ES
?US@Relatives@@3PEAVBlockEdge@@EA DQ 01H DUP (?)	; Relatives::US
?WUS@Relatives@@3PEAVBlockCorner@@EA DQ 01H DUP (?)	; Relatives::WUS
?ED@Relatives@@3PEAVBlockEdge@@EA DQ 01H DUP (?)	; Relatives::ED
?WD@Relatives@@3PEAVBlockEdge@@EA DQ 01H DUP (?)	; Relatives::WD
?U@Relatives@@3PEAVBlockFace@@EA DQ 01H DUP (?)		; Relatives::U
?EUS@Relatives@@3PEAVBlockCorner@@EA DQ 01H DUP (?)	; Relatives::EUS
?UN@Relatives@@3PEAVBlockEdge@@EA DQ 01H DUP (?)	; Relatives::UN
?WS@Relatives@@3PEAVBlockEdge@@EA DQ 01H DUP (?)	; Relatives::WS
?N@Relatives@@3PEAVBlockFace@@EA DQ 01H DUP (?)		; Relatives::N
?EDS@Relatives@@3PEAVBlockCorner@@EA DQ 01H DUP (?)	; Relatives::EDS
?EUN@Relatives@@3PEAVBlockCorner@@EA DQ 01H DUP (?)	; Relatives::EUN
?S@Relatives@@3PEAVBlockFace@@EA DQ 01H DUP (?)		; Relatives::S
?WUN@Relatives@@3PEAVBlockCorner@@EA DQ 01H DUP (?)	; Relatives::WUN
?WDN@Relatives@@3PEAVBlockCorner@@EA DQ 01H DUP (?)	; Relatives::WDN
?EN@Relatives@@3PEAVBlockEdge@@EA DQ 01H DUP (?)	; Relatives::EN
?WN@Relatives@@3PEAVBlockEdge@@EA DQ 01H DUP (?)	; Relatives::WN
?WU@Relatives@@3PEAVBlockEdge@@EA DQ 01H DUP (?)	; Relatives::WU
?D@Relatives@@3PEAVBlockFace@@EA DQ 01H DUP (?)		; Relatives::D
?EDN@Relatives@@3PEAVBlockCorner@@EA DQ 01H DUP (?)	; Relatives::EDN
?E@Relatives@@3PEAVBlockFace@@EA DQ 01H DUP (?)		; Relatives::E
?EU@Relatives@@3PEAVBlockEdge@@EA DQ 01H DUP (?)	; Relatives::EU
?air@Blocks@@3PEAVBlockAir@@EA DQ 01H DUP (?)		; Blocks::air
?stone@Blocks@@3PEAVBlock@@EA DQ 01H DUP (?)		; Blocks::stone
?blockArray@Blocks@@3PAPEAVBlock@@A DQ 01000H DUP (?)	; Blocks::blockArray
?water@Blocks@@3PEAVBlockFluid@@EA DQ 01H DUP (?)	; Blocks::water
_BSS	ENDS
;	COMDAT ??_R2Block@@8
rdata$r	SEGMENT
??_R2Block@@8 DD imagerel ??_R1A@?0A@EA@Block@@8	; Block::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R4BlockAir@@6B@
rdata$r	SEGMENT
??_R4BlockAir@@6B@ DD 01H				; BlockAir::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVBlockAir@@@8
	DD	imagerel ??_R3BlockAir@@8
	DD	imagerel ??_R4BlockAir@@6B@
rdata$r	ENDS
;	COMDAT ??_R0?AVBlockFluid@@@8
_DATA	SEGMENT
??_R0?AVBlockFluid@@@8 DQ FLAT:??_7type_info@@6B@	; BlockFluid `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVBlockFluid@@', 00H
_DATA	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_Gcd<1,10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0A@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,0>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::den
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$00@std@@2_JB DQ 0000000000000001H ; std::_GcdX<10000000,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_K$0A@@std@@2_KB
CONST	SEGMENT
?value@?$integral_constant@_K$0A@@std@@2_KB DQ 0000000000000000H ; std::integral_constant<unsigned __int64,0>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_GcdX<10000000,10000000>::value
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_Gcd<100,1000000000>::value
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0DLJKMKAA@$0GE@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<1000000000,100>::value
CONST	ENDS
;	COMDAT ?den@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?den@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::ratio<1,10000000>::den
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2_KB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2_KB DQ 0000000000000001H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0DLJKMKAA@@std@@2_JB DQ 0000000000000064H ; std::_GcdX<100,1000000000>::value
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0JIJGIA@@std@@2_JB DQ 0000000000989680H	; std::_Abs<10000000>::value
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$0GE@$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$0GE@$0A@@std@@2_JB DQ 0000000000000064H	; std::_GcdX<100,0>::value
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0GE@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0GE@@std@@2_JB DQ 0000000000000064H	; std::_Abs<100>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?value@?$_Abs@$0DLJKMKAA@@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$0DLJKMKAA@@std@@2_JB DQ 000000003b9aca00H ; std::_Abs<1000000000>::value
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000064H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G1
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$00$00@std@@2_JB DQ 0000000000000001H	; std::_Gcd<1,1>::value
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB
CONST	SEGMENT
?value@?$_Is_ratio@U?$ratio@$00$0JIJGIA@@std@@@chrono@std@@2_NB DB 01H ; std::chrono::_Is_ratio<std::ratio<1,10000000> >::value
CONST	ENDS
;	COMDAT ?is_steady@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@steady_clock@chrono@std@@2_NB DB 01H		; std::chrono::steady_clock::is_steady
CONST	ENDS
;	COMDAT ?is_monotonic@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@system_clock@chrono@std@@2_NB DB 00H	; std::chrono::system_clock::is_monotonic
CONST	ENDS
;	COMDAT ?is_monotonic@steady_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_monotonic@steady_clock@chrono@std@@2_NB DB 01H	; std::chrono::steady_clock::is_monotonic
CONST	ENDS
;	COMDAT ?is_steady@system_clock@chrono@std@@2_NB
CONST	SEGMENT
?is_steady@system_clock@chrono@std@@2_NB DB 00H		; std::chrono::system_clock::is_steady
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0A@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0A@@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,0>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_Gcd@$0JIJGIA@$0JIJGIA@@std@@2_JB DQ 0000000000989680H ; std::_Gcd<10000000,10000000>::value
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G1@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G1
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$00$0JIJGIA@@std@@U?$ratio@$0JIJGIA@$00@2@@std@@2_JB DQ 0000000000989680H ; std::_Ratio_multiply2<std::ratio<1,10000000>,std::ratio<10000000,1> >::_G2
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::_GcdX<1,10000000>::value
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?value@?$integral_constant@H$0A@@std@@2HB
CONST	SEGMENT
?value@?$integral_constant@H$0A@@std@@2HB DD 00H	; std::integral_constant<int,0>::value
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$0JIJGIA@@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$0JIJGIA@@std@@2_JB DQ 0000000000000001H ; std::ratio<1,10000000>::num
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?value@?$_Abs@$00@std@@2_JB
CONST	SEGMENT
?value@?$_Abs@$00@std@@2_JB DQ 0000000000000001H	; std::_Abs<1>::value
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB
CONST	SEGMENT
?_G2@?$_Ratio_multiply2@U?$ratio@$0GE@$00@std@@U?$ratio@$00$0DLJKMKAA@@2@@std@@2_JB DQ 0000000000000001H ; std::_Ratio_multiply2<std::ratio<100,1>,std::ratio<1,1000000000> >::_G2
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?value@?$_GcdX@$00$00@std@@2_JB
CONST	SEGMENT
?value@?$_GcdX@$00$00@std@@2_JB DQ 0000000000000001H	; std::_GcdX<1,1>::value
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2_KB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2_KB DQ 0000000000000000H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?num@?$ratio@$00$00@std@@2_JB
CONST	SEGMENT
?num@?$ratio@$00$00@std@@2_JB DQ 0000000000000001H	; std::ratio<1,1>::num
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@BlockFluid@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BlockFluid@@8 DD imagerel ??_R0?AVBlockFluid@@@8 ; BlockFluid::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3BlockFluid@@8
rdata$r	ENDS
;	COMDAT ??_R2BlockFluid@@8
rdata$r	SEGMENT
??_R2BlockFluid@@8 DD imagerel ??_R1A@?0A@EA@BlockFluid@@8 ; BlockFluid::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Block@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BlockAir@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BlockAir@@8 DD imagerel ??_R0?AVBlockAir@@@8 ; BlockAir::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3BlockAir@@8
rdata$r	ENDS
;	COMDAT ??_R3BlockAir@@8
rdata$r	SEGMENT
??_R3BlockAir@@8 DD 00H					; BlockAir::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2BlockAir@@8
rdata$r	ENDS
;	COMDAT ??_7BlockFluid@@6B@
CONST	SEGMENT
??_7BlockFluid@@6B@ DQ FLAT:??_R4BlockFluid@@6B@	; BlockFluid::`vftable'
	DQ	FLAT:?solidCube@BlockFluid@@UEAA_NPEAVWorld@@HHH@Z
	DQ	FLAT:?solidFace@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockFace@@@Z
	DQ	FLAT:?solidEdge@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockEdge@@@Z
	DQ	FLAT:?solidCorner@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockCorner@@@Z
CONST	ENDS
;	COMDAT ??_7Block@@6B@
CONST	SEGMENT
??_7Block@@6B@ DQ FLAT:??_R4Block@@6B@			; Block::`vftable'
	DQ	FLAT:?solidCube@Block@@UEAA_NPEAVWorld@@HHH@Z
	DQ	FLAT:?solidFace@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockFace@@@Z
	DQ	FLAT:?solidEdge@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockEdge@@@Z
	DQ	FLAT:?solidCorner@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockCorner@@@Z
CONST	ENDS
;	COMDAT ??_R2BlockAir@@8
rdata$r	SEGMENT
??_R2BlockAir@@8 DD imagerel ??_R1A@?0A@EA@BlockAir@@8	; BlockAir::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Block@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3Block@@8
rdata$r	SEGMENT
??_R3Block@@8 DD 00H					; Block::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2Block@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Block@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Block@@8 DD imagerel ??_R0?AVBlock@@@8	; Block::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Block@@8
rdata$r	ENDS
;	COMDAT ??_R4BlockFluid@@6B@
rdata$r	SEGMENT
??_R4BlockFluid@@6B@ DD 01H				; BlockFluid::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVBlockFluid@@@8
	DD	imagerel ??_R3BlockFluid@@8
	DD	imagerel ??_R4BlockFluid@@6B@
rdata$r	ENDS
;	COMDAT ??_R3BlockFluid@@8
rdata$r	SEGMENT
??_R3BlockFluid@@8 DD 00H				; BlockFluid::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2BlockFluid@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBlock@@@8
_DATA	SEGMENT
??_R0?AVBlock@@@8 DQ FLAT:??_7type_info@@6B@		; Block `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVBlock@@', 00H
_DATA	ENDS
;	COMDAT ??_R4Block@@6B@
rdata$r	SEGMENT
??_R4Block@@6B@ DD 01H					; Block::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVBlock@@@8
	DD	imagerel ??_R3Block@@8
	DD	imagerel ??_R4Block@@6B@
rdata$r	ENDS
;	COMDAT ??_R0?AVBlockAir@@@8
_DATA	SEGMENT
??_R0?AVBlockAir@@@8 DQ FLAT:??_7type_info@@6B@		; BlockAir `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVBlockAir@@', 00H
_DATA	ENDS
;	COMDAT ??_7BlockAir@@6B@
CONST	SEGMENT
??_7BlockAir@@6B@ DQ FLAT:??_R4BlockAir@@6B@		; BlockAir::`vftable'
	DQ	FLAT:?solidCube@BlockAir@@UEAA_NPEAVWorld@@HHH@Z
	DQ	FLAT:?solidFace@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockFace@@@Z
	DQ	FLAT:?solidEdge@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockEdge@@@Z
	DQ	FLAT:?solidCorner@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockCorner@@@Z
CONST	ENDS
PUBLIC	??1BlockFluid@@QEAA@XZ				; BlockFluid::~BlockFluid
PUBLIC	??1BlockAir@@QEAA@XZ				; BlockAir::~BlockAir
PUBLIC	??_GBlockFluid@@QEAAPEAXI@Z			; BlockFluid::`scalar deleting destructor'
PUBLIC	??_GBlock@@QEAAPEAXI@Z				; Block::`scalar deleting destructor'
PUBLIC	??_GBlockAir@@QEAAPEAXI@Z			; BlockAir::`scalar deleting destructor'
PUBLIC	?destroy@Blocks@@YAXXZ				; Blocks::destroy
PUBLIC	?initialize@Blocks@@YAXXZ			; Blocks::initialize
PUBLIC	?solidCube@BlockFluid@@UEAA_NPEAVWorld@@HHH@Z	; BlockFluid::solidCube
PUBLIC	??0BlockFluid@@QEAA@G@Z				; BlockFluid::BlockFluid
PUBLIC	?solidCube@BlockAir@@UEAA_NPEAVWorld@@HHH@Z	; BlockAir::solidCube
PUBLIC	??0BlockAir@@QEAA@G@Z				; BlockAir::BlockAir
PUBLIC	?solidCorner@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockCorner@@@Z ; Block::solidCorner
PUBLIC	?solidEdge@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockEdge@@@Z ; Block::solidEdge
PUBLIC	?solidFace@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockFace@@@Z ; Block::solidFace
PUBLIC	?solidCube@Block@@UEAA_NPEAVWorld@@HHH@Z	; Block::solidCube
PUBLIC	??1Block@@QEAA@XZ				; Block::~Block
PUBLIC	??0Block@@IEAA@GP6A_NPEAVWorld@@HHHPEAV0@PEAVVertexStream@gfxu@@@Z3@Z ; Block::Block
PUBLIC	??0Block@@QEAA@G@Z				; Block::Block
PUBLIC	??0BlockCorner@@QEAA@HHH@Z			; BlockCorner::BlockCorner
PUBLIC	??0BlockEdge@@QEAA@HHH@Z			; BlockEdge::BlockEdge
PUBLIC	??0BlockFace@@QEAA@HHH@Z			; BlockFace::BlockFace
PUBLIC	??0BlockRelative@@IEAA@HHH@Z			; BlockRelative::BlockRelative
PUBLIC	??0_Ignore@std@@QEAA@XZ				; std::_Ignore::_Ignore
PUBLIC	__real@3d800000
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e000000
PUBLIC	__real@3e800000
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f600000
PUBLIC	__real@3f800000
PUBLIC	__real@400921fb54442d18
PUBLIC	__real@40200000
PUBLIC	__real@4066800000000000
PUBLIC	__real@4076800000000000
PUBLIC	__real@41000000
PUBLIC	__real@43000000
PUBLIC	__real@437f0000
PUBLIC	__xmm@000000003f8000000000000000000000
PUBLIC	__xmm@3f800000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_CxxThrowException:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	cos:PROC
EXTRN	floorf:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	sin:PROC
EXTRN	tan:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_Tuple_alloc DB	01H DUP (?)
	ALIGN	4

ignore	DB	01H DUP (?)
	ALIGN	4

allocator_arg DB 01H DUP (?)
	ALIGN	4

piecewise_construct DB 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GBlockFluid@@QEAAPEAXI@Z DD imagerel $LN9
	DD	imagerel $LN9+33
	DD	imagerel $unwind$??_GBlockFluid@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GBlock@@QEAAPEAXI@Z DD imagerel $LN7
	DD	imagerel $LN7+33
	DD	imagerel $unwind$??_GBlock@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GBlockAir@@QEAAPEAXI@Z DD imagerel $LN9
	DD	imagerel $LN9+33
	DD	imagerel $unwind$??_GBlockAir@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?destroy@Blocks@@YAXXZ DD imagerel $LN29
	DD	imagerel $LN29+396
	DD	imagerel $unwind$?destroy@Blocks@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?initialize@Blocks@@YAXXZ DD imagerel $LN212
	DD	imagerel $LN212+1292
	DD	imagerel $unwind$?initialize@Blocks@@YAXXZ
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@3f800000000000000000000000000000
CONST	SEGMENT
__xmm@3f800000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@000000003f8000000000000000000000
CONST	SEGMENT
__xmm@000000003f8000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 080H, '?', 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@4076800000000000
CONST	SEGMENT
__real@4076800000000000 DQ 04076800000000000r	; 360
CONST	ENDS
;	COMDAT __real@4066800000000000
CONST	SEGMENT
__real@4066800000000000 DQ 04066800000000000r	; 180
CONST	ENDS
;	COMDAT __real@40200000
CONST	SEGMENT
__real@40200000 DD 040200000r			; 2.5
CONST	ENDS
;	COMDAT __real@400921fb54442d18
CONST	SEGMENT
__real@400921fb54442d18 DQ 0400921fb54442d18r	; 3.14159
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f600000
CONST	SEGMENT
__real@3f600000 DD 03f600000r			; 0.875
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d800000
CONST	SEGMENT
__real@3d800000 DD 03d800000r			; 0.0625
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?initialize@Blocks@@YAXXZ DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?destroy@Blocks@@YAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GBlockAir@@QEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GBlock@@QEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GBlockFluid@@QEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\tuple
;	COMDAT ??0_Ignore@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0_Ignore@std@@QEAA@XZ PROC				; std::_Ignore::_Ignore, COMDAT

; 121  : 		{	// construct
; 122  : 		}

  00000	48 8b c1	 mov	 rax, rcx
  00003	c3		 ret	 0
??0_Ignore@std@@QEAA@XZ ENDP				; std::_Ignore::_Ignore
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ??0BlockRelative@@IEAA@HHH@Z
_TEXT	SEGMENT
this$ = 8
x$ = 16
y$ = 24
z$ = 32
??0BlockRelative@@IEAA@HHH@Z PROC			; BlockRelative::BlockRelative, COMDAT

; 7    : {

  00000	89 11		 mov	 DWORD PTR [rcx], edx
  00002	44 89 41 04	 mov	 DWORD PTR [rcx+4], r8d
  00006	44 89 49 08	 mov	 DWORD PTR [rcx+8], r9d

; 8    : 
; 9    : }

  0000a	48 8b c1	 mov	 rax, rcx
  0000d	c3		 ret	 0
??0BlockRelative@@IEAA@HHH@Z ENDP			; BlockRelative::BlockRelative
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ??0BlockFace@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 8
x$ = 16
y$ = 24
z$ = 32
??0BlockFace@@QEAA@HHH@Z PROC				; BlockFace::BlockFace, COMDAT

; 7    : {

  00000	89 11		 mov	 DWORD PTR [rcx], edx
  00002	44 89 41 04	 mov	 DWORD PTR [rcx+4], r8d
  00006	44 89 49 08	 mov	 DWORD PTR [rcx+8], r9d

; 14   : 
; 15   : }

  0000a	48 8b c1	 mov	 rax, rcx
  0000d	c3		 ret	 0
??0BlockFace@@QEAA@HHH@Z ENDP				; BlockFace::BlockFace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ??0BlockEdge@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 8
x$ = 16
y$ = 24
z$ = 32
??0BlockEdge@@QEAA@HHH@Z PROC				; BlockEdge::BlockEdge, COMDAT

; 7    : {

  00000	89 11		 mov	 DWORD PTR [rcx], edx
  00002	44 89 41 04	 mov	 DWORD PTR [rcx+4], r8d
  00006	44 89 49 08	 mov	 DWORD PTR [rcx+8], r9d

; 20   : 
; 21   : }

  0000a	48 8b c1	 mov	 rax, rcx
  0000d	c3		 ret	 0
??0BlockEdge@@QEAA@HHH@Z ENDP				; BlockEdge::BlockEdge
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ??0BlockCorner@@QEAA@HHH@Z
_TEXT	SEGMENT
this$ = 8
x$ = 16
y$ = 24
z$ = 32
??0BlockCorner@@QEAA@HHH@Z PROC				; BlockCorner::BlockCorner, COMDAT

; 7    : {

  00000	89 11		 mov	 DWORD PTR [rcx], edx
  00002	44 89 41 04	 mov	 DWORD PTR [rcx+4], r8d
  00006	44 89 49 08	 mov	 DWORD PTR [rcx+8], r9d

; 26   : 
; 27   : }

  0000a	48 8b c1	 mov	 rax, rcx
  0000d	c3		 ret	 0
??0BlockCorner@@QEAA@HHH@Z ENDP				; BlockCorner::BlockCorner
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ??0Block@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 8
id$dead$ = 16
??0Block@@QEAA@G@Z PROC					; Block::Block, COMDAT

; 60   : {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Block@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax
  0000a	b8 01 00 00 00	 mov	 eax, 1
  0000f	66 89 41 08	 mov	 WORD PTR [rcx+8], ax
  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ; BlockRenderers::renderOrdinaryBlock
  0001a	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  0001e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?renderInvisibleBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ; BlockRenderers::renderInvisibleBlock
  00025	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 61   : 	Blocks::blockArray[id] = this;

  00029	48 89 0d 08 00
	00 00		 mov	 QWORD PTR ?blockArray@Blocks@@3PAPEAVBlock@@A+8, rcx

; 62   : }

  00030	48 8b c1	 mov	 rax, rcx
  00033	c3		 ret	 0
??0Block@@QEAA@G@Z ENDP					; Block::Block
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ??0Block@@IEAA@GP6A_NPEAVWorld@@HHHPEAV0@PEAVVertexStream@gfxu@@@Z3@Z
_TEXT	SEGMENT
this$ = 8
id$ = 16
firstPassRenderer$dead$ = 24
secondPassRenderer$ = 32
??0Block@@IEAA@GP6A_NPEAVWorld@@HHHPEAV0@PEAVVertexStream@gfxu@@@Z3@Z PROC ; Block::Block, COMDAT

; 66   : {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Block@@6B@
  00007	66 89 51 08	 mov	 WORD PTR [rcx+8], dx
  0000b	4c 89 49 18	 mov	 QWORD PTR [rcx+24], r9
  0000f	48 89 01	 mov	 QWORD PTR [rcx], rax
  00012	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?renderInvisibleBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ; BlockRenderers::renderInvisibleBlock
  00019	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 67   : 	Blocks::blockArray[id] = this;

  0001d	0f b7 c2	 movzx	 eax, dx
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?blockArray@Blocks@@3PAPEAVBlock@@A ; Blocks::blockArray
  00027	48 89 0c c2	 mov	 QWORD PTR [rdx+rax*8], rcx

; 68   : }

  0002b	48 8b c1	 mov	 rax, rcx
  0002e	c3		 ret	 0
??0Block@@IEAA@GP6A_NPEAVWorld@@HHHPEAV0@PEAVVertexStream@gfxu@@@Z3@Z ENDP ; Block::Block
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ??1Block@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1Block@@QEAA@XZ PROC					; Block::~Block, COMDAT

; 71   : {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Block@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax

; 72   : 
; 73   : }

  0000a	c3		 ret	 0
??1Block@@QEAA@XZ ENDP					; Block::~Block
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ?solidCube@Block@@UEAA_NPEAVWorld@@HHH@Z
_TEXT	SEGMENT
this$ = 8
world$ = 16
x$ = 24
y$ = 32
z$ = 40
?solidCube@Block@@UEAA_NPEAVWorld@@HHH@Z PROC		; Block::solidCube, COMDAT

; 77   : 	return true;

  00000	b0 01		 mov	 al, 1

; 78   : }

  00002	c3		 ret	 0
?solidCube@Block@@UEAA_NPEAVWorld@@HHH@Z ENDP		; Block::solidCube
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ?solidFace@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockFace@@@Z
_TEXT	SEGMENT
this$ = 8
world$ = 16
x$ = 24
y$ = 32
z$ = 40
face$ = 48
?solidFace@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockFace@@@Z PROC ; Block::solidFace, COMDAT

; 82   : 	return solidCube(world, x, y, z);

  00000	4c 8b 11	 mov	 r10, QWORD PTR [rcx]
  00003	49 ff 22	 rex_jmp QWORD PTR [r10]
?solidFace@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockFace@@@Z ENDP ; Block::solidFace
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ?solidEdge@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockEdge@@@Z
_TEXT	SEGMENT
this$ = 8
world$ = 16
x$ = 24
y$ = 32
z$ = 40
face$ = 48
?solidEdge@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockEdge@@@Z PROC ; Block::solidEdge, COMDAT

; 87   : 	return solidCube(world, x, y, z);

  00000	4c 8b 11	 mov	 r10, QWORD PTR [rcx]
  00003	49 ff 22	 rex_jmp QWORD PTR [r10]
?solidEdge@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockEdge@@@Z ENDP ; Block::solidEdge
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ?solidCorner@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockCorner@@@Z
_TEXT	SEGMENT
this$ = 8
world$ = 16
x$ = 24
y$ = 32
z$ = 40
face$ = 48
?solidCorner@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockCorner@@@Z PROC ; Block::solidCorner, COMDAT

; 92   : 	return solidCube(world, x, y, z);

  00000	4c 8b 11	 mov	 r10, QWORD PTR [rcx]
  00003	49 ff 22	 rex_jmp QWORD PTR [r10]
?solidCorner@Block@@UEAA_NPEAVWorld@@HHHPEAVBlockCorner@@@Z ENDP ; Block::solidCorner
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ??0BlockAir@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 8
id$dead$ = 16
??0BlockAir@@QEAA@G@Z PROC				; BlockAir::BlockAir, COMDAT

; 66   : {

  00000	33 c0		 xor	 eax, eax
  00002	66 89 41 08	 mov	 WORD PTR [rcx+8], ax
  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?renderInvisibleBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ; BlockRenderers::renderInvisibleBlock
  0000d	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  00011	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 97   : {

  00015	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7BlockAir@@6B@

; 67   : 	Blocks::blockArray[id] = this;

  0001c	48 89 0d 00 00
	00 00		 mov	 QWORD PTR ?blockArray@Blocks@@3PAPEAVBlock@@A, rcx

; 97   : {

  00023	48 89 01	 mov	 QWORD PTR [rcx], rax

; 98   : 
; 99   : }

  00026	48 8b c1	 mov	 rax, rcx
  00029	c3		 ret	 0
??0BlockAir@@QEAA@G@Z ENDP				; BlockAir::BlockAir
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ?solidCube@BlockAir@@UEAA_NPEAVWorld@@HHH@Z
_TEXT	SEGMENT
this$ = 8
world$ = 16
x$ = 24
y$ = 32
z$ = 40
?solidCube@BlockAir@@UEAA_NPEAVWorld@@HHH@Z PROC	; BlockAir::solidCube, COMDAT

; 103  : 	return false;

  00000	32 c0		 xor	 al, al

; 104  : }

  00002	c3		 ret	 0
?solidCube@BlockAir@@UEAA_NPEAVWorld@@HHH@Z ENDP	; BlockAir::solidCube
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ??0BlockFluid@@QEAA@G@Z
_TEXT	SEGMENT
this$ = 8
id$dead$ = 16
??0BlockFluid@@QEAA@G@Z PROC				; BlockFluid::BlockFluid, COMDAT

; 66   : {

  00000	b8 02 00 00 00	 mov	 eax, 2
  00005	66 89 41 08	 mov	 WORD PTR [rcx+8], ax
  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?renderInvisibleBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ; BlockRenderers::renderInvisibleBlock
  00010	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  00014	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ; BlockRenderers::renderFluidBlock
  0001b	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 108  : {

  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7BlockFluid@@6B@

; 67   : 	Blocks::blockArray[id] = this;

  00026	48 89 0d 10 00
	00 00		 mov	 QWORD PTR ?blockArray@Blocks@@3PAPEAVBlock@@A+16, rcx

; 108  : {

  0002d	48 89 01	 mov	 QWORD PTR [rcx], rax

; 109  : 
; 110  : }

  00030	48 8b c1	 mov	 rax, rcx
  00033	c3		 ret	 0
??0BlockFluid@@QEAA@G@Z ENDP				; BlockFluid::BlockFluid
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ?solidCube@BlockFluid@@UEAA_NPEAVWorld@@HHH@Z
_TEXT	SEGMENT
this$ = 8
world$ = 16
x$ = 24
y$ = 32
z$ = 40
?solidCube@BlockFluid@@UEAA_NPEAVWorld@@HHH@Z PROC	; BlockFluid::solidCube, COMDAT

; 114  : 	return false;

  00000	32 c0		 xor	 al, al

; 115  : }

  00002	c3		 ret	 0
?solidCube@BlockFluid@@UEAA_NPEAVWorld@@HHH@Z ENDP	; BlockFluid::solidCube
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ?initialize@Blocks@@YAXXZ
_TEXT	SEGMENT
?initialize@Blocks@@YAXXZ PROC				; Blocks::initialize, COMDAT

; 124  : {

$LN212:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 125  : 	Relatives::E = new BlockFace(-1, 0, 0);

  0000f	b9 0c 00 00 00	 mov	 ecx, 12
  00014	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 7    : {

  00019	33 db		 xor	 ebx, ebx

; 125  : 	Relatives::E = new BlockFace(-1, 0, 0);

  0001b	48 85 c0	 test	 rax, rax
  0001e	74 0c		 je	 SHORT $LN6@initialize

; 7    : {

  00020	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [rax], -1
  00026	48 89 58 04	 mov	 QWORD PTR [rax+4], rbx

; 125  : 	Relatives::E = new BlockFace(-1, 0, 0);

  0002a	eb 03		 jmp	 SHORT $LN7@initialize
$LN6@initialize:
  0002c	48 8b c3	 mov	 rax, rbx
$LN7@initialize:

; 126  : 	Relatives::W = new BlockFace(1, 0, 0);

  0002f	b9 0c 00 00 00	 mov	 ecx, 12
  00034	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?E@Relatives@@3PEAVBlockFace@@EA, rax ; Relatives::E
  0003b	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00040	bf 01 00 00 00	 mov	 edi, 1
  00045	48 85 c0	 test	 rax, rax
  00048	74 08		 je	 SHORT $LN8@initialize

; 7    : {

  0004a	48 89 38	 mov	 QWORD PTR [rax], rdi
  0004d	89 58 08	 mov	 DWORD PTR [rax+8], ebx

; 126  : 	Relatives::W = new BlockFace(1, 0, 0);

  00050	eb 03		 jmp	 SHORT $LN9@initialize
$LN8@initialize:
  00052	48 8b c3	 mov	 rax, rbx
$LN9@initialize:

; 127  : 	Relatives::D = new BlockFace(0, -1, 0);

  00055	b9 0c 00 00 00	 mov	 ecx, 12
  0005a	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?W@Relatives@@3PEAVBlockFace@@EA, rax ; Relatives::W
  00061	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00066	48 85 c0	 test	 rax, rax
  00069	74 0e		 je	 SHORT $LN10@initialize

; 7    : {

  0006b	89 18		 mov	 DWORD PTR [rax], ebx
  0006d	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [rax+4], -1
  00074	89 58 08	 mov	 DWORD PTR [rax+8], ebx

; 127  : 	Relatives::D = new BlockFace(0, -1, 0);

  00077	eb 03		 jmp	 SHORT $LN11@initialize
$LN10@initialize:
  00079	48 8b c3	 mov	 rax, rbx
$LN11@initialize:

; 128  : 	Relatives::U = new BlockFace(0, 1, 0);

  0007c	b9 0c 00 00 00	 mov	 ecx, 12
  00081	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?D@Relatives@@3PEAVBlockFace@@EA, rax ; Relatives::D
  00088	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0008d	48 85 c0	 test	 rax, rax
  00090	74 08		 je	 SHORT $LN12@initialize

; 7    : {

  00092	89 18		 mov	 DWORD PTR [rax], ebx
  00094	48 89 78 04	 mov	 QWORD PTR [rax+4], rdi

; 128  : 	Relatives::U = new BlockFace(0, 1, 0);

  00098	eb 03		 jmp	 SHORT $LN13@initialize
$LN12@initialize:
  0009a	48 8b c3	 mov	 rax, rbx
$LN13@initialize:

; 129  : 	Relatives::S = new BlockFace(0, 0, -1);

  0009d	b9 0c 00 00 00	 mov	 ecx, 12
  000a2	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?U@Relatives@@3PEAVBlockFace@@EA, rax ; Relatives::U
  000a9	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  000ae	48 85 c0	 test	 rax, rax
  000b1	74 10		 je	 SHORT $LN14@initialize

; 7    : {

  000b3	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000ba	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [rax+8], -1

; 129  : 	Relatives::S = new BlockFace(0, 0, -1);

  000c1	eb 03		 jmp	 SHORT $LN15@initialize
$LN14@initialize:
  000c3	48 8b c3	 mov	 rax, rbx
$LN15@initialize:

; 130  : 	Relatives::N = new BlockFace(0, 0, 1);

  000c6	b9 0c 00 00 00	 mov	 ecx, 12
  000cb	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?S@Relatives@@3PEAVBlockFace@@EA, rax ; Relatives::S
  000d2	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  000d7	48 85 c0	 test	 rax, rax
  000da	74 0c		 je	 SHORT $LN16@initialize

; 7    : {

  000dc	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000e3	89 78 08	 mov	 DWORD PTR [rax+8], edi

; 130  : 	Relatives::N = new BlockFace(0, 0, 1);

  000e6	eb 03		 jmp	 SHORT $LN17@initialize
$LN16@initialize:
  000e8	48 8b c3	 mov	 rax, rbx
$LN17@initialize:

; 131  : 
; 132  : 	Relatives::WD = new BlockEdge(-1, -1, 0);

  000eb	b9 0c 00 00 00	 mov	 ecx, 12
  000f0	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?N@Relatives@@3PEAVBlockFace@@EA, rax ; Relatives::N
  000f7	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  000fc	48 85 c0	 test	 rax, rax
  000ff	74 0c		 je	 SHORT $LN18@initialize

; 7    : {

  00101	48 c7 00 ff ff
	ff ff		 mov	 QWORD PTR [rax], -1
  00108	89 58 08	 mov	 DWORD PTR [rax+8], ebx

; 131  : 
; 132  : 	Relatives::WD = new BlockEdge(-1, -1, 0);

  0010b	eb 03		 jmp	 SHORT $LN19@initialize
$LN18@initialize:
  0010d	48 8b c3	 mov	 rax, rbx
$LN19@initialize:

; 133  : 	Relatives::WU = new BlockEdge(-1, 1, 0);

  00110	b9 0c 00 00 00	 mov	 ecx, 12
  00115	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?WD@Relatives@@3PEAVBlockEdge@@EA, rax ; Relatives::WD
  0011c	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00121	48 85 c0	 test	 rax, rax
  00124	74 0c		 je	 SHORT $LN20@initialize

; 7    : {

  00126	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [rax], -1
  0012c	48 89 78 04	 mov	 QWORD PTR [rax+4], rdi

; 133  : 	Relatives::WU = new BlockEdge(-1, 1, 0);

  00130	eb 03		 jmp	 SHORT $LN21@initialize
$LN20@initialize:
  00132	48 8b c3	 mov	 rax, rbx
$LN21@initialize:

; 134  : 	Relatives::WS = new BlockEdge(-1, 0, -1);

  00135	b9 0c 00 00 00	 mov	 ecx, 12
  0013a	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?WU@Relatives@@3PEAVBlockEdge@@EA, rax ; Relatives::WU
  00141	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00146	48 85 c0	 test	 rax, rax
  00149	74 12		 je	 SHORT $LN22@initialize

; 7    : {

  0014b	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [rax], -1
  00151	89 58 04	 mov	 DWORD PTR [rax+4], ebx
  00154	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [rax+8], -1

; 134  : 	Relatives::WS = new BlockEdge(-1, 0, -1);

  0015b	eb 03		 jmp	 SHORT $LN23@initialize
$LN22@initialize:
  0015d	48 8b c3	 mov	 rax, rbx
$LN23@initialize:

; 135  : 	Relatives::WN = new BlockEdge(-1, 0, 1);

  00160	b9 0c 00 00 00	 mov	 ecx, 12
  00165	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?WS@Relatives@@3PEAVBlockEdge@@EA, rax ; Relatives::WS
  0016c	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00171	48 85 c0	 test	 rax, rax
  00174	74 0e		 je	 SHORT $LN24@initialize

; 7    : {

  00176	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [rax], -1
  0017c	89 58 04	 mov	 DWORD PTR [rax+4], ebx
  0017f	89 78 08	 mov	 DWORD PTR [rax+8], edi

; 135  : 	Relatives::WN = new BlockEdge(-1, 0, 1);

  00182	eb 03		 jmp	 SHORT $LN25@initialize
$LN24@initialize:
  00184	48 8b c3	 mov	 rax, rbx
$LN25@initialize:

; 136  : 	Relatives::ED = new BlockEdge(1, -1, 0);

  00187	b9 0c 00 00 00	 mov	 ecx, 12
  0018c	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?WN@Relatives@@3PEAVBlockEdge@@EA, rax ; Relatives::WN
  00193	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00198	48 85 c0	 test	 rax, rax
  0019b	74 0e		 je	 SHORT $LN26@initialize

; 7    : {

  0019d	89 38		 mov	 DWORD PTR [rax], edi
  0019f	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [rax+4], -1
  001a6	89 58 08	 mov	 DWORD PTR [rax+8], ebx

; 136  : 	Relatives::ED = new BlockEdge(1, -1, 0);

  001a9	eb 03		 jmp	 SHORT $LN27@initialize
$LN26@initialize:
  001ab	48 8b c3	 mov	 rax, rbx
$LN27@initialize:

; 137  : 	Relatives::EU = new BlockEdge(1, 1, 0);

  001ae	b9 0c 00 00 00	 mov	 ecx, 12
  001b3	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?ED@Relatives@@3PEAVBlockEdge@@EA, rax ; Relatives::ED
  001ba	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  001bf	48 85 c0	 test	 rax, rax
  001c2	74 08		 je	 SHORT $LN28@initialize

; 7    : {

  001c4	89 38		 mov	 DWORD PTR [rax], edi
  001c6	48 89 78 04	 mov	 QWORD PTR [rax+4], rdi

; 137  : 	Relatives::EU = new BlockEdge(1, 1, 0);

  001ca	eb 03		 jmp	 SHORT $LN29@initialize
$LN28@initialize:
  001cc	48 8b c3	 mov	 rax, rbx
$LN29@initialize:

; 138  : 	Relatives::ES = new BlockEdge(1, 0, -1);

  001cf	b9 0c 00 00 00	 mov	 ecx, 12
  001d4	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?EU@Relatives@@3PEAVBlockEdge@@EA, rax ; Relatives::EU
  001db	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  001e0	48 85 c0	 test	 rax, rax
  001e3	74 0c		 je	 SHORT $LN30@initialize

; 7    : {

  001e5	48 89 38	 mov	 QWORD PTR [rax], rdi
  001e8	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [rax+8], -1

; 138  : 	Relatives::ES = new BlockEdge(1, 0, -1);

  001ef	eb 03		 jmp	 SHORT $LN31@initialize
$LN30@initialize:
  001f1	48 8b c3	 mov	 rax, rbx
$LN31@initialize:

; 139  : 	Relatives::EN = new BlockEdge(1, 0, 1);

  001f4	b9 0c 00 00 00	 mov	 ecx, 12
  001f9	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?ES@Relatives@@3PEAVBlockEdge@@EA, rax ; Relatives::ES
  00200	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00205	48 85 c0	 test	 rax, rax
  00208	74 08		 je	 SHORT $LN32@initialize

; 7    : {

  0020a	48 89 38	 mov	 QWORD PTR [rax], rdi
  0020d	89 78 08	 mov	 DWORD PTR [rax+8], edi

; 139  : 	Relatives::EN = new BlockEdge(1, 0, 1);

  00210	eb 03		 jmp	 SHORT $LN33@initialize
$LN32@initialize:
  00212	48 8b c3	 mov	 rax, rbx
$LN33@initialize:

; 140  : 	Relatives::DS = new BlockEdge(0, -1, -1);

  00215	b9 0c 00 00 00	 mov	 ecx, 12
  0021a	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?EN@Relatives@@3PEAVBlockEdge@@EA, rax ; Relatives::EN
  00221	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00226	48 85 c0	 test	 rax, rax
  00229	74 0c		 je	 SHORT $LN34@initialize

; 7    : {

  0022b	89 18		 mov	 DWORD PTR [rax], ebx
  0022d	48 c7 40 04 ff
	ff ff ff	 mov	 QWORD PTR [rax+4], -1

; 140  : 	Relatives::DS = new BlockEdge(0, -1, -1);

  00235	eb 03		 jmp	 SHORT $LN35@initialize
$LN34@initialize:
  00237	48 8b c3	 mov	 rax, rbx
$LN35@initialize:

; 141  : 	Relatives::DN = new BlockEdge(0, -1, 1);

  0023a	b9 0c 00 00 00	 mov	 ecx, 12
  0023f	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?DS@Relatives@@3PEAVBlockEdge@@EA, rax ; Relatives::DS
  00246	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0024b	48 85 c0	 test	 rax, rax
  0024e	74 0e		 je	 SHORT $LN36@initialize

; 7    : {

  00250	89 18		 mov	 DWORD PTR [rax], ebx
  00252	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [rax+4], -1
  00259	89 78 08	 mov	 DWORD PTR [rax+8], edi

; 141  : 	Relatives::DN = new BlockEdge(0, -1, 1);

  0025c	eb 03		 jmp	 SHORT $LN37@initialize
$LN36@initialize:
  0025e	48 8b c3	 mov	 rax, rbx
$LN37@initialize:

; 142  : 	Relatives::US = new BlockEdge(0, 1, -1);

  00261	b9 0c 00 00 00	 mov	 ecx, 12
  00266	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?DN@Relatives@@3PEAVBlockEdge@@EA, rax ; Relatives::DN
  0026d	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00272	48 85 c0	 test	 rax, rax
  00275	74 0e		 je	 SHORT $LN38@initialize

; 7    : {

  00277	89 18		 mov	 DWORD PTR [rax], ebx
  00279	89 78 04	 mov	 DWORD PTR [rax+4], edi
  0027c	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [rax+8], -1

; 142  : 	Relatives::US = new BlockEdge(0, 1, -1);

  00283	eb 03		 jmp	 SHORT $LN39@initialize
$LN38@initialize:
  00285	48 8b c3	 mov	 rax, rbx
$LN39@initialize:

; 143  : 	Relatives::UN = new BlockEdge(0, 1, 1);

  00288	b9 0c 00 00 00	 mov	 ecx, 12
  0028d	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?US@Relatives@@3PEAVBlockEdge@@EA, rax ; Relatives::US
  00294	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00299	48 85 c0	 test	 rax, rax
  0029c	74 0a		 je	 SHORT $LN40@initialize

; 7    : {

  0029e	89 18		 mov	 DWORD PTR [rax], ebx
  002a0	89 78 04	 mov	 DWORD PTR [rax+4], edi
  002a3	89 78 08	 mov	 DWORD PTR [rax+8], edi

; 143  : 	Relatives::UN = new BlockEdge(0, 1, 1);

  002a6	eb 03		 jmp	 SHORT $LN41@initialize
$LN40@initialize:
  002a8	48 8b c3	 mov	 rax, rbx
$LN41@initialize:

; 144  : 
; 145  : 	Relatives::WDS = new BlockCorner(-1, -1, -1);

  002ab	b9 0c 00 00 00	 mov	 ecx, 12
  002b0	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?UN@Relatives@@3PEAVBlockEdge@@EA, rax ; Relatives::UN
  002b7	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  002bc	48 85 c0	 test	 rax, rax
  002bf	74 10		 je	 SHORT $LN42@initialize

; 7    : {

  002c1	48 c7 00 ff ff
	ff ff		 mov	 QWORD PTR [rax], -1
  002c8	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [rax+8], -1

; 144  : 
; 145  : 	Relatives::WDS = new BlockCorner(-1, -1, -1);

  002cf	eb 03		 jmp	 SHORT $LN43@initialize
$LN42@initialize:
  002d1	48 8b c3	 mov	 rax, rbx
$LN43@initialize:

; 146  : 	Relatives::EDS = new BlockCorner(1, -1, -1);

  002d4	b9 0c 00 00 00	 mov	 ecx, 12
  002d9	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?WDS@Relatives@@3PEAVBlockCorner@@EA, rax ; Relatives::WDS
  002e0	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  002e5	48 85 c0	 test	 rax, rax
  002e8	74 0c		 je	 SHORT $LN44@initialize

; 7    : {

  002ea	89 38		 mov	 DWORD PTR [rax], edi
  002ec	48 c7 40 04 ff
	ff ff ff	 mov	 QWORD PTR [rax+4], -1

; 146  : 	Relatives::EDS = new BlockCorner(1, -1, -1);

  002f4	eb 03		 jmp	 SHORT $LN45@initialize
$LN44@initialize:
  002f6	48 8b c3	 mov	 rax, rbx
$LN45@initialize:

; 147  : 	Relatives::WUS = new BlockCorner(-1, 1, -1);

  002f9	b9 0c 00 00 00	 mov	 ecx, 12
  002fe	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?EDS@Relatives@@3PEAVBlockCorner@@EA, rax ; Relatives::EDS
  00305	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0030a	48 85 c0	 test	 rax, rax
  0030d	74 12		 je	 SHORT $LN46@initialize

; 7    : {

  0030f	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [rax], -1
  00315	89 78 04	 mov	 DWORD PTR [rax+4], edi
  00318	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [rax+8], -1

; 147  : 	Relatives::WUS = new BlockCorner(-1, 1, -1);

  0031f	eb 03		 jmp	 SHORT $LN47@initialize
$LN46@initialize:
  00321	48 8b c3	 mov	 rax, rbx
$LN47@initialize:

; 148  : 	Relatives::EUS = new BlockCorner(1, 1, -1);

  00324	b9 0c 00 00 00	 mov	 ecx, 12
  00329	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?WUS@Relatives@@3PEAVBlockCorner@@EA, rax ; Relatives::WUS
  00330	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00335	48 85 c0	 test	 rax, rax
  00338	74 0e		 je	 SHORT $LN48@initialize

; 7    : {

  0033a	89 38		 mov	 DWORD PTR [rax], edi
  0033c	89 78 04	 mov	 DWORD PTR [rax+4], edi
  0033f	c7 40 08 ff ff
	ff ff		 mov	 DWORD PTR [rax+8], -1

; 148  : 	Relatives::EUS = new BlockCorner(1, 1, -1);

  00346	eb 03		 jmp	 SHORT $LN49@initialize
$LN48@initialize:
  00348	48 8b c3	 mov	 rax, rbx
$LN49@initialize:

; 149  : 	Relatives::WDN = new BlockCorner(-1, -1, 1);

  0034b	b9 0c 00 00 00	 mov	 ecx, 12
  00350	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?EUS@Relatives@@3PEAVBlockCorner@@EA, rax ; Relatives::EUS
  00357	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0035c	48 85 c0	 test	 rax, rax
  0035f	74 0c		 je	 SHORT $LN50@initialize

; 7    : {

  00361	48 c7 00 ff ff
	ff ff		 mov	 QWORD PTR [rax], -1
  00368	89 78 08	 mov	 DWORD PTR [rax+8], edi

; 149  : 	Relatives::WDN = new BlockCorner(-1, -1, 1);

  0036b	eb 03		 jmp	 SHORT $LN51@initialize
$LN50@initialize:
  0036d	48 8b c3	 mov	 rax, rbx
$LN51@initialize:

; 150  : 	Relatives::EDN = new BlockCorner(1, -1, 1);

  00370	b9 0c 00 00 00	 mov	 ecx, 12
  00375	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?WDN@Relatives@@3PEAVBlockCorner@@EA, rax ; Relatives::WDN
  0037c	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00381	48 85 c0	 test	 rax, rax
  00384	74 0e		 je	 SHORT $LN52@initialize

; 7    : {

  00386	89 38		 mov	 DWORD PTR [rax], edi
  00388	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [rax+4], -1
  0038f	89 78 08	 mov	 DWORD PTR [rax+8], edi

; 150  : 	Relatives::EDN = new BlockCorner(1, -1, 1);

  00392	eb 03		 jmp	 SHORT $LN53@initialize
$LN52@initialize:
  00394	48 8b c3	 mov	 rax, rbx
$LN53@initialize:

; 151  : 	Relatives::WUN = new BlockCorner(-1, 1, 1);

  00397	b9 0c 00 00 00	 mov	 ecx, 12
  0039c	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?EDN@Relatives@@3PEAVBlockCorner@@EA, rax ; Relatives::EDN
  003a3	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  003a8	48 85 c0	 test	 rax, rax
  003ab	74 0e		 je	 SHORT $LN54@initialize

; 7    : {

  003ad	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [rax], -1
  003b3	89 78 04	 mov	 DWORD PTR [rax+4], edi
  003b6	89 78 08	 mov	 DWORD PTR [rax+8], edi

; 151  : 	Relatives::WUN = new BlockCorner(-1, 1, 1);

  003b9	eb 03		 jmp	 SHORT $LN55@initialize
$LN54@initialize:
  003bb	48 8b c3	 mov	 rax, rbx
$LN55@initialize:

; 152  : 	Relatives::EUN = new BlockCorner(1, 1, 1);

  003be	b9 0c 00 00 00	 mov	 ecx, 12
  003c3	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?WUN@Relatives@@3PEAVBlockCorner@@EA, rax ; Relatives::WUN
  003ca	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  003cf	48 85 c0	 test	 rax, rax
  003d2	74 0a		 je	 SHORT $LN56@initialize

; 7    : {

  003d4	89 38		 mov	 DWORD PTR [rax], edi
  003d6	89 78 04	 mov	 DWORD PTR [rax+4], edi
  003d9	89 78 08	 mov	 DWORD PTR [rax+8], edi

; 152  : 	Relatives::EUN = new BlockCorner(1, 1, 1);

  003dc	eb 03		 jmp	 SHORT $LN57@initialize
$LN56@initialize:
  003de	48 8b c3	 mov	 rax, rbx
$LN57@initialize:
  003e1	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?EUN@Relatives@@3PEAVBlockCorner@@EA, rax ; Relatives::EUN

; 153  : 
; 154  : 	for(int i = 0; i < 4096; i++)
; 155  : 	{
; 156  : 		blockArray[i] = nullptr;

  003e8	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  003ed	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?blockArray@Blocks@@3PAPEAVBlock@@A ; Blocks::blockArray
  003f4	66 66 66 66 0f
	1f 84 00 00 00
	00 00		 npad	 12
$LL210@initialize:
  00400	48 89 18	 mov	 QWORD PTR [rax], rbx
  00403	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00407	48 89 58 10	 mov	 QWORD PTR [rax+16], rbx
  0040b	48 8d 40 40	 lea	 rax, QWORD PTR [rax+64]
  0040f	48 89 58 d8	 mov	 QWORD PTR [rax-40], rbx
  00413	48 89 58 e0	 mov	 QWORD PTR [rax-32], rbx
  00417	48 89 58 e8	 mov	 QWORD PTR [rax-24], rbx
  0041b	48 89 58 f0	 mov	 QWORD PTR [rax-16], rbx
  0041f	48 89 58 f8	 mov	 QWORD PTR [rax-8], rbx
  00423	48 ff c9	 dec	 rcx
  00426	75 d8		 jne	 SHORT $LL210@initialize

; 157  : 	}
; 158  : 
; 159  : 	air = new BlockAir(0);

  00428	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0042d	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00432	48 8d 35 00 00
	00 00		 lea	 rsi, OFFSET FLAT:?renderInvisibleBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ; BlockRenderers::renderInvisibleBlock
  00439	48 85 c0	 test	 rax, rax
  0043c	74 1f		 je	 SHORT $LN58@initialize

; 68   : }
; 69   : 
; 70   : Block::~Block()
; 71   : {
; 72   : 
; 73   : }
; 74   : 
; 75   : bool Block::solidCube(World* world, int x, int y, int z)
; 76   : {
; 77   : 	return true;
; 78   : }
; 79   : 
; 80   : bool Block::solidFace(World* world, int x, int y, int z, BlockFace* face)
; 81   : {
; 82   : 	return solidCube(world, x, y, z);
; 83   : }
; 84   : 
; 85   : bool Block::solidEdge(World* world, int x, int y, int z, BlockEdge* face)
; 86   : {
; 87   : 	return solidCube(world, x, y, z);
; 88   : }
; 89   : 
; 90   : bool Block::solidCorner(World* world, int x, int y, int z, BlockCorner* face)
; 91   : {
; 92   : 	return solidCube(world, x, y, z);
; 93   : }
; 94   : 
; 95   : BlockAir::BlockAir(unsigned short id)
; 96   : 	: Block(id, &BlockRenderers::renderInvisibleBlock, &BlockRenderers::renderInvisibleBlock)
; 97   : {

  0043e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7BlockAir@@6B@

; 62   : }
; 63   : 
; 64   : Block::Block(unsigned short id, BLOCK_RENDER_FUNC firstPassRenderer, BLOCK_RENDER_FUNC secondPassRenderer)
; 65   : 	: id(id), firstPassRenderer(firstPassRenderer), secondPassRenderer(secondPassRenderer)
; 66   : {

  00445	66 89 58 08	 mov	 WORD PTR [rax+8], bx
  00449	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi
  0044d	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi

; 67   : 	Blocks::blockArray[id] = this;

  00451	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?blockArray@Blocks@@3PAPEAVBlock@@A, rax

; 68   : }
; 69   : 
; 70   : Block::~Block()
; 71   : {
; 72   : 
; 73   : }
; 74   : 
; 75   : bool Block::solidCube(World* world, int x, int y, int z)
; 76   : {
; 77   : 	return true;
; 78   : }
; 79   : 
; 80   : bool Block::solidFace(World* world, int x, int y, int z, BlockFace* face)
; 81   : {
; 82   : 	return solidCube(world, x, y, z);
; 83   : }
; 84   : 
; 85   : bool Block::solidEdge(World* world, int x, int y, int z, BlockEdge* face)
; 86   : {
; 87   : 	return solidCube(world, x, y, z);
; 88   : }
; 89   : 
; 90   : bool Block::solidCorner(World* world, int x, int y, int z, BlockCorner* face)
; 91   : {
; 92   : 	return solidCube(world, x, y, z);
; 93   : }
; 94   : 
; 95   : BlockAir::BlockAir(unsigned short id)
; 96   : 	: Block(id, &BlockRenderers::renderInvisibleBlock, &BlockRenderers::renderInvisibleBlock)
; 97   : {

  00458	48 89 08	 mov	 QWORD PTR [rax], rcx

; 157  : 	}
; 158  : 
; 159  : 	air = new BlockAir(0);

  0045b	eb 03		 jmp	 SHORT $LN59@initialize
$LN58@initialize:
  0045d	48 8b c3	 mov	 rax, rbx
$LN59@initialize:

; 160  : 	stone = new Block(1);

  00460	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00465	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?air@Blocks@@3PEAVBlockAir@@EA, rax ; Blocks::air
  0046c	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00471	48 85 c0	 test	 rax, rax
  00474	74 26		 je	 SHORT $LN60@initialize

; 8    : 
; 9    : }
; 10   : 
; 11   : BlockFace::BlockFace(int x, int y, int z)
; 12   : 	: BlockRelative(x, y, z)
; 13   : {
; 14   : 
; 15   : }
; 16   : 
; 17   : BlockEdge::BlockEdge(int x, int y, int z)
; 18   : 	: BlockRelative(x, y, z)
; 19   : {
; 20   : 
; 21   : }
; 22   : 
; 23   : BlockCorner::BlockCorner(int x, int y, int z)
; 24   : 	: BlockRelative(x, y, z)
; 25   : {
; 26   : 
; 27   : }
; 28   : 
; 29   : BlockFace* Relatives::E;
; 30   : BlockFace* Relatives::W;
; 31   : BlockFace* Relatives::D;
; 32   : BlockFace* Relatives::U;
; 33   : BlockFace* Relatives::S;
; 34   : BlockFace* Relatives::N;
; 35   : 
; 36   : BlockEdge* Relatives::WD;
; 37   : BlockEdge* Relatives::WU;
; 38   : BlockEdge* Relatives::WS;
; 39   : BlockEdge* Relatives::WN;
; 40   : BlockEdge* Relatives::ED;
; 41   : BlockEdge* Relatives::EU;
; 42   : BlockEdge* Relatives::ES;
; 43   : BlockEdge* Relatives::EN;
; 44   : BlockEdge* Relatives::DS;
; 45   : BlockEdge* Relatives::DN;
; 46   : BlockEdge* Relatives::US;
; 47   : BlockEdge* Relatives::UN;
; 48   : 
; 49   : BlockCorner* Relatives::WDS;
; 50   : BlockCorner* Relatives::EDS;
; 51   : BlockCorner* Relatives::WUS;
; 52   : BlockCorner* Relatives::EUS;
; 53   : BlockCorner* Relatives::WDN;
; 54   : BlockCorner* Relatives::EDN;
; 55   : BlockCorner* Relatives::WUN;
; 56   : BlockCorner* Relatives::EUN;
; 57   : 
; 58   : Block::Block(unsigned short id)
; 59   : 	: id(id), firstPassRenderer(&BlockRenderers::renderOrdinaryBlock), secondPassRenderer(&BlockRenderers::renderInvisibleBlock)
; 60   : {

  00476	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Block@@6B@
  0047d	66 89 78 08	 mov	 WORD PTR [rax+8], di
  00481	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  00485	48 89 08	 mov	 QWORD PTR [rax], rcx
  00488	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?renderOrdinaryBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ; BlockRenderers::renderOrdinaryBlock
  0048f	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 61   : 	Blocks::blockArray[id] = this;

  00493	48 89 05 08 00
	00 00		 mov	 QWORD PTR ?blockArray@Blocks@@3PAPEAVBlock@@A+8, rax

; 160  : 	stone = new Block(1);

  0049a	eb 03		 jmp	 SHORT $LN61@initialize
$LN60@initialize:
  0049c	48 8b c3	 mov	 rax, rbx
$LN61@initialize:

; 161  : 	water = new BlockFluid(2);

  0049f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  004a4	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?stone@Blocks@@3PEAVBlock@@EA, rax ; Blocks::stone
  004ab	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  004b0	48 85 c0	 test	 rax, rax
  004b3	74 40		 je	 SHORT $LN62@initialize

; 62   : }
; 63   : 
; 64   : Block::Block(unsigned short id, BLOCK_RENDER_FUNC firstPassRenderer, BLOCK_RENDER_FUNC secondPassRenderer)
; 65   : 	: id(id), firstPassRenderer(firstPassRenderer), secondPassRenderer(secondPassRenderer)
; 66   : {

  004b5	b9 02 00 00 00	 mov	 ecx, 2
  004ba	48 89 70 10	 mov	 QWORD PTR [rax+16], rsi

; 161  : 	water = new BlockFluid(2);

  004be	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?water@Blocks@@3PEAVBlockFluid@@EA, rax ; Blocks::water

; 62   : }
; 63   : 
; 64   : Block::Block(unsigned short id, BLOCK_RENDER_FUNC firstPassRenderer, BLOCK_RENDER_FUNC secondPassRenderer)
; 65   : 	: id(id), firstPassRenderer(firstPassRenderer), secondPassRenderer(secondPassRenderer)
; 66   : {

  004c5	66 89 48 08	 mov	 WORD PTR [rax+8], cx
  004c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?renderFluidBlock@BlockRenderers@@YA_NPEAVWorld@@HHHPEAVBlock@@PEAVVertexStream@gfxu@@@Z ; BlockRenderers::renderFluidBlock
  004d0	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 98   : 
; 99   : }
; 100  : 
; 101  : bool BlockAir::solidCube(World* world, int x, int y, int z)
; 102  : {
; 103  : 	return false;
; 104  : }
; 105  : 
; 106  : BlockFluid::BlockFluid(unsigned short id)
; 107  : 	: Block(id, &BlockRenderers::renderInvisibleBlock, &BlockRenderers::renderFluidBlock)
; 108  : {

  004d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7BlockFluid@@6B@

; 67   : 	Blocks::blockArray[id] = this;

  004db	48 89 05 10 00
	00 00		 mov	 QWORD PTR ?blockArray@Blocks@@3PAPEAVBlock@@A+16, rax

; 98   : 
; 99   : }
; 100  : 
; 101  : bool BlockAir::solidCube(World* world, int x, int y, int z)
; 102  : {
; 103  : 	return false;
; 104  : }
; 105  : 
; 106  : BlockFluid::BlockFluid(unsigned short id)
; 107  : 	: Block(id, &BlockRenderers::renderInvisibleBlock, &BlockRenderers::renderFluidBlock)
; 108  : {

  004e2	48 89 08	 mov	 QWORD PTR [rax], rcx

; 162  : }

  004e5	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  004ea	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  004ef	48 83 c4 20	 add	 rsp, 32			; 00000020H
  004f3	5f		 pop	 rdi
  004f4	c3		 ret	 0
$LN62@initialize:
  004f5	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  004fa	48 89 1d 00 00
	00 00		 mov	 QWORD PTR ?water@Blocks@@3PEAVBlockFluid@@EA, rbx ; Blocks::water
  00501	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00506	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0050a	5f		 pop	 rdi
  0050b	c3		 ret	 0
?initialize@Blocks@@YAXXZ ENDP				; Blocks::initialize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ?destroy@Blocks@@YAXXZ
_TEXT	SEGMENT
?destroy@Blocks@@YAXXZ PROC				; Blocks::destroy, COMDAT

; 165  : {

$LN29:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 166  : 	delete Relatives::E;

  00006	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?E@Relatives@@3PEAVBlockFace@@EA ; Relatives::E
  0000d	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 167  : 	delete Relatives::W;

  00012	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?W@Relatives@@3PEAVBlockFace@@EA ; Relatives::W
  00019	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 168  : 	delete Relatives::D;

  0001e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?D@Relatives@@3PEAVBlockFace@@EA ; Relatives::D
  00025	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 169  : 	delete Relatives::U;

  0002a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?U@Relatives@@3PEAVBlockFace@@EA ; Relatives::U
  00031	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 170  : 	delete Relatives::S;

  00036	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?S@Relatives@@3PEAVBlockFace@@EA ; Relatives::S
  0003d	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 171  : 	delete Relatives::N;

  00042	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?N@Relatives@@3PEAVBlockFace@@EA ; Relatives::N
  00049	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 172  : 
; 173  : 	delete Relatives::WD;

  0004e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WD@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WD
  00055	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 174  : 	delete Relatives::WU;

  0005a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WU@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WU
  00061	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 175  : 	delete Relatives::WS;

  00066	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WS@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WS
  0006d	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 176  : 	delete Relatives::WN;

  00072	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::WN
  00079	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 177  : 	delete Relatives::ED;

  0007e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?ED@Relatives@@3PEAVBlockEdge@@EA ; Relatives::ED
  00085	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 178  : 	delete Relatives::EU;

  0008a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EU@Relatives@@3PEAVBlockEdge@@EA ; Relatives::EU
  00091	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 179  : 	delete Relatives::ES;

  00096	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?ES@Relatives@@3PEAVBlockEdge@@EA ; Relatives::ES
  0009d	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 180  : 	delete Relatives::EN;

  000a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::EN
  000a9	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 181  : 	delete Relatives::DS;

  000ae	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?DS@Relatives@@3PEAVBlockEdge@@EA ; Relatives::DS
  000b5	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 182  : 	delete Relatives::DN;

  000ba	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?DN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::DN
  000c1	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 183  : 	delete Relatives::US;

  000c6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?US@Relatives@@3PEAVBlockEdge@@EA ; Relatives::US
  000cd	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 184  : 	delete Relatives::UN;

  000d2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?UN@Relatives@@3PEAVBlockEdge@@EA ; Relatives::UN
  000d9	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 185  : 
; 186  : 	delete Relatives::WDS;

  000de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WDS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WDS
  000e5	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 187  : 	delete Relatives::EDS;

  000ea	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EDS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EDS
  000f1	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 188  : 	delete Relatives::WUS;

  000f6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WUS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WUS
  000fd	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 189  : 	delete Relatives::EUS;

  00102	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EUS@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EUS
  00109	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 190  : 	delete Relatives::WDN;

  0010e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WDN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WDN
  00115	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 191  : 	delete Relatives::EDN;

  0011a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EDN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EDN
  00121	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 192  : 	delete Relatives::WUN;

  00126	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?WUN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::WUN
  0012d	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 193  : 	delete Relatives::EUN;

  00132	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?EUN@Relatives@@3PEAVBlockCorner@@EA ; Relatives::EUN
  00139	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete

; 194  : 
; 195  : 	delete air;

  0013e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?air@Blocks@@3PEAVBlockAir@@EA ; Blocks::air
  00145	48 8d 1d 00 00
	00 00		 lea	 rbx, OFFSET FLAT:??_7Block@@6B@
  0014c	48 85 c9	 test	 rcx, rcx
  0014f	74 08		 je	 SHORT $LN9@destroy

; 71   : {

  00151	48 89 19	 mov	 QWORD PTR [rcx], rbx
  00154	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN9@destroy:

; 196  : 	delete stone;

  00159	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?stone@Blocks@@3PEAVBlock@@EA ; Blocks::stone
  00160	48 85 c9	 test	 rcx, rcx
  00163	74 08		 je	 SHORT $LN16@destroy

; 71   : {

  00165	48 89 19	 mov	 QWORD PTR [rcx], rbx
  00168	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN16@destroy:

; 197  : 	delete water;

  0016d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?water@Blocks@@3PEAVBlockFluid@@EA ; Blocks::water
  00174	48 85 c9	 test	 rcx, rcx
  00177	74 0d		 je	 SHORT $LN21@destroy

; 71   : {

  00179	48 89 19	 mov	 QWORD PTR [rcx], rbx

; 198  : }

  0017c	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00180	5b		 pop	 rbx
  00181	e9 00 00 00 00	 jmp	 ??3@YAXPEAX@Z		; operator delete
$LN21@destroy:
  00186	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0018a	5b		 pop	 rbx
  0018b	c3		 ret	 0
?destroy@Blocks@@YAXXZ ENDP				; Blocks::destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ??_GBlockAir@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$dead$ = 56
??_GBlockAir@@QEAAPEAXI@Z PROC				; BlockAir::`scalar deleting destructor', COMDAT
$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 71   : {

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Block@@6B@
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 89 01	 mov	 QWORD PTR [rcx], rax
  00013	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
  00018	48 8b c3	 mov	 rax, rbx
  0001b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001f	5b		 pop	 rbx
  00020	c3		 ret	 0
??_GBlockAir@@QEAAPEAXI@Z ENDP				; BlockAir::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ??_GBlock@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$dead$ = 56
??_GBlock@@QEAAPEAXI@Z PROC				; Block::`scalar deleting destructor', COMDAT
$LN7:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 71   : {

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Block@@6B@
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 89 01	 mov	 QWORD PTR [rcx], rax
  00013	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
  00018	48 8b c3	 mov	 rax, rbx
  0001b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001f	5b		 pop	 rbx
  00020	c3		 ret	 0
??_GBlock@@QEAAPEAXI@Z ENDP				; Block::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ??_GBlockFluid@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$dead$ = 56
??_GBlockFluid@@QEAAPEAXI@Z PROC			; BlockFluid::`scalar deleting destructor', COMDAT
$LN9:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 71   : {

  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Block@@6B@
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 89 01	 mov	 QWORD PTR [rcx], rax
  00013	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
  00018	48 8b c3	 mov	 rax, rbx
  0001b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001f	5b		 pop	 rbx
  00020	c3		 ret	 0
??_GBlockFluid@@QEAAPEAXI@Z ENDP			; BlockFluid::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ??1BlockAir@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1BlockAir@@QEAA@XZ PROC				; BlockAir::~BlockAir, COMDAT

; 71   : {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Block@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax
  0000a	c3		 ret	 0
??1BlockAir@@QEAA@XZ ENDP				; BlockAir::~BlockAir
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\glenn\documents\github\wind\project\wind\wind\blocks.cpp
;	COMDAT ??1BlockFluid@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1BlockFluid@@QEAA@XZ PROC				; BlockFluid::~BlockFluid, COMDAT

; 71   : {

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Block@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax
  0000a	c3		 ret	 0
??1BlockFluid@@QEAA@XZ ENDP				; BlockFluid::~BlockFluid
_TEXT	ENDS
END
