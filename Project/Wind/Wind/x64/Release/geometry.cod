; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.61030.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_R2AxisAlignedXZ@geom@@8			; geom::AxisAlignedXZ::`RTTI Base Class Array'
PUBLIC	??_7AxisAlignedXZ@geom@@6B@			; geom::AxisAlignedXZ::`vftable'
PUBLIC	??_R0?AVAxisAlignedXZ@geom@@@8			; geom::AxisAlignedXZ `RTTI Type Descriptor'
PUBLIC	??_R4AxisAlignedYZ@geom@@6B@			; geom::AxisAlignedYZ::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@AxisAlignedYZ@geom@@8		; geom::AxisAlignedYZ::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4AxisAlignedFace@geom@@6B@			; geom::AxisAlignedFace::`RTTI Complete Object Locator'
PUBLIC	??_R4AxisAlignedXZ@geom@@6B@			; geom::AxisAlignedXZ::`RTTI Complete Object Locator'
PUBLIC	??_R4AxisAlignedXY@geom@@6B@			; geom::AxisAlignedXY::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@AxisAlignedXZ@geom@@8		; geom::AxisAlignedXZ::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVAxisAlignedXY@geom@@@8			; geom::AxisAlignedXY `RTTI Type Descriptor'
PUBLIC	??_R3AxisAlignedXY@geom@@8			; geom::AxisAlignedXY::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@AxisAlignedXY@geom@@8		; geom::AxisAlignedXY::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7AxisAlignedYZ@geom@@6B@			; geom::AxisAlignedYZ::`vftable'
PUBLIC	??_R3AxisAlignedFace@geom@@8			; geom::AxisAlignedFace::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2AxisAlignedFace@geom@@8			; geom::AxisAlignedFace::`RTTI Base Class Array'
PUBLIC	??_7AxisAlignedFace@geom@@6B@			; geom::AxisAlignedFace::`vftable'
PUBLIC	??_7AxisAlignedXY@geom@@6B@			; geom::AxisAlignedXY::`vftable'
PUBLIC	??_R2AxisAlignedXY@geom@@8			; geom::AxisAlignedXY::`RTTI Base Class Array'
PUBLIC	??_R3AxisAlignedYZ@geom@@8			; geom::AxisAlignedYZ::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVAxisAlignedFace@geom@@@8		; geom::AxisAlignedFace `RTTI Type Descriptor'
PUBLIC	??_R0?AVAxisAlignedYZ@geom@@@8			; geom::AxisAlignedYZ `RTTI Type Descriptor'
PUBLIC	??_R2AxisAlignedYZ@geom@@8			; geom::AxisAlignedYZ::`RTTI Base Class Array'
PUBLIC	??_R3AxisAlignedXZ@geom@@8			; geom::AxisAlignedXZ::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@AxisAlignedFace@geom@@8		; geom::AxisAlignedFace::`RTTI Base Class Descriptor at (0,-1,0,64)'
;	COMDAT ??_R1A@?0A@EA@AxisAlignedFace@geom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AxisAlignedFace@geom@@8 DD imagerel ??_R0?AVAxisAlignedFace@geom@@@8 ; geom::AxisAlignedFace::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3AxisAlignedFace@geom@@8
rdata$r	ENDS
;	COMDAT ??_R3AxisAlignedXZ@geom@@8
rdata$r	SEGMENT
??_R3AxisAlignedXZ@geom@@8 DD 00H			; geom::AxisAlignedXZ::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2AxisAlignedXZ@geom@@8
rdata$r	ENDS
;	COMDAT ??_R2AxisAlignedYZ@geom@@8
rdata$r	SEGMENT
??_R2AxisAlignedYZ@geom@@8 DD imagerel ??_R1A@?0A@EA@AxisAlignedYZ@geom@@8 ; geom::AxisAlignedYZ::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@AxisAlignedFace@geom@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R0?AVAxisAlignedYZ@geom@@@8
_DATA	SEGMENT
??_R0?AVAxisAlignedYZ@geom@@@8 DQ FLAT:??_7type_info@@6B@ ; geom::AxisAlignedYZ `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVAxisAlignedYZ@geom@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AVAxisAlignedFace@geom@@@8
_DATA	SEGMENT
??_R0?AVAxisAlignedFace@geom@@@8 DQ FLAT:??_7type_info@@6B@ ; geom::AxisAlignedFace `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVAxisAlignedFace@geom@@', 00H
_DATA	ENDS
;	COMDAT ??_R3AxisAlignedYZ@geom@@8
rdata$r	SEGMENT
??_R3AxisAlignedYZ@geom@@8 DD 00H			; geom::AxisAlignedYZ::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2AxisAlignedYZ@geom@@8
rdata$r	ENDS
;	COMDAT ??_R2AxisAlignedXY@geom@@8
rdata$r	SEGMENT
??_R2AxisAlignedXY@geom@@8 DD imagerel ??_R1A@?0A@EA@AxisAlignedXY@geom@@8 ; geom::AxisAlignedXY::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@AxisAlignedFace@geom@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_7AxisAlignedXY@geom@@6B@
CONST	SEGMENT
??_7AxisAlignedXY@geom@@6B@ DQ FLAT:??_R4AxisAlignedXY@geom@@6B@ ; geom::AxisAlignedXY::`vftable'
	DQ	FLAT:?getNormal@AxisAlignedXY@geom@@UEAA?AVVector@2@XZ
	DQ	FLAT:?inside@AxisAlignedXY@geom@@UEAA_NVVector@2@@Z
CONST	ENDS
;	COMDAT ??_7AxisAlignedFace@geom@@6B@
CONST	SEGMENT
??_7AxisAlignedFace@geom@@6B@ DQ FLAT:??_R4AxisAlignedFace@geom@@6B@ ; geom::AxisAlignedFace::`vftable'
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT ??_R2AxisAlignedFace@geom@@8
rdata$r	SEGMENT
??_R2AxisAlignedFace@geom@@8 DD imagerel ??_R1A@?0A@EA@AxisAlignedFace@geom@@8 ; geom::AxisAlignedFace::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3AxisAlignedFace@geom@@8
rdata$r	SEGMENT
??_R3AxisAlignedFace@geom@@8 DD 00H			; geom::AxisAlignedFace::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2AxisAlignedFace@geom@@8
rdata$r	ENDS
;	COMDAT ??_7AxisAlignedYZ@geom@@6B@
CONST	SEGMENT
??_7AxisAlignedYZ@geom@@6B@ DQ FLAT:??_R4AxisAlignedYZ@geom@@6B@ ; geom::AxisAlignedYZ::`vftable'
	DQ	FLAT:?getNormal@AxisAlignedYZ@geom@@UEAA?AVVector@2@XZ
	DQ	FLAT:?inside@AxisAlignedYZ@geom@@UEAA_NVVector@2@@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@AxisAlignedXY@geom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AxisAlignedXY@geom@@8 DD imagerel ??_R0?AVAxisAlignedXY@geom@@@8 ; geom::AxisAlignedXY::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3AxisAlignedXY@geom@@8
rdata$r	ENDS
;	COMDAT ??_R3AxisAlignedXY@geom@@8
rdata$r	SEGMENT
??_R3AxisAlignedXY@geom@@8 DD 00H			; geom::AxisAlignedXY::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2AxisAlignedXY@geom@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVAxisAlignedXY@geom@@@8
_DATA	SEGMENT
??_R0?AVAxisAlignedXY@geom@@@8 DQ FLAT:??_7type_info@@6B@ ; geom::AxisAlignedXY `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVAxisAlignedXY@geom@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@AxisAlignedXZ@geom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AxisAlignedXZ@geom@@8 DD imagerel ??_R0?AVAxisAlignedXZ@geom@@@8 ; geom::AxisAlignedXZ::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3AxisAlignedXZ@geom@@8
rdata$r	ENDS
;	COMDAT ??_R4AxisAlignedXY@geom@@6B@
rdata$r	SEGMENT
??_R4AxisAlignedXY@geom@@6B@ DD 01H			; geom::AxisAlignedXY::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVAxisAlignedXY@geom@@@8
	DD	imagerel ??_R3AxisAlignedXY@geom@@8
	DD	imagerel ??_R4AxisAlignedXY@geom@@6B@
rdata$r	ENDS
;	COMDAT ??_R4AxisAlignedXZ@geom@@6B@
rdata$r	SEGMENT
??_R4AxisAlignedXZ@geom@@6B@ DD 01H			; geom::AxisAlignedXZ::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVAxisAlignedXZ@geom@@@8
	DD	imagerel ??_R3AxisAlignedXZ@geom@@8
	DD	imagerel ??_R4AxisAlignedXZ@geom@@6B@
rdata$r	ENDS
;	COMDAT ??_R4AxisAlignedFace@geom@@6B@
rdata$r	SEGMENT
??_R4AxisAlignedFace@geom@@6B@ DD 01H			; geom::AxisAlignedFace::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVAxisAlignedFace@geom@@@8
	DD	imagerel ??_R3AxisAlignedFace@geom@@8
	DD	imagerel ??_R4AxisAlignedFace@geom@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@AxisAlignedYZ@geom@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AxisAlignedYZ@geom@@8 DD imagerel ??_R0?AVAxisAlignedYZ@geom@@@8 ; geom::AxisAlignedYZ::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3AxisAlignedYZ@geom@@8
rdata$r	ENDS
;	COMDAT ??_R4AxisAlignedYZ@geom@@6B@
rdata$r	SEGMENT
??_R4AxisAlignedYZ@geom@@6B@ DD 01H			; geom::AxisAlignedYZ::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVAxisAlignedYZ@geom@@@8
	DD	imagerel ??_R3AxisAlignedYZ@geom@@8
	DD	imagerel ??_R4AxisAlignedYZ@geom@@6B@
rdata$r	ENDS
;	COMDAT ??_R0?AVAxisAlignedXZ@geom@@@8
_DATA	SEGMENT
??_R0?AVAxisAlignedXZ@geom@@@8 DQ FLAT:??_7type_info@@6B@ ; geom::AxisAlignedXZ `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVAxisAlignedXZ@geom@@', 00H
_DATA	ENDS
;	COMDAT ??_7AxisAlignedXZ@geom@@6B@
CONST	SEGMENT
??_7AxisAlignedXZ@geom@@6B@ DQ FLAT:??_R4AxisAlignedXZ@geom@@6B@ ; geom::AxisAlignedXZ::`vftable'
	DQ	FLAT:?getNormal@AxisAlignedXZ@geom@@UEAA?AVVector@2@XZ
	DQ	FLAT:?inside@AxisAlignedXZ@geom@@UEAA_NVVector@2@@Z
CONST	ENDS
;	COMDAT ??_R2AxisAlignedXZ@geom@@8
rdata$r	SEGMENT
??_R2AxisAlignedXZ@geom@@8 DD imagerel ??_R1A@?0A@EA@AxisAlignedXZ@geom@@8 ; geom::AxisAlignedXZ::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@AxisAlignedFace@geom@@8
	ORG $+3
PUBLIC	?inside@AxisAlignedYZ@geom@@UEAA_NVVector@2@@Z	; geom::AxisAlignedYZ::inside
PUBLIC	?getNormal@AxisAlignedYZ@geom@@UEAA?AVVector@2@XZ ; geom::AxisAlignedYZ::getNormal
PUBLIC	?inside@AxisAlignedXZ@geom@@UEAA_NVVector@2@@Z	; geom::AxisAlignedXZ::inside
PUBLIC	?getNormal@AxisAlignedXZ@geom@@UEAA?AVVector@2@XZ ; geom::AxisAlignedXZ::getNormal
PUBLIC	?inside@AxisAlignedXY@geom@@UEAA_NVVector@2@@Z	; geom::AxisAlignedXY::inside
PUBLIC	?getNormal@AxisAlignedXY@geom@@UEAA?AVVector@2@XZ ; geom::AxisAlignedXY::getNormal
PUBLIC	?perspective@Matrix@geom@@SA?AV12@MMMM@Z	; geom::Matrix::perspective
PUBLIC	?rotate@Matrix@geom@@SA?AV12@MMMM@Z		; geom::Matrix::rotate
PUBLIC	?translate@Matrix@geom@@SA?AV12@MMM@Z		; geom::Matrix::translate
PUBLIC	?scale@Matrix@geom@@SA?AV12@MMM@Z		; geom::Matrix::scale
PUBLIC	?identity@Matrix@geom@@SA?AV12@XZ		; geom::Matrix::identity
PUBLIC	??4Matrix@geom@@QEAAAEAV01@AEBV01@@Z		; geom::Matrix::operator=
PUBLIC	??DMatrix@geom@@QEBA?AV01@AEBV01@@Z		; geom::Matrix::operator*
PUBLIC	??AMatrix@geom@@QEAAAEAMH@Z			; geom::Matrix::operator[]
PUBLIC	??0Matrix@geom@@QEAA@PEAM@Z			; geom::Matrix::Matrix
PUBLIC	??0Matrix@geom@@QEAA@XZ				; geom::Matrix::Matrix
PUBLIC	?index@Matrix@geom@@AEBAHHH@Z			; geom::Matrix::index
PUBLIC	??_0Vector@geom@@QEAA?AV01@M@Z			; geom::Vector::operator/=
PUBLIC	??SVector@geom@@QEBAMXZ				; geom::Vector::operator~
PUBLIC	??0AxisAlignedCube@geom@@QEAA@VVector@1@0@Z	; geom::AxisAlignedCube::AxisAlignedCube
PUBLIC	??YVector@geom@@QEAA?AV01@AEBV01@@Z		; geom::Vector::operator+=
PUBLIC	??KVector@geom@@QEBA?AV01@M@Z			; geom::Vector::operator/
PUBLIC	??DVector@geom@@QEBA?AV01@M@Z			; geom::Vector::operator*
PUBLIC	??GVector@geom@@QEBA?AV01@AEBV01@@Z		; geom::Vector::operator-
PUBLIC	??HVector@geom@@QEBA?AV01@AEBV01@@Z		; geom::Vector::operator+
PUBLIC	?normalize@Vector@geom@@QEAA?AV12@XZ		; geom::Vector::normalize
PUBLIC	??0Vector@geom@@QEAA@MMMM@Z			; geom::Vector::Vector
PUBLIC	?inside@AxisAlignedCube@geom@@QEAA_NVVector@2@@Z ; geom::AxisAlignedCube::inside
PUBLIC	?expand@AxisAlignedCube@geom@@QEAA?AV12@M@Z	; geom::AxisAlignedCube::expand
PUBLIC	??0Vector@geom@@QEAA@AEBV01@@Z			; geom::Vector::Vector
PUBLIC	??0Line@geom@@QEAA@VVector@1@0@Z		; geom::Line::Line
;	COMDAT pdata
pdata	SEGMENT
$pdata$?perspective@Matrix@geom@@SA?AV12@MMMM@Z DD imagerel $LN12
	DD	imagerel $LN12+354
	DD	imagerel $unwind$?perspective@Matrix@geom@@SA?AV12@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?rotate@Matrix@geom@@SA?AV12@MMMM@Z DD imagerel $LN12
	DD	imagerel $LN12+414
	DD	imagerel $unwind$?rotate@Matrix@geom@@SA?AV12@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??DMatrix@geom@@QEBA?AV01@AEBV01@@Z DD imagerel $LN72
	DD	imagerel $LN72+471
	DD	imagerel $unwind$??DMatrix@geom@@QEBA?AV01@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?normalize@Vector@geom@@QEAA?AV12@XZ DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$?normalize@Vector@geom@@QEAA?AV12@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?inside@AxisAlignedCube@geom@@QEAA_NVVector@2@@Z DD imagerel $LN4
	DD	imagerel $LN4+131
	DD	imagerel $unwind$?inside@AxisAlignedCube@geom@@QEAA_NVVector@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?expand@AxisAlignedCube@geom@@QEAA?AV12@M@Z DD imagerel $LN24
	DD	imagerel $LN24+124
	DD	imagerel $unwind$?expand@AxisAlignedCube@geom@@QEAA?AV12@M@Z
;	COMDAT xdata
xdata	SEGMENT
$unwind$?expand@AxisAlignedCube@geom@@QEAA?AV12@M@Z DD 031201H
	DD	06812H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?inside@AxisAlignedCube@geom@@QEAA_NVVector@2@@Z DD 031501H
	DD	06815H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?normalize@Vector@geom@@QEAA?AV12@XZ DD 0a2f01H
	DD	02882fH
	DD	037819H
	DD	04680fH
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??DMatrix@geom@@QEBA?AV01@AEBV01@@Z DD 0167601H
	DD	0f876H
	DD	01e86bH
	DD	02d84fH
	DD	03c843H
	DD	04b82dH
	DD	05a828H
	DD	069823H
	DD	078817H
	DD	087812H
	DD	09680eH
	DD	015010aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?rotate@Matrix@geom@@SA?AV12@MMMM@Z DD 0b2c19H
	DD	07981dH
	DD	088818H
	DD	097813H
	DD	0a680fH
	DD	016010bH
	DD	03004H
	DD	imagerel __GSHandlerCheck
	DD	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?perspective@Matrix@geom@@SA?AV12@MMMM@Z DD 0b2c19H
	DD	07a81dH
	DD	088818H
	DD	097813H
	DD	0a680fH
	DD	016010bH
	DD	03004H
	DD	imagerel __GSHandlerCheck
	DD	060H
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??0Line@geom@@QEAA@VVector@1@0@Z
_TEXT	SEGMENT
this$ = 8
vec1$ = 16
vec2$ = 24
??0Line@geom@@QEAA@VVector@1@0@Z PROC			; geom::Line::Line, COMDAT

; 10   : {

  00000	8b 02		 mov	 eax, DWORD PTR [rdx]
  00002	89 01		 mov	 DWORD PTR [rcx], eax
  00004	8b 42 04	 mov	 eax, DWORD PTR [rdx+4]
  00007	89 41 04	 mov	 DWORD PTR [rcx+4], eax
  0000a	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  0000d	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  00010	8b 42 0c	 mov	 eax, DWORD PTR [rdx+12]
  00013	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  00016	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00019	89 41 10	 mov	 DWORD PTR [rcx+16], eax
  0001c	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  00020	89 41 14	 mov	 DWORD PTR [rcx+20], eax
  00023	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00027	89 41 18	 mov	 DWORD PTR [rcx+24], eax
  0002a	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0002e	89 41 1c	 mov	 DWORD PTR [rcx+28], eax

; 348  : 
; 349  : }

  00031	48 8b c1	 mov	 rax, rcx
  00034	c3		 ret	 0
??0Line@geom@@QEAA@VVector@1@0@Z ENDP			; geom::Line::Line
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??0Vector@geom@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 8
vec$ = 16
??0Vector@geom@@QEAA@AEBV01@@Z PROC			; geom::Vector::Vector, COMDAT

; 10   : {

  00000	8b 02		 mov	 eax, DWORD PTR [rdx]
  00002	89 01		 mov	 DWORD PTR [rcx], eax
  00004	8b 42 04	 mov	 eax, DWORD PTR [rdx+4]
  00007	89 41 04	 mov	 DWORD PTR [rcx+4], eax
  0000a	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  0000d	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  00010	8b 42 0c	 mov	 eax, DWORD PTR [rdx+12]
  00013	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 11   : 	
; 12   : }

  00016	48 8b c1	 mov	 rax, rcx
  00019	c3		 ret	 0
??0Vector@geom@@QEAA@AEBV01@@Z ENDP			; geom::Vector::Vector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?expand@AxisAlignedCube@geom@@QEAA?AV12@M@Z
_TEXT	SEGMENT
this$ = 32
__$ReturnUdt$ = 40
f$ = 48
?expand@AxisAlignedCube@geom@@QEAA?AV12@M@Z PROC	; geom::AxisAlignedCube::expand, COMDAT

; 422  : {

$LN24:
  00000	48 83 ec 18	 sub	 rsp, 24

; 36   : }
; 37   : 
; 38   : Vector Vector::operator-(const Vector &vec) const
; 39   : {
; 40   : 	return Vector(x - vec.x, y - vec.y, z - vec.z);

  00004	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [rcx+4]
  00009	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [rcx+8]
  0000e	0f 29 34 24	 movaps	 XMMWORD PTR [rsp], xmm6

; 41   : }
; 42   : 
; 43   : Vector Vector::operator*(const Vector &vec) const
; 44   : {
; 45   : 	return Vector(x * vec.x, y * vec.y, z * vec.z);
; 46   : }
; 47   : 
; 48   : Vector Vector::operator*(const Matrix &mat) const
; 49   : {
; 50   : 	Vector result;
; 51   : 	float f = mat[0];
; 52   : 
; 53   : 	result.x = x * mat[0] + y * mat[1] + z * mat[2] + w * mat[3];
; 54   : 	result.y = x * mat[4] + y * mat[5] + z * mat[6] + w * mat[7];
; 55   : 	result.z = x * mat[8] + y * mat[9] + z * mat[10] + w * mat[11];
; 56   : 	result.w = x * mat[12] + y * mat[13] + z * mat[14] + w * mat[15];
; 57   : 
; 58   : 	return result;
; 59   : }
; 60   : 
; 61   : Vector Vector::operator*(float f) const
; 62   : {
; 63   : 	return Vector(x * f, y * f, z * f);

  00012	0f 28 f2	 movaps	 xmm6, xmm2

; 422  : {

  00015	0f 28 e2	 movaps	 xmm4, xmm2

; 423  : 	Vector ex(f, f, f);
; 424  : 	return AxisAlignedCube(pos - ex, size + ex * 2.0f);

  00018	48 8b c2	 mov	 rax, rdx

; 36   : }
; 37   : 
; 38   : Vector Vector::operator-(const Vector &vec) const
; 39   : {
; 40   : 	return Vector(x - vec.x, y - vec.y, z - vec.z);

  0001b	f3 0f 10 11	 movss	 xmm2, DWORD PTR [rcx]
  0001f	f3 0f 5c cc	 subss	 xmm1, xmm4
  00023	f3 0f 5c c4	 subss	 xmm0, xmm4

; 41   : }
; 42   : 
; 43   : Vector Vector::operator*(const Vector &vec) const
; 44   : {
; 45   : 	return Vector(x * vec.x, y * vec.y, z * vec.z);
; 46   : }
; 47   : 
; 48   : Vector Vector::operator*(const Matrix &mat) const
; 49   : {
; 50   : 	Vector result;
; 51   : 	float f = mat[0];
; 52   : 
; 53   : 	result.x = x * mat[0] + y * mat[1] + z * mat[2] + w * mat[3];
; 54   : 	result.y = x * mat[4] + y * mat[5] + z * mat[6] + w * mat[7];
; 55   : 	result.z = x * mat[8] + y * mat[9] + z * mat[10] + w * mat[11];
; 56   : 	result.w = x * mat[12] + y * mat[13] + z * mat[14] + w * mat[15];
; 57   : 
; 58   : 	return result;
; 59   : }
; 60   : 
; 61   : Vector Vector::operator*(float f) const
; 62   : {
; 63   : 	return Vector(x * f, y * f, z * f);

  00027	f3 0f 59 35 00
	00 00 00	 mulss	 xmm6, DWORD PTR __real@40000000

; 11   : 	
; 12   : }
; 13   : 
; 14   : Vector::Vector(float x, float y, float z, float w)
; 15   : 	: x(x), y(y), z(z), w(w)
; 16   : {
; 17   : 	
; 18   : }
; 19   : 
; 20   : Vector Vector::normalize()
; 21   : {
; 22   : 	return *this /= ~*this;
; 23   : }
; 24   : 
; 25   : Vector Vector::wDivide()
; 26   : {
; 27   : 	x /= w;
; 28   : 	y /= w;
; 29   : 	z /= w;
; 30   : 	return *this;
; 31   : }
; 32   : 
; 33   : Vector Vector::operator+(const Vector &vec) const
; 34   : {
; 35   : 	return Vector(x + vec.x, y + vec.y, z + vec.z);

  0002f	0f 28 ee	 movaps	 xmm5, xmm6
  00032	0f 28 de	 movaps	 xmm3, xmm6
  00035	f3 0f 58 71 18	 addss	 xmm6, DWORD PTR [rcx+24]
  0003a	f3 0f 58 69 10	 addss	 xmm5, DWORD PTR [rcx+16]
  0003f	f3 0f 58 59 14	 addss	 xmm3, DWORD PTR [rcx+20]

; 10   : {

  00044	c7 42 0c 00 00
	80 3f		 mov	 DWORD PTR [rdx+12], 1065353216 ; 3f800000H
  0004b	f3 0f 11 4a 04	 movss	 DWORD PTR [rdx+4], xmm1
  00050	f3 0f 11 42 08	 movss	 DWORD PTR [rdx+8], xmm0

; 36   : }
; 37   : 
; 38   : Vector Vector::operator-(const Vector &vec) const
; 39   : {
; 40   : 	return Vector(x - vec.x, y - vec.y, z - vec.z);

  00055	f3 0f 5c d4	 subss	 xmm2, xmm4

; 10   : {

  00059	f3 0f 11 12	 movss	 DWORD PTR [rdx], xmm2
  0005d	f3 0f 11 72 18	 movss	 DWORD PTR [rdx+24], xmm6
  00062	f3 0f 11 6a 10	 movss	 DWORD PTR [rdx+16], xmm5

; 425  : }

  00067	0f 28 34 24	 movaps	 xmm6, XMMWORD PTR [rsp]

; 10   : {

  0006b	c7 42 1c 00 00
	80 3f		 mov	 DWORD PTR [rdx+28], 1065353216 ; 3f800000H
  00072	f3 0f 11 5a 14	 movss	 DWORD PTR [rdx+20], xmm3

; 425  : }

  00077	48 83 c4 18	 add	 rsp, 24
  0007b	c3		 ret	 0
?expand@AxisAlignedCube@geom@@QEAA?AV12@M@Z ENDP	; geom::AxisAlignedCube::expand
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?inside@AxisAlignedCube@geom@@QEAA_NVVector@2@@Z
_TEXT	SEGMENT
this$ = 32
vec$ = 40
?inside@AxisAlignedCube@geom@@QEAA_NVVector@2@@Z PROC	; geom::AxisAlignedCube::inside, COMDAT

; 458  : {

$LN4:
  00000	48 83 ec 18	 sub	 rsp, 24

; 459  : 	return vec.x >= pos.x & vec.x <= pos.x + size.x & vec.y >= pos.y & vec.y <= pos.y + size.y & vec.z >= pos.z & vec.z <= pos.z + size.z;

  00004	f3 0f 10 11	 movss	 xmm2, DWORD PTR [rcx]
  00008	f3 0f 10 61 04	 movss	 xmm4, DWORD PTR [rcx+4]
  0000d	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [rdx]
  00011	0f 29 34 24	 movaps	 XMMWORD PTR [rsp], xmm6
  00015	0f 28 c2	 movaps	 xmm0, xmm2
  00018	f3 0f 58 41 10	 addss	 xmm0, DWORD PTR [rcx+16]
  0001d	f3 0f 10 71 08	 movss	 xmm6, DWORD PTR [rcx+8]
  00022	f3 0f 10 6a 08	 movss	 xmm5, DWORD PTR [rdx+8]
  00027	f3 0f 10 5a 04	 movss	 xmm3, DWORD PTR [rdx+4]
  0002c	33 d2		 xor	 edx, edx
  0002e	0f 2f c1	 comiss	 xmm0, xmm1
  00031	8b c2		 mov	 eax, edx
  00033	44 8b c2	 mov	 r8d, edx
  00036	0f 28 c4	 movaps	 xmm0, xmm4
  00039	f3 0f 58 41 14	 addss	 xmm0, DWORD PTR [rcx+20]
  0003e	41 0f 93 c0	 setae	 r8b
  00042	0f 2f c3	 comiss	 xmm0, xmm3
  00045	0f 28 c6	 movaps	 xmm0, xmm6
  00048	f3 0f 58 41 18	 addss	 xmm0, DWORD PTR [rcx+24]
  0004d	0f 93 c0	 setae	 al
  00050	8b ca		 mov	 ecx, edx
  00052	44 23 c0	 and	 r8d, eax
  00055	8b c2		 mov	 eax, edx
  00057	0f 2f c5	 comiss	 xmm0, xmm5
  0005a	0f 93 c0	 setae	 al
  0005d	41 23 c0	 and	 eax, r8d
  00060	0f 2f ca	 comiss	 xmm1, xmm2
  00063	0f 93 c1	 setae	 cl
  00066	23 c1		 and	 eax, ecx
  00068	8b ca		 mov	 ecx, edx
  0006a	0f 2f dc	 comiss	 xmm3, xmm4
  0006d	0f 93 c1	 setae	 cl
  00070	23 c1		 and	 eax, ecx
  00072	0f 2f ee	 comiss	 xmm5, xmm6

; 460  : }

  00075	0f 28 34 24	 movaps	 xmm6, XMMWORD PTR [rsp]
  00079	0f 93 c2	 setae	 dl
  0007c	23 c2		 and	 eax, edx
  0007e	48 83 c4 18	 add	 rsp, 24
  00082	c3		 ret	 0
?inside@AxisAlignedCube@geom@@QEAA_NVVector@2@@Z ENDP	; geom::AxisAlignedCube::inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??0Vector@geom@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 8
x$ = 16
y$ = 24
z$ = 32
w$ = 40
??0Vector@geom@@QEAA@MMMM@Z PROC			; geom::Vector::Vector, COMDAT

; 16   : {

  00000	f3 0f 10 44 24
	28		 movss	 xmm0, DWORD PTR w$[rsp]
  00006	f3 0f 11 09	 movss	 DWORD PTR [rcx], xmm1
  0000a	f3 0f 11 51 04	 movss	 DWORD PTR [rcx+4], xmm2

; 17   : 	
; 18   : }

  0000f	48 8b c1	 mov	 rax, rcx
  00012	f3 0f 11 41 0c	 movss	 DWORD PTR [rcx+12], xmm0
  00017	f3 0f 11 59 08	 movss	 DWORD PTR [rcx+8], xmm3
  0001c	c3		 ret	 0
??0Vector@geom@@QEAA@MMMM@Z ENDP			; geom::Vector::Vector
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?normalize@Vector@geom@@QEAA?AV12@XZ
_TEXT	SEGMENT
this$ = 96
__$ReturnUdt$ = 104
?normalize@Vector@geom@@QEAA?AV12@XZ PROC		; geom::Vector::normalize, COMDAT

; 21   : {

$LN10:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	0f 29 74 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm6

; 24   : 
; 25   : Vector Vector::wDivide()
; 26   : {
; 27   : 	x /= w;
; 28   : 	y /= w;
; 29   : 	z /= w;
; 30   : 	return *this;
; 31   : }
; 32   : 
; 33   : Vector Vector::operator+(const Vector &vec) const
; 34   : {
; 35   : 	return Vector(x + vec.x, y + vec.y, z + vec.z);
; 36   : }
; 37   : 
; 38   : Vector Vector::operator-(const Vector &vec) const
; 39   : {
; 40   : 	return Vector(x - vec.x, y - vec.y, z - vec.z);
; 41   : }
; 42   : 
; 43   : Vector Vector::operator*(const Vector &vec) const
; 44   : {
; 45   : 	return Vector(x * vec.x, y * vec.y, z * vec.z);
; 46   : }
; 47   : 
; 48   : Vector Vector::operator*(const Matrix &mat) const
; 49   : {
; 50   : 	Vector result;
; 51   : 	float f = mat[0];
; 52   : 
; 53   : 	result.x = x * mat[0] + y * mat[1] + z * mat[2] + w * mat[3];
; 54   : 	result.y = x * mat[4] + y * mat[5] + z * mat[6] + w * mat[7];
; 55   : 	result.z = x * mat[8] + y * mat[9] + z * mat[10] + w * mat[11];
; 56   : 	result.w = x * mat[12] + y * mat[13] + z * mat[14] + w * mat[15];
; 57   : 
; 58   : 	return result;
; 59   : }
; 60   : 
; 61   : Vector Vector::operator*(float f) const
; 62   : {
; 63   : 	return Vector(x * f, y * f, z * f);
; 64   : }
; 65   : 
; 66   : Vector Vector::operator/(const Vector &vec) const
; 67   : {
; 68   : 	return Vector(x / vec.x, y / vec.y, z / vec.z);
; 69   : }
; 70   : 
; 71   : Vector Vector::operator/(float f) const
; 72   : {
; 73   : 	return Vector(x / f, y / f, z / f);
; 74   : }
; 75   : 
; 76   : Vector Vector::operator&(const Vector &vec) const
; 77   : {
; 78   : 	return Vector(y * vec.z - z * vec.y, z * vec.x - x * vec.z, x * vec.y - y * vec.x);
; 79   : }
; 80   : 
; 81   : float Vector::operator|(const Vector &vec) const
; 82   : {
; 83   : 	return x * vec.x + y * vec.y + z * vec.z;
; 84   : }
; 85   : 
; 86   : Vector Vector::operator-() const
; 87   : {
; 88   : 	return Vector(-x, -y, -z);
; 89   : }
; 90   : 
; 91   : float Vector::operator~() const
; 92   : {
; 93   : 	return sqrtf(x * x + y * y + z * z);

  0000f	f3 0f 10 71 08	 movss	 xmm6, DWORD PTR [rcx+8]
  00014	0f 29 7c 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm7
  00019	f3 0f 10 39	 movss	 xmm7, DWORD PTR [rcx]

; 21   : {

  0001d	48 8b fa	 mov	 rdi, rdx
  00020	48 8b d9	 mov	 rbx, rcx

; 24   : 
; 25   : Vector Vector::wDivide()
; 26   : {
; 27   : 	x /= w;
; 28   : 	y /= w;
; 29   : 	z /= w;
; 30   : 	return *this;
; 31   : }
; 32   : 
; 33   : Vector Vector::operator+(const Vector &vec) const
; 34   : {
; 35   : 	return Vector(x + vec.x, y + vec.y, z + vec.z);
; 36   : }
; 37   : 
; 38   : Vector Vector::operator-(const Vector &vec) const
; 39   : {
; 40   : 	return Vector(x - vec.x, y - vec.y, z - vec.z);
; 41   : }
; 42   : 
; 43   : Vector Vector::operator*(const Vector &vec) const
; 44   : {
; 45   : 	return Vector(x * vec.x, y * vec.y, z * vec.z);
; 46   : }
; 47   : 
; 48   : Vector Vector::operator*(const Matrix &mat) const
; 49   : {
; 50   : 	Vector result;
; 51   : 	float f = mat[0];
; 52   : 
; 53   : 	result.x = x * mat[0] + y * mat[1] + z * mat[2] + w * mat[3];
; 54   : 	result.y = x * mat[4] + y * mat[5] + z * mat[6] + w * mat[7];
; 55   : 	result.z = x * mat[8] + y * mat[9] + z * mat[10] + w * mat[11];
; 56   : 	result.w = x * mat[12] + y * mat[13] + z * mat[14] + w * mat[15];
; 57   : 
; 58   : 	return result;
; 59   : }
; 60   : 
; 61   : Vector Vector::operator*(float f) const
; 62   : {
; 63   : 	return Vector(x * f, y * f, z * f);
; 64   : }
; 65   : 
; 66   : Vector Vector::operator/(const Vector &vec) const
; 67   : {
; 68   : 	return Vector(x / vec.x, y / vec.y, z / vec.z);
; 69   : }
; 70   : 
; 71   : Vector Vector::operator/(float f) const
; 72   : {
; 73   : 	return Vector(x / f, y / f, z / f);
; 74   : }
; 75   : 
; 76   : Vector Vector::operator&(const Vector &vec) const
; 77   : {
; 78   : 	return Vector(y * vec.z - z * vec.y, z * vec.x - x * vec.z, x * vec.y - y * vec.x);
; 79   : }
; 80   : 
; 81   : float Vector::operator|(const Vector &vec) const
; 82   : {
; 83   : 	return x * vec.x + y * vec.y + z * vec.z;
; 84   : }
; 85   : 
; 86   : Vector Vector::operator-() const
; 87   : {
; 88   : 	return Vector(-x, -y, -z);
; 89   : }
; 90   : 
; 91   : float Vector::operator~() const
; 92   : {
; 93   : 	return sqrtf(x * x + y * y + z * z);

  00023	0f 28 c7	 movaps	 xmm0, xmm7
  00026	0f 28 d6	 movaps	 xmm2, xmm6
  00029	44 0f 29 44 24
	20		 movaps	 XMMWORD PTR [rsp+32], xmm8
  0002f	f3 44 0f 10 41
	04		 movss	 xmm8, DWORD PTR [rcx+4]
  00035	f3 0f 59 c7	 mulss	 xmm0, xmm7
  00039	f3 0f 59 d6	 mulss	 xmm2, xmm6
  0003d	41 0f 28 c8	 movaps	 xmm1, xmm8
  00041	f3 41 0f 59 c8	 mulss	 xmm1, xmm8
  00046	f3 0f 58 c1	 addss	 xmm0, xmm1
  0004a	f3 0f 58 c2	 addss	 xmm0, xmm2
  0004e	e8 00 00 00 00	 call	 sqrtf

; 16   : {

  00053	c7 47 0c 00 00
	80 3f		 mov	 DWORD PTR [rdi+12], 1065353216 ; 3f800000H

; 22   : 	return *this /= ~*this;

  0005a	48 8b c7	 mov	 rax, rdi

; 94   : }
; 95   : 
; 96   : Vector Vector::operator+=(const Vector &vec)
; 97   : {
; 98   : 	return Vector(x += vec.x, y += vec.y, z += vec.z);
; 99   : }
; 100  : 
; 101  : Vector Vector::operator-=(const Vector &vec)
; 102  : {
; 103  : 	return Vector(x -= vec.x, y -= vec.y, z -= vec.z);
; 104  : }
; 105  : 
; 106  : Vector Vector::operator*=(const Vector &vec)
; 107  : {
; 108  : 	return Vector(x *= vec.x, y *= vec.y, z *= vec.z);
; 109  : }
; 110  : 
; 111  : Vector Vector::operator*=(const Matrix &mat)
; 112  : {
; 113  : 	//return Vector(x * vec.x, y * vec.y, z * vec.z, w * vec.w);
; 114  : 	return *this;
; 115  : }
; 116  : 
; 117  : Vector Vector::operator*=(float f)
; 118  : {
; 119  : 	return Vector(x *= f, y *= f, z *= f);
; 120  : }
; 121  : 
; 122  : Vector Vector::operator/=(const Vector &vec)
; 123  : {
; 124  : 	return Vector(x /= vec.x, y /= vec.y, z /= vec.z);
; 125  : }
; 126  : 
; 127  : Vector Vector::operator/=(float f)
; 128  : {
; 129  : 	return Vector(x /= f, y /= f, z /= f);

  0005d	f3 0f 5e f0	 divss	 xmm6, xmm0
  00061	f3 44 0f 5e c0	 divss	 xmm8, xmm0
  00066	f3 0f 5e f8	 divss	 xmm7, xmm0
  0006a	f3 0f 11 73 08	 movss	 DWORD PTR [rbx+8], xmm6
  0006f	f3 44 0f 11 43
	04		 movss	 DWORD PTR [rbx+4], xmm8
  00075	f3 0f 11 3b	 movss	 DWORD PTR [rbx], xmm7

; 23   : }

  00079	48 8b 5c 24 60	 mov	 rbx, QWORD PTR [rsp+96]

; 16   : {

  0007e	f3 0f 11 3f	 movss	 DWORD PTR [rdi], xmm7
  00082	f3 44 0f 11 47
	04		 movss	 DWORD PTR [rdi+4], xmm8
  00088	f3 0f 11 77 08	 movss	 DWORD PTR [rdi+8], xmm6

; 23   : }

  0008d	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
  00092	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  00097	44 0f 28 44 24
	20		 movaps	 xmm8, XMMWORD PTR [rsp+32]
  0009d	48 83 c4 50	 add	 rsp, 80			; 00000050H
  000a1	5f		 pop	 rdi
  000a2	c3		 ret	 0
?normalize@Vector@geom@@QEAA?AV12@XZ ENDP		; geom::Vector::normalize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??HVector@geom@@QEBA?AV01@AEBV01@@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
vec$ = 24
??HVector@geom@@QEBA?AV01@AEBV01@@Z PROC		; geom::Vector::operator+, COMDAT

; 35   : 	return Vector(x + vec.x, y + vec.y, z + vec.z);

  00000	f3 41 0f 10 00	 movss	 xmm0, DWORD PTR [r8]
  00005	f3 41 0f 10 48
	04		 movss	 xmm1, DWORD PTR [r8+4]

; 16   : {

  0000b	c7 42 0c 00 00
	80 3f		 mov	 DWORD PTR [rdx+12], 1065353216 ; 3f800000H

; 35   : 	return Vector(x + vec.x, y + vec.y, z + vec.z);

  00012	48 8b c2	 mov	 rax, rdx
  00015	f3 0f 58 01	 addss	 xmm0, DWORD PTR [rcx]
  00019	f3 0f 58 49 04	 addss	 xmm1, DWORD PTR [rcx+4]

; 16   : {

  0001e	f3 0f 11 02	 movss	 DWORD PTR [rdx], xmm0

; 35   : 	return Vector(x + vec.x, y + vec.y, z + vec.z);

  00022	f3 41 0f 10 40
	08		 movss	 xmm0, DWORD PTR [r8+8]

; 16   : {

  00028	f3 0f 11 4a 04	 movss	 DWORD PTR [rdx+4], xmm1

; 35   : 	return Vector(x + vec.x, y + vec.y, z + vec.z);

  0002d	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [rcx+8]

; 16   : {

  00032	f3 0f 11 42 08	 movss	 DWORD PTR [rdx+8], xmm0

; 36   : }

  00037	c3		 ret	 0
??HVector@geom@@QEBA?AV01@AEBV01@@Z ENDP		; geom::Vector::operator+
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??GVector@geom@@QEBA?AV01@AEBV01@@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
vec$ = 24
??GVector@geom@@QEBA?AV01@AEBV01@@Z PROC		; geom::Vector::operator-, COMDAT

; 40   : 	return Vector(x - vec.x, y - vec.y, z - vec.z);

  00000	f3 0f 10 01	 movss	 xmm0, DWORD PTR [rcx]
  00004	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [rcx+4]

; 16   : {

  00009	c7 42 0c 00 00
	80 3f		 mov	 DWORD PTR [rdx+12], 1065353216 ; 3f800000H

; 40   : 	return Vector(x - vec.x, y - vec.y, z - vec.z);

  00010	48 8b c2	 mov	 rax, rdx
  00013	f3 41 0f 5c 00	 subss	 xmm0, DWORD PTR [r8]
  00018	f3 41 0f 5c 48
	04		 subss	 xmm1, DWORD PTR [r8+4]

; 16   : {

  0001e	f3 0f 11 02	 movss	 DWORD PTR [rdx], xmm0

; 40   : 	return Vector(x - vec.x, y - vec.y, z - vec.z);

  00022	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [rcx+8]

; 16   : {

  00027	f3 0f 11 4a 04	 movss	 DWORD PTR [rdx+4], xmm1

; 40   : 	return Vector(x - vec.x, y - vec.y, z - vec.z);

  0002c	f3 41 0f 5c 40
	08		 subss	 xmm0, DWORD PTR [r8+8]

; 16   : {

  00032	f3 0f 11 42 08	 movss	 DWORD PTR [rdx+8], xmm0

; 41   : }

  00037	c3		 ret	 0
??GVector@geom@@QEBA?AV01@AEBV01@@Z ENDP		; geom::Vector::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??DVector@geom@@QEBA?AV01@M@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
f$ = 24
??DVector@geom@@QEBA?AV01@M@Z PROC			; geom::Vector::operator*, COMDAT

; 63   : 	return Vector(x * f, y * f, z * f);

  00000	0f 28 c2	 movaps	 xmm0, xmm2
  00003	0f 28 ca	 movaps	 xmm1, xmm2
  00006	f3 0f 59 51 08	 mulss	 xmm2, DWORD PTR [rcx+8]

; 16   : {

  0000b	c7 42 0c 00 00
	80 3f		 mov	 DWORD PTR [rdx+12], 1065353216 ; 3f800000H

; 63   : 	return Vector(x * f, y * f, z * f);

  00012	48 8b c2	 mov	 rax, rdx
  00015	f3 0f 59 01	 mulss	 xmm0, DWORD PTR [rcx]
  00019	f3 0f 59 49 04	 mulss	 xmm1, DWORD PTR [rcx+4]

; 16   : {

  0001e	f3 0f 11 52 08	 movss	 DWORD PTR [rdx+8], xmm2
  00023	f3 0f 11 02	 movss	 DWORD PTR [rdx], xmm0
  00027	f3 0f 11 4a 04	 movss	 DWORD PTR [rdx+4], xmm1

; 64   : }

  0002c	c3		 ret	 0
??DVector@geom@@QEBA?AV01@M@Z ENDP			; geom::Vector::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??KVector@geom@@QEBA?AV01@M@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
f$ = 24
??KVector@geom@@QEBA?AV01@M@Z PROC			; geom::Vector::operator/, COMDAT

; 73   : 	return Vector(x / f, y / f, z / f);

  00000	f3 0f 10 01	 movss	 xmm0, DWORD PTR [rcx]
  00004	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [rcx+4]

; 16   : {

  00009	c7 42 0c 00 00
	80 3f		 mov	 DWORD PTR [rdx+12], 1065353216 ; 3f800000H

; 73   : 	return Vector(x / f, y / f, z / f);

  00010	48 8b c2	 mov	 rax, rdx
  00013	f3 0f 5e c2	 divss	 xmm0, xmm2
  00017	f3 0f 5e ca	 divss	 xmm1, xmm2

; 16   : {

  0001b	f3 0f 11 02	 movss	 DWORD PTR [rdx], xmm0

; 73   : 	return Vector(x / f, y / f, z / f);

  0001f	f3 0f 10 41 08	 movss	 xmm0, DWORD PTR [rcx+8]

; 16   : {

  00024	f3 0f 11 4a 04	 movss	 DWORD PTR [rdx+4], xmm1

; 73   : 	return Vector(x / f, y / f, z / f);

  00029	f3 0f 5e c2	 divss	 xmm0, xmm2

; 16   : {

  0002d	f3 0f 11 42 08	 movss	 DWORD PTR [rdx+8], xmm0

; 74   : }

  00032	c3		 ret	 0
??KVector@geom@@QEBA?AV01@M@Z ENDP			; geom::Vector::operator/
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??YVector@geom@@QEAA?AV01@AEBV01@@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
vec$ = 24
??YVector@geom@@QEAA?AV01@AEBV01@@Z PROC		; geom::Vector::operator+=, COMDAT

; 98   : 	return Vector(x += vec.x, y += vec.y, z += vec.z);

  00000	f3 41 0f 10 50
	08		 movss	 xmm2, DWORD PTR [r8+8]

; 16   : {

  00006	c7 42 0c 00 00
	80 3f		 mov	 DWORD PTR [rdx+12], 1065353216 ; 3f800000H

; 98   : 	return Vector(x += vec.x, y += vec.y, z += vec.z);

  0000d	48 8b c2	 mov	 rax, rdx
  00010	f3 0f 58 51 08	 addss	 xmm2, DWORD PTR [rcx+8]
  00015	f3 0f 11 51 08	 movss	 DWORD PTR [rcx+8], xmm2
  0001a	f3 41 0f 10 48
	04		 movss	 xmm1, DWORD PTR [r8+4]

; 16   : {

  00020	f3 0f 11 52 08	 movss	 DWORD PTR [rdx+8], xmm2

; 98   : 	return Vector(x += vec.x, y += vec.y, z += vec.z);

  00025	f3 0f 58 49 04	 addss	 xmm1, DWORD PTR [rcx+4]
  0002a	f3 0f 11 49 04	 movss	 DWORD PTR [rcx+4], xmm1
  0002f	f3 41 0f 10 00	 movss	 xmm0, DWORD PTR [r8]

; 16   : {

  00034	f3 0f 11 4a 04	 movss	 DWORD PTR [rdx+4], xmm1

; 98   : 	return Vector(x += vec.x, y += vec.y, z += vec.z);

  00039	f3 0f 58 01	 addss	 xmm0, DWORD PTR [rcx]
  0003d	f3 0f 11 01	 movss	 DWORD PTR [rcx], xmm0

; 16   : {

  00041	f3 0f 11 02	 movss	 DWORD PTR [rdx], xmm0

; 99   : }

  00045	c3		 ret	 0
??YVector@geom@@QEAA?AV01@AEBV01@@Z ENDP		; geom::Vector::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??0AxisAlignedCube@geom@@QEAA@VVector@1@0@Z
_TEXT	SEGMENT
this$ = 8
pos$ = 16
size$ = 24
??0AxisAlignedCube@geom@@QEAA@VVector@1@0@Z PROC	; geom::AxisAlignedCube::AxisAlignedCube, COMDAT

; 10   : {

  00000	8b 02		 mov	 eax, DWORD PTR [rdx]
  00002	89 01		 mov	 DWORD PTR [rcx], eax
  00004	8b 42 04	 mov	 eax, DWORD PTR [rdx+4]
  00007	89 41 04	 mov	 DWORD PTR [rcx+4], eax
  0000a	8b 42 08	 mov	 eax, DWORD PTR [rdx+8]
  0000d	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  00010	8b 42 0c	 mov	 eax, DWORD PTR [rdx+12]
  00013	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  00016	41 8b 00	 mov	 eax, DWORD PTR [r8]
  00019	89 41 10	 mov	 DWORD PTR [rcx+16], eax
  0001c	41 8b 40 04	 mov	 eax, DWORD PTR [r8+4]
  00020	89 41 14	 mov	 DWORD PTR [rcx+20], eax
  00023	41 8b 40 08	 mov	 eax, DWORD PTR [r8+8]
  00027	89 41 18	 mov	 DWORD PTR [rcx+24], eax
  0002a	41 8b 40 0c	 mov	 eax, DWORD PTR [r8+12]
  0002e	89 41 1c	 mov	 DWORD PTR [rcx+28], eax

; 418  : 
; 419  : }

  00031	48 8b c1	 mov	 rax, rcx
  00034	c3		 ret	 0
??0AxisAlignedCube@geom@@QEAA@VVector@1@0@Z ENDP	; geom::AxisAlignedCube::AxisAlignedCube
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??SVector@geom@@QEBAMXZ
_TEXT	SEGMENT
this$ = 8
??SVector@geom@@QEBAMXZ PROC				; geom::Vector::operator~, COMDAT

; 93   : 	return sqrtf(x * x + y * y + z * z);

  00000	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [rcx+4]
  00005	f3 0f 10 01	 movss	 xmm0, DWORD PTR [rcx]
  00009	f3 0f 10 51 08	 movss	 xmm2, DWORD PTR [rcx+8]
  0000e	f3 0f 59 c0	 mulss	 xmm0, xmm0
  00012	f3 0f 59 c9	 mulss	 xmm1, xmm1
  00016	f3 0f 59 d2	 mulss	 xmm2, xmm2
  0001a	f3 0f 58 c1	 addss	 xmm0, xmm1
  0001e	f3 0f 58 c2	 addss	 xmm0, xmm2
  00022	e9 00 00 00 00	 jmp	 sqrtf
??SVector@geom@@QEBAMXZ ENDP				; geom::Vector::operator~
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??_0Vector@geom@@QEAA?AV01@M@Z
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
f$ = 24
??_0Vector@geom@@QEAA?AV01@M@Z PROC			; geom::Vector::operator/=, COMDAT

; 129  : 	return Vector(x /= f, y /= f, z /= f);

  00000	f3 0f 10 59 08	 movss	 xmm3, DWORD PTR [rcx+8]
  00005	f3 0f 10 49 04	 movss	 xmm1, DWORD PTR [rcx+4]
  0000a	f3 0f 10 01	 movss	 xmm0, DWORD PTR [rcx]

; 16   : {

  0000e	c7 42 0c 00 00
	80 3f		 mov	 DWORD PTR [rdx+12], 1065353216 ; 3f800000H

; 129  : 	return Vector(x /= f, y /= f, z /= f);

  00015	48 8b c2	 mov	 rax, rdx
  00018	f3 0f 5e da	 divss	 xmm3, xmm2
  0001c	f3 0f 5e ca	 divss	 xmm1, xmm2
  00020	f3 0f 5e c2	 divss	 xmm0, xmm2
  00024	f3 0f 11 59 08	 movss	 DWORD PTR [rcx+8], xmm3
  00029	f3 0f 11 49 04	 movss	 DWORD PTR [rcx+4], xmm1
  0002e	f3 0f 11 01	 movss	 DWORD PTR [rcx], xmm0

; 16   : {

  00032	f3 0f 11 02	 movss	 DWORD PTR [rdx], xmm0
  00036	f3 0f 11 4a 04	 movss	 DWORD PTR [rdx+4], xmm1
  0003b	f3 0f 11 5a 08	 movss	 DWORD PTR [rdx+8], xmm3

; 130  : }

  00040	c3		 ret	 0
??_0Vector@geom@@QEAA?AV01@M@Z ENDP			; geom::Vector::operator/=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?index@Matrix@geom@@AEBAHHH@Z
_TEXT	SEGMENT
this$dead$ = 8
x$ = 16
y$ = 24
?index@Matrix@geom@@AEBAHHH@Z PROC			; geom::Matrix::index, COMDAT

; 136  : 	return x + (y << 2);

  00000	42 8d 04 82	 lea	 eax, DWORD PTR [rdx+r8*4]

; 137  : }

  00004	c3		 ret	 0
?index@Matrix@geom@@AEBAHHH@Z ENDP			; geom::Matrix::index
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??0Matrix@geom@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0Matrix@geom@@QEAA@XZ PROC				; geom::Matrix::Matrix, COMDAT

; 141  : 	for(int i = 0; i < 16; i++)
; 142  : 	{
; 143  : 		data[i] = 0.0f;

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax
  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  0000d	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
  00011	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  00015	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00019	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax
  0001d	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 144  : 	}
; 145  : }

  00021	48 8b c1	 mov	 rax, rcx
  00024	c3		 ret	 0
??0Matrix@geom@@QEAA@XZ ENDP				; geom::Matrix::Matrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??0Matrix@geom@@QEAA@PEAM@Z
_TEXT	SEGMENT
this$ = 8
data$ = 16
??0Matrix@geom@@QEAA@PEAM@Z PROC			; geom::Matrix::Matrix, COMDAT

; 149  : 	for(int i = 0; i < 16; i++)
; 150  : 	{
; 151  : 		this->data[i] = data[i];

  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00003	48 89 01	 mov	 QWORD PTR [rcx], rax
  00006	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  0000a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0000e	48 8b 42 10	 mov	 rax, QWORD PTR [rdx+16]
  00012	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  00016	48 8b 42 18	 mov	 rax, QWORD PTR [rdx+24]
  0001a	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
  0001e	48 8b 42 20	 mov	 rax, QWORD PTR [rdx+32]
  00022	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  00026	48 8b 42 28	 mov	 rax, QWORD PTR [rdx+40]
  0002a	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  0002e	48 8b 42 30	 mov	 rax, QWORD PTR [rdx+48]
  00032	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax
  00036	48 8b 42 38	 mov	 rax, QWORD PTR [rdx+56]
  0003a	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 152  : 	}
; 153  : }

  0003e	48 8b c1	 mov	 rax, rcx
  00041	c3		 ret	 0
??0Matrix@geom@@QEAA@PEAM@Z ENDP			; geom::Matrix::Matrix
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??AMatrix@geom@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 8
index$ = 16
??AMatrix@geom@@QEAAAEAMH@Z PROC			; geom::Matrix::operator[], COMDAT

; 162  : 	return data[index];

  00000	48 63 c2	 movsxd	 rax, edx
  00003	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]

; 163  : }

  00007	c3		 ret	 0
??AMatrix@geom@@QEAAAEAMH@Z ENDP			; geom::Matrix::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??DMatrix@geom@@QEBA?AV01@AEBV01@@Z
_TEXT	SEGMENT
this$ = 176
__$ReturnUdt$ = 184
mat$ = 192
??DMatrix@geom@@QEBA?AV01@AEBV01@@Z PROC		; geom::Matrix::operator*, COMDAT

; 167  : {

$LN72:
  00000	48 8b c4	 mov	 rax, rsp
  00003	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0000a	0f 29 70 e8	 movaps	 XMMWORD PTR [rax-24], xmm6
  0000e	0f 29 78 d8	 movaps	 XMMWORD PTR [rax-40], xmm7
  00012	44 0f 29 40 c8	 movaps	 XMMWORD PTR [rax-56], xmm8

; 168  : 	Matrix result;
; 169  : 
; 170  : 	for(int i = 0; i < 4; i++)

  00017	4c 8b ca	 mov	 r9, rdx
  0001a	45 0f 57 c0	 xorps	 xmm8, xmm8
  0001e	44 0f 29 48 b8	 movaps	 XMMWORD PTR [rax-72], xmm9
  00023	44 0f 29 50 a8	 movaps	 XMMWORD PTR [rax-88], xmm10
  00028	44 0f 29 58 98	 movaps	 XMMWORD PTR [rax-104], xmm11
  0002d	f3 44 0f 10 09	 movss	 xmm9, DWORD PTR [rcx]
  00032	f3 44 0f 10 51
	04		 movss	 xmm10, DWORD PTR [rcx+4]
  00038	f3 44 0f 10 59
	08		 movss	 xmm11, DWORD PTR [rcx+8]
  0003e	44 0f 29 60 88	 movaps	 XMMWORD PTR [rax-120], xmm12
  00043	f3 44 0f 10 61
	0c		 movss	 xmm12, DWORD PTR [rcx+12]
  00049	44 0f 29 6c 24
	20		 movaps	 XMMWORD PTR [rsp+32], xmm13
  0004f	f3 44 0f 10 69
	10		 movss	 xmm13, DWORD PTR [rcx+16]

; 143  : 		data[i] = 0.0f;

  00055	33 c0		 xor	 eax, eax

; 168  : 	Matrix result;
; 169  : 
; 170  : 	for(int i = 0; i < 4; i++)

  00057	4d 2b c8	 sub	 r9, r8

; 143  : 		data[i] = 0.0f;

  0005a	48 89 02	 mov	 QWORD PTR [rdx], rax
  0005d	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax
  00061	48 89 42 10	 mov	 QWORD PTR [rdx+16], rax
  00065	44 0f 29 74 24
	10		 movaps	 XMMWORD PTR [rsp+16], xmm14
  0006b	f3 44 0f 10 71
	14		 movss	 xmm14, DWORD PTR [rcx+20]
  00071	44 0f 29 3c 24	 movaps	 XMMWORD PTR [rsp], xmm15
  00076	48 89 42 18	 mov	 QWORD PTR [rdx+24], rax
  0007a	48 89 42 20	 mov	 QWORD PTR [rdx+32], rax
  0007e	48 89 42 28	 mov	 QWORD PTR [rdx+40], rax
  00082	f3 44 0f 10 79
	18		 movss	 xmm15, DWORD PTR [rcx+24]
  00088	48 89 42 30	 mov	 QWORD PTR [rdx+48], rax
  0008c	48 89 42 38	 mov	 QWORD PTR [rdx+56], rax

; 168  : 	Matrix result;
; 169  : 
; 170  : 	for(int i = 0; i < 4; i++)

  00090	49 8d 40 10	 lea	 rax, QWORD PTR [r8+16]
  00094	41 b8 04 00 00
	00		 mov	 r8d, 4
  0009a	66 0f 1f 44 00
	00		 npad	 6
$LL9@operator:

; 171  : 	{
; 172  : 		for(int j = 0; j < 4; j++)
; 173  : 		{
; 174  : 			float value = 0.0f;
; 175  : 			for(int k = 0; k < 4; k++)
; 176  : 			{
; 177  : 				value += data[index(k, j)] * mat.data[index(i, k)];

  000a0	f3 0f 10 78 f0	 movss	 xmm7, DWORD PTR [rax-16]
  000a5	f3 0f 10 20	 movss	 xmm4, DWORD PTR [rax]
  000a9	f3 0f 10 68 10	 movss	 xmm5, DWORD PTR [rax+16]
  000ae	41 0f 28 d1	 movaps	 xmm2, xmm9
  000b2	41 0f 28 c2	 movaps	 xmm0, xmm10
  000b6	41 0f 28 cb	 movaps	 xmm1, xmm11
  000ba	f3 0f 59 d7	 mulss	 xmm2, xmm7
  000be	f3 0f 59 c4	 mulss	 xmm0, xmm4
  000c2	f3 0f 59 cd	 mulss	 xmm1, xmm5
  000c6	0f 28 df	 movaps	 xmm3, xmm7
  000c9	f3 0f 10 70 20	 movss	 xmm6, DWORD PTR [rax+32]
  000ce	f3 41 0f 58 d0	 addss	 xmm2, xmm8
  000d3	48 83 c0 04	 add	 rax, 4
  000d7	f3 41 0f 59 dd	 mulss	 xmm3, xmm13
  000dc	f3 0f 58 d0	 addss	 xmm2, xmm0
  000e0	0f 28 c6	 movaps	 xmm0, xmm6
  000e3	f3 41 0f 59 c4	 mulss	 xmm0, xmm12
  000e8	f3 0f 58 d1	 addss	 xmm2, xmm1
  000ec	f3 41 0f 58 d8	 addss	 xmm3, xmm8
  000f1	0f 28 cd	 movaps	 xmm1, xmm5
  000f4	f3 41 0f 59 cf	 mulss	 xmm1, xmm15
  000f9	f3 0f 58 d0	 addss	 xmm2, xmm0
  000fd	0f 28 c4	 movaps	 xmm0, xmm4

; 178  : 			}
; 179  : 			result[index(i, j)] = value;

  00100	f3 41 0f 11 54
	01 ec		 movss	 DWORD PTR [r9+rax-20], xmm2
  00107	f3 41 0f 59 c6	 mulss	 xmm0, xmm14
  0010c	f3 0f 58 d8	 addss	 xmm3, xmm0
  00110	0f 28 d7	 movaps	 xmm2, xmm7
  00113	f3 0f 59 51 20	 mulss	 xmm2, DWORD PTR [rcx+32]
  00118	f3 0f 59 79 30	 mulss	 xmm7, DWORD PTR [rcx+48]
  0011d	0f 28 c6	 movaps	 xmm0, xmm6
  00120	f3 0f 58 d9	 addss	 xmm3, xmm1
  00124	0f 28 cd	 movaps	 xmm1, xmm5
  00127	f3 41 0f 58 d0	 addss	 xmm2, xmm8
  0012c	f3 41 0f 58 f8	 addss	 xmm7, xmm8
  00131	f3 0f 59 41 1c	 mulss	 xmm0, DWORD PTR [rcx+28]
  00136	f3 0f 59 49 28	 mulss	 xmm1, DWORD PTR [rcx+40]
  0013b	f3 0f 59 69 38	 mulss	 xmm5, DWORD PTR [rcx+56]
  00140	f3 0f 58 d8	 addss	 xmm3, xmm0
  00144	0f 28 c4	 movaps	 xmm0, xmm4
  00147	f3 41 0f 11 5c
	01 fc		 movss	 DWORD PTR [r9+rax-4], xmm3
  0014e	f3 0f 59 41 24	 mulss	 xmm0, DWORD PTR [rcx+36]
  00153	f3 0f 59 61 34	 mulss	 xmm4, DWORD PTR [rcx+52]
  00158	f3 0f 58 d0	 addss	 xmm2, xmm0
  0015c	0f 28 c6	 movaps	 xmm0, xmm6
  0015f	f3 0f 58 fc	 addss	 xmm7, xmm4
  00163	f3 0f 59 41 2c	 mulss	 xmm0, DWORD PTR [rcx+44]
  00168	f3 0f 59 71 3c	 mulss	 xmm6, DWORD PTR [rcx+60]
  0016d	f3 0f 58 d1	 addss	 xmm2, xmm1
  00171	f3 0f 58 fd	 addss	 xmm7, xmm5
  00175	f3 0f 58 d0	 addss	 xmm2, xmm0
  00179	f3 0f 58 fe	 addss	 xmm7, xmm6
  0017d	f3 41 0f 11 54
	01 0c		 movss	 DWORD PTR [r9+rax+12], xmm2
  00184	f3 41 0f 11 7c
	01 1c		 movss	 DWORD PTR [r9+rax+28], xmm7
  0018b	49 ff c8	 dec	 r8
  0018e	0f 85 0c ff ff
	ff		 jne	 $LL9@operator

; 180  : 		}
; 181  : 	}
; 182  : 
; 183  : 	return result;
; 184  : }

  00194	44 0f 28 6c 24
	20		 movaps	 xmm13, XMMWORD PTR [rsp+32]
  0019a	44 0f 28 74 24
	10		 movaps	 xmm14, XMMWORD PTR [rsp+16]
  001a0	44 0f 28 3c 24	 movaps	 xmm15, XMMWORD PTR [rsp]
  001a5	4c 8d 9c 24 a8
	00 00 00	 lea	 r11, QWORD PTR [rsp+168]
  001ad	48 8b c2	 mov	 rax, rdx
  001b0	41 0f 28 73 e8	 movaps	 xmm6, XMMWORD PTR [r11-24]
  001b5	41 0f 28 7b d8	 movaps	 xmm7, XMMWORD PTR [r11-40]
  001ba	45 0f 28 43 c8	 movaps	 xmm8, XMMWORD PTR [r11-56]
  001bf	45 0f 28 4b b8	 movaps	 xmm9, XMMWORD PTR [r11-72]
  001c4	45 0f 28 53 a8	 movaps	 xmm10, XMMWORD PTR [r11-88]
  001c9	45 0f 28 5b 98	 movaps	 xmm11, XMMWORD PTR [r11-104]
  001ce	45 0f 28 63 88	 movaps	 xmm12, XMMWORD PTR [r11-120]
  001d3	49 8b e3	 mov	 rsp, r11
  001d6	c3		 ret	 0
??DMatrix@geom@@QEBA?AV01@AEBV01@@Z ENDP		; geom::Matrix::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ??4Matrix@geom@@QEAAAEAV01@AEBV01@@Z
_TEXT	SEGMENT
this$ = 8
mat$ = 16
??4Matrix@geom@@QEAAAEAV01@AEBV01@@Z PROC		; geom::Matrix::operator=, COMDAT

; 212  : 	for(int i = 0; i < 16; i++)

  00000	4c 8d 41 04	 lea	 r8, QWORD PTR [rcx+4]
  00004	48 2b d1	 sub	 rdx, rcx
  00007	41 b9 02 00 00
	00		 mov	 r9d, 2
  0000d	0f 1f 00	 npad	 3
$LL3@operator:

; 213  : 	{
; 214  : 		data[i] = mat.data[i];

  00010	42 8b 44 02 fc	 mov	 eax, DWORD PTR [rdx+r8-4]
  00015	4d 8d 40 20	 lea	 r8, QWORD PTR [r8+32]
  00019	41 89 40 dc	 mov	 DWORD PTR [r8-36], eax
  0001d	42 8b 44 02 e0	 mov	 eax, DWORD PTR [rdx+r8-32]
  00022	41 89 40 e0	 mov	 DWORD PTR [r8-32], eax
  00026	42 8b 44 02 e4	 mov	 eax, DWORD PTR [rdx+r8-28]
  0002b	41 89 40 e4	 mov	 DWORD PTR [r8-28], eax
  0002f	42 8b 44 02 e8	 mov	 eax, DWORD PTR [rdx+r8-24]
  00034	41 89 40 e8	 mov	 DWORD PTR [r8-24], eax
  00038	42 8b 44 02 ec	 mov	 eax, DWORD PTR [rdx+r8-20]
  0003d	41 89 40 ec	 mov	 DWORD PTR [r8-20], eax
  00041	42 8b 44 02 f0	 mov	 eax, DWORD PTR [rdx+r8-16]
  00046	41 89 40 f0	 mov	 DWORD PTR [r8-16], eax
  0004a	42 8b 44 02 f4	 mov	 eax, DWORD PTR [rdx+r8-12]
  0004f	41 89 40 f4	 mov	 DWORD PTR [r8-12], eax
  00053	42 8b 44 02 f8	 mov	 eax, DWORD PTR [rdx+r8-8]
  00058	41 89 40 f8	 mov	 DWORD PTR [r8-8], eax
  0005c	49 ff c9	 dec	 r9
  0005f	75 af		 jne	 SHORT $LL3@operator

; 215  : 	}
; 216  : 
; 217  : 	return *this;

  00061	48 8b c1	 mov	 rax, rcx

; 218  : }

  00064	c3		 ret	 0
??4Matrix@geom@@QEAAAEAV01@AEBV01@@Z ENDP		; geom::Matrix::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?identity@Matrix@geom@@SA?AV12@XZ
_TEXT	SEGMENT
__$ReturnUdt$ = 8
?identity@Matrix@geom@@SA?AV12@XZ PROC			; geom::Matrix::identity, COMDAT

; 143  : 		data[i] = 0.0f;

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax
  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  0000d	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
  00011	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  00015	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00019	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax
  0001d	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 222  : 	Matrix result;
; 223  : 	result[0] = 1.0f;

  00021	c7 01 00 00 80
	3f		 mov	 DWORD PTR [rcx], 1065353216 ; 3f800000H

; 224  : 	result[5] = 1.0f;

  00027	c7 41 14 00 00
	80 3f		 mov	 DWORD PTR [rcx+20], 1065353216 ; 3f800000H

; 225  : 	result[10] = 1.0f;

  0002e	c7 41 28 00 00
	80 3f		 mov	 DWORD PTR [rcx+40], 1065353216 ; 3f800000H

; 226  : 	result[15] = 1.0f;

  00035	c7 41 3c 00 00
	80 3f		 mov	 DWORD PTR [rcx+60], 1065353216 ; 3f800000H

; 227  : 
; 228  : 	return result;

  0003c	48 8b c1	 mov	 rax, rcx

; 229  : }

  0003f	c3		 ret	 0
?identity@Matrix@geom@@SA?AV12@XZ ENDP			; geom::Matrix::identity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?scale@Matrix@geom@@SA?AV12@MMM@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
y$ = 24
z$ = 32
?scale@Matrix@geom@@SA?AV12@MMM@Z PROC			; geom::Matrix::scale, COMDAT

; 143  : 		data[i] = 0.0f;

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax
  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  0000d	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
  00011	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  00015	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00019	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax
  0001d	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 233  : 	Matrix result;
; 234  : 	result[0] = x;
; 235  : 	result[5] = y;
; 236  : 	result[10] = z;
; 237  : 	result[15] = 1.0f;

  00021	c7 41 3c 00 00
	80 3f		 mov	 DWORD PTR [rcx+60], 1065353216 ; 3f800000H
  00028	f3 0f 11 09	 movss	 DWORD PTR [rcx], xmm1
  0002c	f3 0f 11 51 14	 movss	 DWORD PTR [rcx+20], xmm2
  00031	f3 0f 11 59 28	 movss	 DWORD PTR [rcx+40], xmm3

; 238  : 
; 239  : 	return result;

  00036	48 8b c1	 mov	 rax, rcx

; 240  : }

  00039	c3		 ret	 0
?scale@Matrix@geom@@SA?AV12@MMM@Z ENDP			; geom::Matrix::scale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?translate@Matrix@geom@@SA?AV12@MMM@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
x$ = 16
y$ = 24
z$ = 32
?translate@Matrix@geom@@SA?AV12@MMM@Z PROC		; geom::Matrix::translate, COMDAT

; 143  : 		data[i] = 0.0f;

  00000	33 c0		 xor	 eax, eax
  00002	48 89 01	 mov	 QWORD PTR [rcx], rax
  00005	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00009	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
  0000d	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
  00011	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  00015	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00019	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax
  0001d	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 144  : 	}
; 145  : }
; 146  : 
; 147  : Matrix::Matrix(float* data)
; 148  : {
; 149  : 	for(int i = 0; i < 16; i++)
; 150  : 	{
; 151  : 		this->data[i] = data[i];
; 152  : 	}
; 153  : }
; 154  : 
; 155  : const float& Matrix::operator[](int index) const
; 156  : {
; 157  : 	return data[index];
; 158  : }
; 159  : 
; 160  : float& Matrix::operator[](int index)
; 161  : {
; 162  : 	return data[index];
; 163  : }
; 164  : 
; 165  : 
; 166  : Matrix Matrix::operator*(const Matrix& mat) const
; 167  : {
; 168  : 	Matrix result;
; 169  : 
; 170  : 	for(int i = 0; i < 4; i++)
; 171  : 	{
; 172  : 		for(int j = 0; j < 4; j++)
; 173  : 		{
; 174  : 			float value = 0.0f;
; 175  : 			for(int k = 0; k < 4; k++)
; 176  : 			{
; 177  : 				value += data[index(k, j)] * mat.data[index(i, k)];
; 178  : 			}
; 179  : 			result[index(i, j)] = value;
; 180  : 		}
; 181  : 	}
; 182  : 
; 183  : 	return result;
; 184  : }
; 185  : 
; 186  : Matrix Matrix::operator*(const float& scalar) const
; 187  : {
; 188  : 	Matrix result;
; 189  : 
; 190  : 	for(int i = 0; i < 16; i++)
; 191  : 	{
; 192  : 		result[i] = data[i] * scalar;
; 193  : 	}
; 194  : 
; 195  : 	return result;
; 196  : }
; 197  : 
; 198  : Vector Matrix::operator*(const Vector& vert) const
; 199  : {
; 200  : 	Vector result;
; 201  : 
; 202  : 	result.x = vert.x * data[0] + vert.y * data[1] + vert.z * data[2] + vert.w * data[3];
; 203  : 	result.y = vert.x * data[4] + vert.y * data[5] + vert.z * data[6] + vert.w * data[7];
; 204  : 	result.z = vert.x * data[8] + vert.y * data[9] + vert.z * data[10] + vert.w * data[11];
; 205  : 	result.w = vert.x * data[12] + vert.y * data[13] + vert.z * data[14] + vert.w * data[15];
; 206  : 
; 207  : 	return result;
; 208  : }
; 209  : 
; 210  : Matrix& Matrix::operator=(const Matrix& mat)
; 211  : {
; 212  : 	for(int i = 0; i < 16; i++)
; 213  : 	{
; 214  : 		data[i] = mat.data[i];
; 215  : 	}
; 216  : 
; 217  : 	return *this;
; 218  : }
; 219  : 
; 220  : Matrix Matrix::identity()
; 221  : {
; 222  : 	Matrix result;
; 223  : 	result[0] = 1.0f;

  00021	c7 01 00 00 80
	3f		 mov	 DWORD PTR [rcx], 1065353216 ; 3f800000H

; 244  : 	Matrix result = identity();
; 245  : 	result[3] = x;

  00027	f3 0f 11 49 0c	 movss	 DWORD PTR [rcx+12], xmm1

; 246  : 	result[7] = y;

  0002c	f3 0f 11 51 1c	 movss	 DWORD PTR [rcx+28], xmm2

; 247  : 	result[11] = z;

  00031	f3 0f 11 59 2c	 movss	 DWORD PTR [rcx+44], xmm3

; 224  : 	result[5] = 1.0f;

  00036	c7 41 14 00 00
	80 3f		 mov	 DWORD PTR [rcx+20], 1065353216 ; 3f800000H

; 225  : 	result[10] = 1.0f;

  0003d	c7 41 28 00 00
	80 3f		 mov	 DWORD PTR [rcx+40], 1065353216 ; 3f800000H

; 226  : 	result[15] = 1.0f;

  00044	c7 41 3c 00 00
	80 3f		 mov	 DWORD PTR [rcx+60], 1065353216 ; 3f800000H

; 248  : 
; 249  : 	return result;

  0004b	48 8b c1	 mov	 rax, rcx

; 250  : }

  0004e	c3		 ret	 0
?translate@Matrix@geom@@SA?AV12@MMM@Z ENDP		; geom::Matrix::translate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?rotate@Matrix@geom@@SA?AV12@MMMM@Z
_TEXT	SEGMENT
matData$ = 32
__$ArrayPad$ = 96
__$ReturnUdt$ = 192
degrees$ = 200
x$ = 208
y$ = 216
z$ = 224
?rotate@Matrix@geom@@SA?AV12@MMMM@Z PROC		; geom::Matrix::rotate, COMDAT

; 277  : {

$LN12:
  00000	48 8b c4	 mov	 rax, rsp
  00003	53		 push	 rbx
  00004	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000b	0f 29 70 e8	 movaps	 XMMWORD PTR [rax-24], xmm6
  0000f	0f 29 78 d8	 movaps	 XMMWORD PTR [rax-40], xmm7
  00013	44 0f 29 40 c8	 movaps	 XMMWORD PTR [rax-56], xmm8
  00018	44 0f 29 48 b8	 movaps	 XMMWORD PTR [rax-72], xmm9
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0002c	0f 57 f6	 xorps	 xmm6, xmm6
  0002f	44 0f 28 c3	 movaps	 xmm8, xmm3
  00033	44 0f 28 ca	 movaps	 xmm9, xmm2
  00037	48 8b d9	 mov	 rbx, rcx

; 278  : 	float s = (float)sin(degrees * M_PI / 180.0f);

  0003a	f3 0f 5a f1	 cvtss2sd xmm6, xmm1
  0003e	f2 0f 59 35 00
	00 00 00	 mulsd	 xmm6, QWORD PTR __real@400921fb54442d18
  00046	f2 0f 5e 35 00
	00 00 00	 divsd	 xmm6, QWORD PTR __real@4066800000000000
  0004e	0f 28 c6	 movaps	 xmm0, xmm6
  00051	e8 00 00 00 00	 call	 sin
  00056	0f 57 ff	 xorps	 xmm7, xmm7
  00059	f2 0f 5a f8	 cvtsd2ss xmm7, xmm0

; 279  : 	float c = (float)cos(degrees * M_PI / 180.0f);

  0005d	0f 28 c6	 movaps	 xmm0, xmm6
  00060	e8 00 00 00 00	 call	 cos

; 280  : 
; 281  : 	float matData[] = {
; 282  : 		x + (y + z) * c, z * -s, y * s, 0.0f,

  00065	0f 28 d7	 movaps	 xmm2, xmm7
  00068	41 0f 28 c8	 movaps	 xmm1, xmm8
  0006c	0f 57 ed	 xorps	 xmm5, xmm5
  0006f	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR matData$[rsp+12], 0

; 283  : 		z * s, y + (x + z) * c, x * -s, 0.0f,

  00077	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR matData$[rsp+28], 0
  0007f	0f 28 df	 movaps	 xmm3, xmm7

; 284  : 		y * -s, x * s, z + (x + y) * c, 0.0f,

  00082	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR matData$[rsp+44], 0
  0008a	f3 41 0f 59 f9	 mulss	 xmm7, xmm9
  0008f	f3 41 0f 59 d8	 mulss	 xmm3, xmm8
  00094	f3 0f 10 b4 24
	e0 00 00 00	 movss	 xmm6, DWORD PTR z$[rsp]
  0009d	f3 0f 10 25 00
	00 00 00	 movss	 xmm4, DWORD PTR __xmm@80000000800000008000000080000000
  000a5	f2 0f 5a e8	 cvtsd2ss xmm5, xmm0
  000a9	f3 0f 59 d6	 mulss	 xmm2, xmm6
  000ad	0f 28 c2	 movaps	 xmm0, xmm2
  000b0	0f 57 c4	 xorps	 xmm0, xmm4
  000b3	f3 0f 58 ce	 addss	 xmm1, xmm6
  000b7	f3 0f 11 44 24
	24		 movss	 DWORD PTR matData$[rsp+4], xmm0
  000bd	f3 0f 11 5c 24
	28		 movss	 DWORD PTR matData$[rsp+8], xmm3
  000c3	0f 28 c7	 movaps	 xmm0, xmm7
  000c6	0f 57 dc	 xorps	 xmm3, xmm4
  000c9	0f 57 c4	 xorps	 xmm0, xmm4
  000cc	f3 0f 59 cd	 mulss	 xmm1, xmm5
  000d0	f3 0f 11 44 24
	38		 movss	 DWORD PTR matData$[rsp+24], xmm0
  000d6	f3 0f 11 54 24
	30		 movss	 DWORD PTR matData$[rsp+16], xmm2
  000dc	f3 0f 11 5c 24
	40		 movss	 DWORD PTR matData$[rsp+32], xmm3

; 151  : 		this->data[i] = data[i];

  000e2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR matData$[rsp+24]
  000e7	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@3f800000000000000000000000000000

; 280  : 
; 281  : 	float matData[] = {
; 282  : 		x + (y + z) * c, z * -s, y * s, 0.0f,

  000ee	f3 41 0f 58 c9	 addss	 xmm1, xmm9

; 284  : 		y * -s, x * s, z + (x + y) * c, 0.0f,

  000f3	f3 0f 11 7c 24
	44		 movss	 DWORD PTR matData$[rsp+36], xmm7
  000f9	f3 0f 11 4c 24
	20		 movss	 DWORD PTR matData$[rsp], xmm1

; 151  : 		this->data[i] = data[i];

  000ff	48 8b 44 24 20	 mov	 rax, QWORD PTR matData$[rsp]

; 283  : 		z * s, y + (x + z) * c, x * -s, 0.0f,

  00104	41 0f 28 c9	 movaps	 xmm1, xmm9
  00108	f3 0f 58 ce	 addss	 xmm1, xmm6

; 151  : 		this->data[i] = data[i];

  0010c	48 89 03	 mov	 QWORD PTR [rbx], rax
  0010f	48 8b 44 24 28	 mov	 rax, QWORD PTR matData$[rsp+8]

; 284  : 		y * -s, x * s, z + (x + y) * c, 0.0f,

  00114	f3 45 0f 58 c8	 addss	 xmm9, xmm8

; 151  : 		this->data[i] = data[i];

  00119	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax

; 283  : 		z * s, y + (x + z) * c, x * -s, 0.0f,

  0011d	f3 0f 59 cd	 mulss	 xmm1, xmm5
  00121	f3 41 0f 58 c8	 addss	 xmm1, xmm8

; 284  : 		y * -s, x * s, z + (x + y) * c, 0.0f,

  00126	f3 44 0f 59 cd	 mulss	 xmm9, xmm5
  0012b	f3 0f 11 4c 24
	34		 movss	 DWORD PTR matData$[rsp+20], xmm1

; 151  : 		this->data[i] = data[i];

  00131	48 8b 44 24 30	 mov	 rax, QWORD PTR matData$[rsp+16]

; 284  : 		y * -s, x * s, z + (x + y) * c, 0.0f,

  00136	f3 44 0f 58 ce	 addss	 xmm9, xmm6

; 151  : 		this->data[i] = data[i];

  0013b	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  0013f	48 89 4b 18	 mov	 QWORD PTR [rbx+24], rcx
  00143	48 8b 4c 24 40	 mov	 rcx, QWORD PTR matData$[rsp+32]

; 284  : 		y * -s, x * s, z + (x + y) * c, 0.0f,

  00148	f3 44 0f 11 4c
	24 48		 movss	 DWORD PTR matData$[rsp+40], xmm9

; 151  : 		this->data[i] = data[i];

  0014f	48 89 4b 20	 mov	 QWORD PTR [rbx+32], rcx
  00153	48 8b 4c 24 48	 mov	 rcx, QWORD PTR matData$[rsp+40]

; 285  : 		0.0f, 0.0f, 0.0f, 1.0f
; 286  : 	};
; 287  : 
; 288  : 	return Matrix(matData);

  00158	48 8b c3	 mov	 rax, rbx

; 151  : 		this->data[i] = data[i];

  0015b	48 89 4b 28	 mov	 QWORD PTR [rbx+40], rcx
  0015f	66 48 0f d6 43
	30		 movq	 QWORD PTR [rbx+48], xmm0
  00165	66 0f 73 d8 08	 psrldq	 xmm0, 8
  0016a	66 48 0f d6 43
	38		 movq	 QWORD PTR [rbx+56], xmm0

; 289  : }

  00170	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00175	48 33 cc	 xor	 rcx, rsp
  00178	e8 00 00 00 00	 call	 __security_check_cookie
  0017d	4c 8d 9c 24 b0
	00 00 00	 lea	 r11, QWORD PTR [rsp+176]
  00185	41 0f 28 73 f0	 movaps	 xmm6, XMMWORD PTR [r11-16]
  0018a	41 0f 28 7b e0	 movaps	 xmm7, XMMWORD PTR [r11-32]
  0018f	45 0f 28 43 d0	 movaps	 xmm8, XMMWORD PTR [r11-48]
  00194	45 0f 28 4b c0	 movaps	 xmm9, XMMWORD PTR [r11-64]
  00199	49 8b e3	 mov	 rsp, r11
  0019c	5b		 pop	 rbx
  0019d	c3		 ret	 0
?rotate@Matrix@geom@@SA?AV12@MMMM@Z ENDP		; geom::Matrix::rotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?perspective@Matrix@geom@@SA?AV12@MMMM@Z
_TEXT	SEGMENT
matData$ = 32
__$ArrayPad$ = 96
__$ReturnUdt$ = 192
fov$ = 200
aspect$ = 208
n$ = 216
f$ = 224
?perspective@Matrix@geom@@SA?AV12@MMMM@Z PROC		; geom::Matrix::perspective, COMDAT

; 292  : {

$LN12:
  00000	48 8b c4	 mov	 rax, rsp
  00003	53		 push	 rbx
  00004	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000b	0f 29 70 e8	 movaps	 XMMWORD PTR [rax-24], xmm6
  0000f	0f 29 78 d8	 movaps	 XMMWORD PTR [rax-40], xmm7
  00013	44 0f 29 40 c8	 movaps	 XMMWORD PTR [rax-56], xmm8
  00018	44 0f 29 50 b8	 movaps	 XMMWORD PTR [rax-72], xmm10
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 293  : 	float frustumDepth = f - n;

  0002c	f3 0f 10 84 24
	e0 00 00 00	 movss	 xmm0, DWORD PTR f$[rsp]

; 294  :     float oneOverDepth = 1 / frustumDepth;

  00035	f3 0f 10 35 00
	00 00 00	 movss	 xmm6, DWORD PTR __real@3f800000
  0003d	44 0f 28 d3	 movaps	 xmm10, xmm3
  00041	0f 28 fa	 movaps	 xmm7, xmm2
  00044	48 8b d9	 mov	 rbx, rcx
  00047	44 0f 28 c6	 movaps	 xmm8, xmm6
  0004b	f3 41 0f 5c c2	 subss	 xmm0, xmm10
  00050	f3 44 0f 5e c0	 divss	 xmm8, xmm0
  00055	0f 57 c0	 xorps	 xmm0, xmm0

; 295  : 
; 296  : 	float matData[] = {
; 297  : 		(1.0f / (float)tan(fov * M_PI / 360.0f)) / aspect, 0.0f, 0.0f, 0.0f,

  00058	f3 0f 5a c1	 cvtss2sd xmm0, xmm1
  0005c	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@400921fb54442d18
  00064	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@4076800000000000
  0006c	e8 00 00 00 00	 call	 tan

; 298  : 		0.0f, 1.0f / (float)tan(fov * M_PI / 360.0f), 0.0f, 0.0f,
; 299  : 		0.0f, 0.0f, f * oneOverDepth, -f * n * oneOverDepth,

  00071	f3 44 0f 59 94
	24 e0 00 00 00	 mulss	 xmm10, DWORD PTR f$[rsp]
  0007b	0f 57 c9	 xorps	 xmm1, xmm1
  0007e	48 c7 44 24 24
	00 00 00 00	 mov	 QWORD PTR matData$[rsp+4], 0
  00087	48 c7 44 24 2c
	00 00 00 00	 mov	 QWORD PTR matData$[rsp+12], 0
  00090	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR matData$[rsp+24], 0
  00099	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
  0009d	f3 45 0f 59 d0	 mulss	 xmm10, xmm8

; 151  : 		this->data[i] = data[i];

  000a2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR matData$[rsp+24]

; 298  : 		0.0f, 1.0f / (float)tan(fov * M_PI / 360.0f), 0.0f, 0.0f,
; 299  : 		0.0f, 0.0f, f * oneOverDepth, -f * n * oneOverDepth,

  000a7	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR matData$[rsp+32], 0
  000b0	44 0f 57 15 00
	00 00 00	 xorps	 xmm10, DWORD PTR __xmm@80000000800000008000000080000000
  000b8	f3 0f 5e f1	 divss	 xmm6, xmm1
  000bc	f3 44 0f 11 54
	24 4c		 movss	 DWORD PTR matData$[rsp+44], xmm10
  000c3	0f 28 c6	 movaps	 xmm0, xmm6
  000c6	f3 0f 11 74 24
	34		 movss	 DWORD PTR matData$[rsp+20], xmm6
  000cc	f3 0f 5e c7	 divss	 xmm0, xmm7
  000d0	f3 0f 11 44 24
	20		 movss	 DWORD PTR matData$[rsp], xmm0

; 151  : 		this->data[i] = data[i];

  000d6	48 8b 44 24 20	 mov	 rax, QWORD PTR matData$[rsp]

; 298  : 		0.0f, 1.0f / (float)tan(fov * M_PI / 360.0f), 0.0f, 0.0f,
; 299  : 		0.0f, 0.0f, f * oneOverDepth, -f * n * oneOverDepth,

  000db	41 0f 28 c0	 movaps	 xmm0, xmm8

; 151  : 		this->data[i] = data[i];

  000df	48 89 03	 mov	 QWORD PTR [rbx], rax
  000e2	48 8b 44 24 28	 mov	 rax, QWORD PTR matData$[rsp+8]

; 298  : 		0.0f, 1.0f / (float)tan(fov * M_PI / 360.0f), 0.0f, 0.0f,
; 299  : 		0.0f, 0.0f, f * oneOverDepth, -f * n * oneOverDepth,

  000e7	f3 0f 59 84 24
	e0 00 00 00	 mulss	 xmm0, DWORD PTR f$[rsp]

; 151  : 		this->data[i] = data[i];

  000f0	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
  000f4	48 8b 44 24 30	 mov	 rax, QWORD PTR matData$[rsp+16]

; 298  : 		0.0f, 1.0f / (float)tan(fov * M_PI / 360.0f), 0.0f, 0.0f,
; 299  : 		0.0f, 0.0f, f * oneOverDepth, -f * n * oneOverDepth,

  000f9	f3 0f 11 44 24
	48		 movss	 DWORD PTR matData$[rsp+40], xmm0
  000ff	0f 28 05 00 00
	00 00		 movaps	 xmm0, XMMWORD PTR __xmm@000000003f8000000000000000000000

; 151  : 		this->data[i] = data[i];

  00106	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
  0010a	48 89 4b 18	 mov	 QWORD PTR [rbx+24], rcx
  0010e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR matData$[rsp+32]
  00113	48 89 4b 20	 mov	 QWORD PTR [rbx+32], rcx
  00117	48 8b 4c 24 48	 mov	 rcx, QWORD PTR matData$[rsp+40]

; 300  : 		0.0f, 0.0f, 1.0f, 0.0f
; 301  : 	};
; 302  : 
; 303  : 	return Matrix(matData);

  0011c	48 8b c3	 mov	 rax, rbx

; 151  : 		this->data[i] = data[i];

  0011f	48 89 4b 28	 mov	 QWORD PTR [rbx+40], rcx
  00123	66 48 0f d6 43
	30		 movq	 QWORD PTR [rbx+48], xmm0
  00129	66 0f 73 d8 08	 psrldq	 xmm0, 8
  0012e	66 48 0f d6 43
	38		 movq	 QWORD PTR [rbx+56], xmm0

; 304  : }

  00134	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00139	48 33 cc	 xor	 rcx, rsp
  0013c	e8 00 00 00 00	 call	 __security_check_cookie
  00141	4c 8d 9c 24 b0
	00 00 00	 lea	 r11, QWORD PTR [rsp+176]
  00149	41 0f 28 73 f0	 movaps	 xmm6, XMMWORD PTR [r11-16]
  0014e	41 0f 28 7b e0	 movaps	 xmm7, XMMWORD PTR [r11-32]
  00153	45 0f 28 43 d0	 movaps	 xmm8, XMMWORD PTR [r11-48]
  00158	45 0f 28 53 c0	 movaps	 xmm10, XMMWORD PTR [r11-64]
  0015d	49 8b e3	 mov	 rsp, r11
  00160	5b		 pop	 rbx
  00161	c3		 ret	 0
?perspective@Matrix@geom@@SA?AV12@MMMM@Z ENDP		; geom::Matrix::perspective
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?getNormal@AxisAlignedXY@geom@@UEAA?AVVector@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?getNormal@AxisAlignedXY@geom@@UEAA?AVVector@2@XZ PROC	; geom::AxisAlignedXY::getNormal, COMDAT

; 16   : {

  00000	33 c0		 xor	 eax, eax
  00002	c7 42 08 00 00
	80 3f		 mov	 DWORD PTR [rdx+8], 1065353216 ; 3f800000H
  00009	c7 42 0c 00 00
	80 3f		 mov	 DWORD PTR [rdx+12], 1065353216 ; 3f800000H
  00010	48 89 02	 mov	 QWORD PTR [rdx], rax

; 375  : 	return Vector(0.0f, 0.0f, 1.0f);

  00013	48 8b c2	 mov	 rax, rdx

; 376  : }

  00016	c3		 ret	 0
?getNormal@AxisAlignedXY@geom@@UEAA?AVVector@2@XZ ENDP	; geom::AxisAlignedXY::getNormal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?inside@AxisAlignedXY@geom@@UEAA_NVVector@2@@Z
_TEXT	SEGMENT
this$ = 8
vec$ = 16
?inside@AxisAlignedXY@geom@@UEAA_NVVector@2@@Z PROC	; geom::AxisAlignedXY::inside, COMDAT

; 380  : 	return vec.x >= pos.x & vec.x <= pos.x + width & vec.y >= pos.y & vec.y <= pos.y + height;

  00000	f3 0f 10 51 08	 movss	 xmm2, DWORD PTR [rcx+8]
  00005	f3 0f 10 61 0c	 movss	 xmm4, DWORD PTR [rcx+12]
  0000a	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [rdx]
  0000e	0f 28 c2	 movaps	 xmm0, xmm2
  00011	f3 0f 58 41 18	 addss	 xmm0, DWORD PTR [rcx+24]
  00016	f3 0f 10 5a 04	 movss	 xmm3, DWORD PTR [rdx+4]
  0001b	33 d2		 xor	 edx, edx
  0001d	8b c2		 mov	 eax, edx
  0001f	0f 2f c1	 comiss	 xmm0, xmm1
  00022	0f 28 c4	 movaps	 xmm0, xmm4
  00025	f3 0f 58 41 1c	 addss	 xmm0, DWORD PTR [rcx+28]
  0002a	0f 93 c0	 setae	 al
  0002d	8b ca		 mov	 ecx, edx
  0002f	0f 2f c3	 comiss	 xmm0, xmm3
  00032	0f 93 c1	 setae	 cl
  00035	23 c1		 and	 eax, ecx
  00037	8b ca		 mov	 ecx, edx
  00039	0f 2f ca	 comiss	 xmm1, xmm2
  0003c	0f 93 c1	 setae	 cl
  0003f	23 c1		 and	 eax, ecx
  00041	0f 2f dc	 comiss	 xmm3, xmm4
  00044	0f 93 c2	 setae	 dl
  00047	23 c2		 and	 eax, edx

; 381  : }

  00049	c3		 ret	 0
?inside@AxisAlignedXY@geom@@UEAA_NVVector@2@@Z ENDP	; geom::AxisAlignedXY::inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?getNormal@AxisAlignedXZ@geom@@UEAA?AVVector@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?getNormal@AxisAlignedXZ@geom@@UEAA?AVVector@2@XZ PROC	; geom::AxisAlignedXZ::getNormal, COMDAT

; 16   : {

  00000	33 c0		 xor	 eax, eax
  00002	48 c7 42 04 00
	00 80 3f	 mov	 QWORD PTR [rdx+4], 1065353216 ; 3f800000H
  0000a	c7 42 0c 00 00
	80 3f		 mov	 DWORD PTR [rdx+12], 1065353216 ; 3f800000H
  00011	89 02		 mov	 DWORD PTR [rdx], eax

; 391  : 	return Vector(0.0f, 1.0f, 0.0f);

  00013	48 8b c2	 mov	 rax, rdx

; 392  : }

  00016	c3		 ret	 0
?getNormal@AxisAlignedXZ@geom@@UEAA?AVVector@2@XZ ENDP	; geom::AxisAlignedXZ::getNormal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?inside@AxisAlignedXZ@geom@@UEAA_NVVector@2@@Z
_TEXT	SEGMENT
this$ = 8
vec$ = 16
?inside@AxisAlignedXZ@geom@@UEAA_NVVector@2@@Z PROC	; geom::AxisAlignedXZ::inside, COMDAT

; 396  : 	return vec.x >= pos.x & vec.x <= pos.x + width & vec.z >= pos.z & vec.z <= pos.z + height;

  00000	f3 0f 10 51 08	 movss	 xmm2, DWORD PTR [rcx+8]
  00005	f3 0f 10 61 10	 movss	 xmm4, DWORD PTR [rcx+16]
  0000a	f3 0f 10 0a	 movss	 xmm1, DWORD PTR [rdx]
  0000e	0f 28 c2	 movaps	 xmm0, xmm2
  00011	f3 0f 58 41 18	 addss	 xmm0, DWORD PTR [rcx+24]
  00016	f3 0f 10 5a 08	 movss	 xmm3, DWORD PTR [rdx+8]
  0001b	33 d2		 xor	 edx, edx
  0001d	8b c2		 mov	 eax, edx
  0001f	0f 2f c1	 comiss	 xmm0, xmm1
  00022	0f 28 c4	 movaps	 xmm0, xmm4
  00025	f3 0f 58 41 1c	 addss	 xmm0, DWORD PTR [rcx+28]
  0002a	0f 93 c0	 setae	 al
  0002d	8b ca		 mov	 ecx, edx
  0002f	0f 2f c3	 comiss	 xmm0, xmm3
  00032	0f 93 c1	 setae	 cl
  00035	23 c1		 and	 eax, ecx
  00037	8b ca		 mov	 ecx, edx
  00039	0f 2f ca	 comiss	 xmm1, xmm2
  0003c	0f 93 c1	 setae	 cl
  0003f	23 c1		 and	 eax, ecx
  00041	0f 2f dc	 comiss	 xmm3, xmm4
  00044	0f 93 c2	 setae	 dl
  00047	23 c2		 and	 eax, edx

; 397  : }

  00049	c3		 ret	 0
?inside@AxisAlignedXZ@geom@@UEAA_NVVector@2@@Z ENDP	; geom::AxisAlignedXZ::inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?getNormal@AxisAlignedYZ@geom@@UEAA?AVVector@2@XZ
_TEXT	SEGMENT
this$ = 8
__$ReturnUdt$ = 16
?getNormal@AxisAlignedYZ@geom@@UEAA?AVVector@2@XZ PROC	; geom::AxisAlignedYZ::getNormal, COMDAT

; 16   : {

  00000	33 c0		 xor	 eax, eax
  00002	48 c7 02 00 00
	80 3f		 mov	 QWORD PTR [rdx], 1065353216 ; 3f800000H
  00009	c7 42 0c 00 00
	80 3f		 mov	 DWORD PTR [rdx+12], 1065353216 ; 3f800000H
  00010	89 42 08	 mov	 DWORD PTR [rdx+8], eax

; 407  : 	return Vector(1.0f, 0.0f, 0.0f);

  00013	48 8b c2	 mov	 rax, rdx

; 408  : }

  00016	c3		 ret	 0
?getNormal@AxisAlignedYZ@geom@@UEAA?AVVector@2@XZ ENDP	; geom::AxisAlignedYZ::getNormal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\erlend\documents\github\wind\project\wind\wind\geometry.cpp
;	COMDAT ?inside@AxisAlignedYZ@geom@@UEAA_NVVector@2@@Z
_TEXT	SEGMENT
this$ = 8
vec$ = 16
?inside@AxisAlignedYZ@geom@@UEAA_NVVector@2@@Z PROC	; geom::AxisAlignedYZ::inside, COMDAT

; 412  : 	return vec.y >= pos.y & vec.y <= pos.y + width & vec.z >= pos.z & vec.z <= pos.z + height;

  00000	f3 0f 10 51 0c	 movss	 xmm2, DWORD PTR [rcx+12]
  00005	f3 0f 10 61 10	 movss	 xmm4, DWORD PTR [rcx+16]
  0000a	f3 0f 10 4a 04	 movss	 xmm1, DWORD PTR [rdx+4]
  0000f	0f 28 c2	 movaps	 xmm0, xmm2
  00012	f3 0f 58 41 18	 addss	 xmm0, DWORD PTR [rcx+24]
  00017	f3 0f 10 5a 08	 movss	 xmm3, DWORD PTR [rdx+8]
  0001c	33 d2		 xor	 edx, edx
  0001e	8b c2		 mov	 eax, edx
  00020	0f 2f c1	 comiss	 xmm0, xmm1
  00023	0f 28 c4	 movaps	 xmm0, xmm4
  00026	f3 0f 58 41 1c	 addss	 xmm0, DWORD PTR [rcx+28]
  0002b	0f 93 c0	 setae	 al
  0002e	8b ca		 mov	 ecx, edx
  00030	0f 2f c3	 comiss	 xmm0, xmm3
  00033	0f 93 c1	 setae	 cl
  00036	23 c1		 and	 eax, ecx
  00038	8b ca		 mov	 ecx, edx
  0003a	0f 2f ca	 comiss	 xmm1, xmm2
  0003d	0f 93 c1	 setae	 cl
  00040	23 c1		 and	 eax, ecx
  00042	0f 2f dc	 comiss	 xmm3, xmm4
  00045	0f 93 c2	 setae	 dl
  00048	23 c2		 and	 eax, edx

; 413  : }

  0004a	c3		 ret	 0
?inside@AxisAlignedYZ@geom@@UEAA_NVVector@2@@Z ENDP	; geom::AxisAlignedYZ::inside
_TEXT	ENDS
END
